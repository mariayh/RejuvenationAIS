% This file was created with JabRef 2.7.2.
% Encoding: UTF8

@INPROCEEDINGS{an1993evaluating,
  author = {an Goldszmidt, G. and Yemini, Y.},
  title = {Evaluating management decisions via delegation},
  booktitle = {The Third International Symposium on Integrated Network Management,
	San Francisco, CA},
  year = {1993},
  organization = {Citeseer},
  file = {健康评价函数:21_国外其他英文论文\\(1993) evaluating management decision via delegation.pdf:PDF}
}

@INPROCEEDINGS{parnas1994software,
  author = {David Lorge Parnas},
  title = {Software aging},
  booktitle = {Proceedings of the 16th international conference on Software engineering},
  year = {1994},
  pages = {279--287},
  organization = {IEEE Computer Society Press},
  file = {读书笔记_ (1994) Software Aging:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(1994) Software Aging.docx:Word;(1994T) Software Aging.pdf:01-研究组分类文章\\10_David Lorge Parnas        _加拿大麦克马斯特大学\\(1994T) Software Aging.pdf:PDF},
  review = {1、该文认为软件产品衰退不可阻止。关于软件衰退的理解属于软件生命周期中软件的“衰亡期”，即软件不能满足用户的需要，会被淘汰。
	
	该文认为引起软件衰退的因素有两个：
	
	软件产品的功能退化了（过时了），需要需求变更：
	
	1）需求变更失败，软件仍不能满足用户功能需求，被淘汰；用户会转向其他新的、可以满足需求的软件，而放弃去继续再训练、改变旧软件。
	
	2）实现了需求变更，做了些升级等改变，这些改变导致衰退。用户要求变更的时间很紧迫、压力很大，在这样不断的时间紧迫的升级、打补丁过程中，软件中遗留了一些errors。这些error和软件开发期没有解决的隐蔽的缺陷一起，会加剧衰退的步伐。
	
	描述了软件衰退的起因、代价、预防软件退化的措施：执行软件工程流程：良好的设计(灵活、预计可能的需求变化)、详尽的文档、软件评价、截肢(去掉频繁、草率的修改而陈旧的代码)、重构。
	
	但这些仍然不能完全避免衰退的发生，那如何减小衰退带来的损失？容错吧。
	
	2、不足：
	
	主要针对软件产品功能的退化,草率的应对需求变更，引起代码质量下降；软件工程做的再好，仍不可避免会衰退。},
  timestamp = {2012.02.21}
}

@INPROCEEDINGS{Garg1995p180-187,
  author = {Garg, S. and Puliafito, A. and Telek, M. and Trivedi, K. S.},
  title = {Analysis of software rejuvenation using Markov Regenerative Stochastic
	Petri Net},
  booktitle = {Proc. Symp. Sixth Int Software Reliability Engineering},
  year = {1995},
  pages = {180--187},
  __markedentry = {[mariayh:]},
  abstract = {In a client-server type system, the server <span class='snippet'>software</span>
	is required to run continuously for very long periods. Due to repeated
	and potentially faulty usage by many clients, such <span class='snippet'>software</span>
	&ldquo;ages&rdquo; with time and eventually fails. (Huang et al.,
	1995) proposed a technique called &ldquo;<span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>&rdquo; in which the <span
	class='snippet'>software</span> is periodically stopped and then
	restarted in a &ldquo;robust&rdquo; state after proper maintenance.
	This &ldquo;renewal&rdquo; of <span class='snippet'>software</span>
	prevents (or at least postpones) the crash failure. As the time lost
	(or the cost incurred) due to the <span class='snippet'>software</span>
	failure is typically more than the time lost (or the cost incurred)
	due to <span class='snippet'>rejuvenation</span>, the technique reduces
	the expected unavailability of the <span class='snippet'>software</span>.
	We present a quantitative analysis of <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>. The behavior of the system
	is represented through a Markov Regenerative Stochastic Petri Net
	(MRSPN) model which is solved both for steady state as well as transient
	conditions. We provide a closed-form analytical solution for the
	steady state expected down time (and the expected cost incurred)
	due to system unavailability. We also evaluate the optimal <span
	class='snippet'>rejuvenation</span> interval which minimizes the
	expected unavailability of the <span class='snippet'>software</span>},
  doi = {10.1109/ISSRE.1995.497656},
  file = {1995 - Analysis of software rejuvenation using Markov regenerative stochastic Petri net(早期基于度量).pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\1995 - Analysis of software rejuvenation using Markov regenerative stochastic Petri net(早期基于度量).pdf:PDF},
  review = {一、心得：
	
	1）、本文研究动机：对软件抗衰进行定量分析，目的是处理确定的抗衰周期，文章用马尔科夫再生随机petri网代表系统行为，因为它既可以解决稳定状态，也可以解决瞬时（transient）状态。求解稳定状态的剩余寿命（第一次抗衰时机）和最优抗衰周期。
	
	 提出问题的原因：抗衰造成的停机也有成本，虽然比意外宕机成本低，但如果太频繁抗衰，成本、损失也很高
	
	2)如何找到解决问题的方法的？(如何选择解决方案)
	
	 马尔科夫再生随机petri网既可以解决稳定状态，也可以解决瞬时（transient）状态。
	
	3)解决方案成立的假设是什么？假设是否现实(realistic)？如果去掉假设是否会影响方法的有效性？
	
	4)将来的研究方向是什么？哪些已经完成或实现？理论证明或实验模拟是否完善？算法潜在的扩展或改进方向是什么？还有哪些潜在的应用领域？等等
	
	二、感兴趣的立论和内容 
	
	 软件容错方法是种有效的方法来构建无故障软件。一般的软件容错方法（N版本冗余方法[1]和恢复块（程序结构）方法[16]）在失效发生后，才出发恢复过程，由此产生的经济成本一直居高不下，研究者们开始研究减少这种成本。
	
	 有计划地、主动地采取措施清除软件内部错误，即使需要停机，这造成的成本远比意外宕机造成的成本小得多[7]。在这个前提下，学术界提出一种预防性管理措施：软件抗衰来应对软件衰退，并指出：预防性维护是软件容错系统中增加系统可用性、降低软件失效导致的成本的关键策略之一。
	
	一般预防性维护是停机，执行一些必要的维护后，再开机，使系统重归可用（available）状态。
	
	 本文第三章有系统描述、刻画行为。
	
	[1] A. Avizienis, "The n-version approach to fault tolerant software”,
	lEEE Trans. on Software 
	
	Engg., Vol. SE-11, No. 12, pp. 1491-1501, December 1985. 
	
	[16] B. Randell, “System structure for software fault tolerance",
	IEEE Trans. on Software Engg., Vol. 
	
	SE-1, pp. 220-232, June 1975.},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{garg1995time,
  author = {Garg, S. and Huang, Y. and Kintala, C. and Trivedi, K.S.},
  title = {Time and load based software rejuvenation: policy, evaluation and
	optimality},
  booktitle = {Proceedings of the First Fault-Tolerant Symposium},
  year = {1995},
  pages = {22--25},
  file = {(1995) Time and load based software rejuvenation：policy, evaluation and optimality.ps:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(1995) Time and load based software rejuvenation：policy, evaluation and optimality.ps:PostScript},
  review = {作者指出以前的基于时间模型的抗衰方法只考虑了时间对软件性能的影响，而忽略了执行抗衰活动时，系统负载对停机成本的影响。
	
	为了解决上述问题，Garg提出建立抗衰分析模型时，应考虑系统负载随时间的分布，并在一个基于事务的软件中分析了两种抗衰策略（单纯考虑时间的策略、考虑时间与负载的策略），并指出考虑了负载的抗衰策略更准确。
	
	只考虑了时间对软件性能的影响，而忽略了执行抗衰活动时，系统负载对停机成本的影响。
	
	为了解决上述问题，Garg提出建立抗衰分析模型时，应考虑系统负载随时间的分布，并在一个基于事务的软件中分析了两种抗衰策略（单纯考虑时间的策略、考虑时间与负载的策略），并指出考虑了负载的抗衰策略更准确。},
  timestamp = {2012.03.02}
}

@INPROCEEDINGS{Huang1995p381-390,
  author = {Huang, Y. and Kintala, C. and Kolettis, N. and Fulton, N.D.},
  title = {Software rejuvenation:Analysis module and applications},
  booktitle = {Fault-Tolerant Computing, 1995. FTCS-25. Digest of Papers., Twenty-Fifth
	International Symposium on},
  year = {1995},
  pages = {381--390},
  organization = {IEEE},
  file = {读书笔记:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(1995) Software Rejuvenation：Analysis Module and Applications.doc:Word;1995Yennun Huang - Software Rejuvenation：Analysis Module and Applications（隐蔽性软件故障，提出衰退现象）.pdf:01-研究组分类文章\\12_Yennun Huang          _贝尔实验室\\1995Yennun Huang - Software Rejuvenation：Analysis Module and Applications（隐蔽性软件故障，提出衰退现象）.pdf:PDF},
  owner = {mariayh},
  review = {隐蔽性软件故障},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{garg1996minimizing,
  author = {Garg, S. and Huang, Y. and Kintala, C. and Trivedi, K.S.},
  title = {Minimizing completion time of a program by checkpointing and rejuvenation},
  booktitle = {ACM SIGMETRICS Performance Evaluation Review},
  year = {1996},
  volume = {24},
  number = {1},
  pages = {252--261},
  organization = {ACM},
  abstract = {Checkpointing with rollback-recovery is a well known technique to
	reduce the completion time of a program in the presence of failures.
	While checkpointing is corrective in nature, rejuvenation refers
	to preventive maintenance of software aimed to reduce unexpected
	failures mostly resulting from the "aging" phenomenon. In this paper,
	we show how both these techniques may be used together to further
	reduce the expected completion time of a program. The idea of using
	checkpoints to reduce the amount of rollback upon a failure is taken
	a step further by combining it with rejuvenation. We derive the equations
	for expected completion time of a program with finite failure free
	running time for the following three cases when; (a) neither checkpointing
	nor rejuvenation is employed, (b) only checkpointing is employed,
	and finally (c) both checkpointing and rejuvenation are employed.We
	also present numerical results for Weibull failure time distribution
	for the above three cases and discuss optimal checkpointing and rejuvenation
	that minimizes the expected completion time. Using the numerical
	results, some interesting conclusions are drawn about benefits of
	these techniques in relation to the nature of failure distribution.},
  file = {(1996) Minimizing completion time of a program by checkpointing and rejuvenation.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\Sachin Garg(Ph.D_ Duke)\\(1996) Minimizing completion time of a program by checkpointing and rejuvenation.pdf:PDF},
  timestamp = {2012.02.23}
}

@ARTICLE{garg1996modeling,
  author = {Garg, S. and Pfening, A. and Puliafito, A. and Telek, M. and Trivedi,
	KS},
  title = {Modeling and analysis of load and time dependent software rejuvenation
	policies},
  year = {1996},
  note = {方法：马尔科夫再生随机petri模型},
  abstract = {Due to repeated and potentially faulty usage of continuously running
	client-server type software systems by many clients, such software
	"ages" with time and eventually fails. Huang et. al. proposed a technique
	called "software rejuvenation" [3] in which the software is periodically
	stopped and then restarted in a "robust" state after proper maintenance.
	This "renewal " of software prevents, or at least postpones, the
	crash failure. In this paper, we present a quantitative analysis
	of two software rejuvenation policies. The first one considers only
	the ageing behaviour of the system by time, while the second one
	considers the actual load of the system as well. The behaviour of
	the system is represented through a Markov Regenerative Stochastic
	Petri Net (MRSPN) model. Numerical analysis of the system performance
	regarding the probability of successful service of clients is provided.
	Keywords: Continuously running client-server software systems, Software
	rejuvenation, Markov Regenerati...},
  file = {(1996) Modeling and analysis of load and time dependent software rejuvenation policies.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\Sachin Garg(Ph.D_ Duke)\\(1996) Modeling and analysis of load and time dependent software rejuvenation policies.pdf:PDF},
  publisher = {Citeseer},
  timestamp = {2012.02.23},
  url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.5117}
}

@ARTICLE{pfening1996optimal,
  author = {András Pfening and Sachin Garg and Puliafito, A. and Telek, M. and
	Trivedi, K.S.},
  title = {Optimal software rejuvenation for tolerating soft failures},
  journal = {Performance Evaluation},
  year = {1996},
  volume = {27},
  pages = {491--506},
  abstract = {Abstract
	
	In recent studies, the phenomenon of software “aging” has come to
	light which causes performance of a software to degrade with time.
	Software rejuvenation is a fault tolerance technique which counteracts
	aging. In this paper, we address the problem of determining the optimal
	time to rejuvenate a server type software which experiences “soft
	failures” (witnessed in telecommunication systems) because of aging.
	The service rate of the software gradually decreases with time and
	settles to a very low value. Since the performability in this state
	is unacceptable, it is necessary to “renew” the software to its peak
	performance level. We develop Markov decision models for such a system
	for two different queuing policies. For each policy, we define the
	look-ahead-n cost functions and prove results on the convergence
	of these functions to the optimal minimal cost function. We also
	prove simple rules to determine optimal times to rejuvenate for a
	realistic cost criterion. Finally, the results are illustrated numerically
	and the effectiveness of the MDP model is compared with that of the
	simple rules.
	
	
	Keywords
	
	Fault tolerant systems; Software rejuvenation; Markov decision process;
	Optimal stopping problem},
  publisher = {Elsevier},
  timestamp = {2012.02.23}
}

@INPROCEEDINGS{Slothouber1996p-,
  author = {Slothouber, L.P.},
  title = {A model of web server performance},
  booktitle = {Proceedings of the Fifth International World Wide Web Conference},
  year = {1996},
  file = {(1995) A Model of Web Server Performance.pdf:21_国外其他英文论文\\(1995) A Model of Web Server Performance.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{xanthakis1996immune,
  author = {Xanthakis, S. and Karapoulios, S. and Pajot, R. and Rozz, A.},
  title = {Immune system and fault-tolerant computing},
  booktitle = {Artificial Evolution},
  year = {1996},
  pages = {181--197},
  organization = {Springer},
  file = {免疫容错计算:E\:\\000_我的研究\\11- 参考文献\\000_人工免疫系统 AIS\\13_按应用领域分类\\故障检测 诊断 预测 容错\\(1996) Immune system and fault-tolerant computing.pdf:PDF},
  timestamp = {2012.02.28}
}

@INPROCEEDINGS{Garg1997p88-96,
  author = {Garg, S. and Puliafito, A. and Telek, M. and Trivedi, K. S.},
  title = {On the analysis of software rejuvenation policies},
  booktitle = {Proc. 'Are We Making Progress Towards Computer Assurance?' the 12th
	Annual Conf. Computer Assurance COMPASS '97},
  year = {1997},
  pages = {88--96},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a technique for <span class='snippet'>software</span> fault tolerance
	which involves occasionally stopping the executing <span class='snippet'>software</span>,
	&ldquo;cleaning&rdquo; the &ldquo;internal state&rdquo; and restarting.
	This cleanup is done at desirable times during execution on a preventive
	basis set that unplanned failures, which result in higher costs compared
	to planned stopping, are avoided. Since during <span class='snippet'>rejuvenation</span>,
	the <span class='snippet'>software</span> is typically unavailable
	or in a degraded mode of operation, the operation involves a cost.
	In this paper, we present an analytical model of a <span class='snippet'>software</span>
	system which serves transactions. Due to &ldquo;aging&rdquo;, not
	only the service rate of the <span class='snippet'>software</span>
	decreases with time hut the <span class='snippet'>software</span>
	itself experiences occasional crash/hang failures. We propose and
	compare two <span class='snippet'>rejuvenation</span> policies. The
	policies are evaluated for the resulting steady state availability
	as well the probability that a transaction is denied service. We
	also numerically illustrate the use of our model to compute the optimal
	<span class='snippet'>rejuvenation</span> interval which minimizes
	(maximizes) the loss probability (steady state availability)},
  doi = {10.1109/CMPASS.1997.613248},
  file = {(1997) On the analysis of software rejuvenation policies.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(1997) On the analysis of software rejuvenation policies.pdf:PDF},
  review = {一、心得
	
	1）研究动机
	
	首先从传统软件容错方法存在的问题，提到预防性容错方法的必要性；然后从衰退的发现，描述了软件抗衰研究的动机；并指出从领域失效数据观察到：大部分软件失效都具有瞬时性[6]，由超载或异常处理引起[13].
	
	评价两种衰退策略：从恢复后软件的稳定态可用性和事务的服务拒绝概率来评估。
	
	2）针对的对象和衰退因素
	
	基于事务的软件系统
	
	3)如何找到解决方案的？
	
	4）假设是什么？
	
	 1' 衰退可以通过降低的服务率和增加的失效率捕获；
	
	 该假设比较现实；以前的模型只考虑了一方面。
	
	 2' 从失效状态中恢复的时机一般是分布的；
	
	 3' 执行抗衰的时机一般是分布的；
	
	 4' 策略一的抗衰周期和策略二的抗衰等待是确定的；
	
	 5' transaction的到达遵循泊松过程。
	
	假设性能退化和崩溃失效是独立的，
	
	
	
	【7】：Huang通用目的应用；
	
	【2】：Avritzer，Weyuker：电话通讯交换软件；衰退效果显示为性能逐渐下降；软件的服务率持续随时间下降，最后开始丢失数据包。
	
	【10】：鲜明的例子：衰退导致丧命。},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Yajnik1997p-,
  author = {Yajnik, S. and Huang, Y. },
  title = {STL: a tool for on-line software update and rejuvenation},
  booktitle = {Proc. PROCEEDINGS The Eighth Int. Symp. On Software Reliability Engineering},
  year = {1997},
  __markedentry = {[mariayh:]},
  abstract = {Summary form only given, as follows. A large number of tools and techniques
	have been developed in the past to achieve a 24&times;7 system availability
	(24 hours a day and 7 days a week) by reducing unscheduled system
	downtime due to failures. However, a highly available or fault-tolerant
	system may still have to be taken off-line for <span class='snippet'>software</span>
	and hardware updates, maintenance and <span class='snippet'>rejuvenation</span>.
	Therefore, the scheduled downtime for maintenance could become the
	major source of system unavailability. One big challenge in a highly
	available system is to keep the system running while it is undergoing
	<span class='snippet'>software</span> updates or bug fixes. In this
	paper, we describe a tool that can be used to perform an online update
	of <span class='snippet'>software</span> in a cluster environment.
	The tool consists of a protocol compiler (stgen) and a library (libst)
	for marshaling and unmarshaling data during a <span class='snippet'>software</span>
	update. The tool has the ability to transfer complex data structures
	between two processes even if the data definitions in the two processes
	are different. The data transfer format is machine-independent. Hence,
	the tool can transfer data across processes running on different
	machine types. The paper describes some real-life applications of
	the tool and presents performance measurements of the tool for these
	applications},
  doi = {10.1109/ISSRE.1997.630872},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Barford1998p151-160,
  author = {Barford, P. and Crovella, M.},
  title = {Generating representative web workloads for network and server performance
	evaluation},
  booktitle = {ACM SIGMETRICS Performance Evaluation Review},
  year = {1998},
  volume = {26},
  number = {1},
  pages = {151--160},
  organization = {ACM},
  file = {(1998) Generating representative Web workloads for network and server performance evaluation（引用1370）.pdf:05-抗衰补充\\(1998) Generating representative Web workloads for network and server performance evaluation（引用1370）.pdf:PDF},
  owner = {mariayh},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Bobbio1998p4-12,
  author = {Bobbio, A. and Sereno, M. },
  title = {Fine grained software rejuvenation models},
  booktitle = {Proc. IEEE Int. Computer Performance and Dependability Symp. IPDS
	'98},
  year = {1998},
  pages = {4--12},
  note = {第一次提出基于度量的方法吗？现状总结可以参考},
  __markedentry = {[mariayh:]},
  abstract = {Preventive maintenance of operational <span class='snippet'>software</span>
	systems is a technique used to counteract the phenomenon of <span
	class='snippet'>software</span> &ldquo;aging&rdquo;. Haung et al.
	(1995) proposed a technique called &ldquo;<span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>&rdquo; in which the <span
	class='snippet'>software</span> is periodically stopped and then
	restarted in a &ldquo;robust&rdquo; state after a proper maintenance.
	This &ldquo;renewal&rdquo; of the <span class='snippet'>software</span>
	prevents, or at least postpones, the occurrence of crash failures.
	Previous models of <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	were all based on a &ldquo;black box&rdquo; approach in which the
	degradation mechanism was modeled by three stares: a fully available
	state, a degraded state from which the decision whether to rejuvenate
	can be taken, and a crash state. The present paper proposes a fine
	grained model for the quantitative analysis of <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>. The model is based on
	the assumption that it is possible to identify the current degradation
	level of the system by monitoring an observable quantity, so that
	the future strategy can be tuned on the measured parameter. Two different
	strategies are discussed to decide whether and when to rejuvenate.
	Furthermore, resorting to the theory of renewal processes with reward
	the steady-state unavailability can be estimated for the various
	policies and an optimality criterion can be invoked to evaluate the
	proper <span class='snippet'>rejuvenation</span> intervals. A set
	of numerical experiments conclude the paper},
  doi = {10.1109/IPDS.1998.707704},
  file = {(1998) Fine grained software rejuvenation models.pdf:21_国外其他英文论文\\(1998) Fine grained software rejuvenation models.pdf:PDF},
  review = {assumption that it is possible to identify the current degradation
	level of the system by monitoring an observable quantity, so that
	the future strategy can be tuned on the measured parameter. 
	
	1）研究动机
	
	 以前的抗衰方法的决策（基于可用性、成本、何时、多长周期抗衰）是一个黑盒方法，只把系统分为三种不同的状态（健康态、需执行抗衰态、崩溃态），不能很好的刻画系统的动态
	
	 提出：假设可以通过监测可观测的质量，识别系统当前的衰退level，这样的话，将来的（抗衰）策略可以与监测参数相匹配。
	
	 是第一次提出基于度量的方法吗？
	
	2）提出的假设
	
	 假设可以通过监测可观测的质量，识别系统当前的衰退level},
  timestamp = {2012.02.20}
}

@ARTICLE{garg1998analysis,
  author = {Garg, S. and Puliafito, A. and Telek, M. and Trivedi, K.},
  title = {Analysis of preventive maintenance in transactions based software
	systems},
  journal = {Computers, IEEE Transactions on},
  year = {1998},
  volume = {47},
  pages = {96--107},
  number = {1},
  __markedentry = {[mariayh:4]},
  abstract = {摘要翻译：运行时软件系统的预防性（定期preventive）维护是一种软件故障耐受新技术，被用于消除软件衰退现象。然而，它招致了some
	overhead（额外费用？）。不仅在通用软件系统中、而且在安全攸关（safety-critical）的和高可用系统中，实施preventive维护的必要性都清晰地表明：需要用基于分析的方法（而非基于历史经验的方法）来决策实施preventive维护的最佳时间。本文给出一个基于事务的软件系统的分析模型。由于衰退，不仅软件的服务率随时间下降，而且软件自身经历了崩溃/挂起故障（failure），这种故障导致软件不可用。该文建模了两种预防性维护策略，并推导得到策略相应的稳定状态可用性、事务丢失的概率和事务预期响应时间的上限的表达式。最后，该文进行了数次试验说明模型的可用性。
	
	关键词：预防性维护、软件故障耐受、软件抗衰、基于事务的软件系统、可靠性建模、马尔科夫再生模型},
  file = {读书笔记:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\Kishor S. Trivedi相关\\(1998) analysis of preventive maintenance in transactions based software systems-读书笔记.docx:Word;1998 - analysis of preventive maintenance in transactions based software systems(最为完善的基于时间的综合模型).pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\1998 - analysis of preventive maintenance in transactions based software systems(最为完善的基于时间的综合模型).pdf:PDF},
  keywords = {预防性维护、软件故障耐受、软件抗衰、基于事务的软件系统、可靠性建模、马尔科夫再生模型},
  publisher = {IEEE},
  review = {最为完善的基于时间的综合模型
	
	一、心得
	
	1）动机
	
	2）解决方案成立的假设是什么？假设是否现实(realistic)？如果去掉假设是否会影响方法的有效性？
	
	 假设是：软件失效或PM发起时，incoming事务会丢失。因此失效因素和指标选择的是丢失的事务数。
	
	 假设对于很多中小IT公司开发的软件来说成立；
	
	 但不适合很多数据库系统，因其支持恢复，事务arrive时记有日志；当失效发生时，日志并不会丢失，这就违反了该文的假定。
	
	 假设去掉之后，如果针对对象是DBMS，方法就没有有效性了。
	
	
	若干实验证明影响抗衰模型精准度的最重要的因素在于捕获衰退时的假定：
	
	假定一：捕获的衰退的影响：衰退的影响是崩溃/挂起故障（导致软件不可用）[8,9,10,16,26]和逐步的性能下降[22]，不同的研究针对的影响(失效或性能下降，如软件服务率下降)不同，该文在同一个模型中同时考虑了这两种影响。
	
	假定二：分布：There is no consensus（一致意见） on the time to failure distribution
	of an operational software and of the nature of service degradation
	it experiences.
	
	假定三：负载（load）：该文首次考虑了负载对衰退的影响，原因：瞬时（临时）故障在一定程度上是被超载引起的。[24]},
  timestamp = {2012.02.21}
}

@INPROCEEDINGS{garg1998methodology,
  author = {Garg, S. and van Moorsel, A. and Vaidyanathan, K. and Trivedi, K.S.},
  title = {A methodology for detection and estimation of software aging},
  booktitle = {Software Reliability Engineering, 1998. Proceedings. The Ninth International
	Symposium on},
  year = {1998},
  pages = {283--292},
  organization = {IEEE},
  abstract = {Abstract：The phenomenon of software aging refers to the accumulation
	of errors during the execution of the software which eventually results
	in it’s crash/hang failure. A gradual performance degradation may
	also accompany software aging. Pro-active fault management techniques
	such as “Software rejuvenation” [9] may be used to counteract aging
	if it exists. In this paper, we propose a methodology for detection
	and estimation of aging in the UNIX operating system. First, we present
	the design and implementation of an SNMP based, distributed monitoring
	tool used to collect operating system resource usage and system activity
	data at regular intervals, from networked UNIX workstations. Statistical
	trend detection techniques are applied to this data to detect/validate
	the existence of aging. For quantifying the effect of aging in operating
	system resources, we propose a metric “Estimated time to exhaustion”
	which is calculated using well known slope estimation techniques.
	Although the distributed data collection tool is specific to UNIX,
	the statistical techniques can be used for detection and estimation
	of aging in other software as well.
	
	摘要翻译：软件衰退现象指的是（refer to）软件运行过程中产生的错误的累积最终（会）导致软件发生崩溃或挂起失效。软件衰退会伴随着逐步的（gradual渐变的）性能退化。如果衰退存在，可以利用主动故障管理技术（如软件抗衰9）来消除。本文提出一个UNIX操作系统中衰退的检测和评估方法。首先，描述了基于SNMP的、分布式监测工具的设计和实现，这个工具用于定期从网络UNIX工作站收集操作系统资源使用情况和系统活动数据。之后用统计趋势检测技术分析这些数据，以检测、确认是否存在衰退。为了量化/衡量衰老在操作系统资源上的影响，该文提出了一种公制的（metric）预计耗竭时间（方法），该方法calculated使用有名的斜率评估技术（slope
	estimation technique）。尽管（该文使用的）分布式数据收集工具是针对UNIX设计的，该文的统计技术也可被用于其他软件的衰退的检测和评估。},
  file = {读书笔记：最早真正意义的基于度量的抗衰思想:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\Kishor S. Trivedi相关\\(1998) A methodology for detection and estimation of software aging-读书笔记.docx:Word;1998 - A methodology for detection and estimation of software aging(最早真正意义的基于度量的抗衰思想).pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\1998 - A methodology for detection and estimation of software aging(最早真正意义的基于度量的抗衰思想).pdf:PDF},
  review = {最早真正意义的基于度量的抗衰思想.
	
	一、心得
	
	1）本文研究动机
	
	之前的基于度量的方法只是获取失效发生时的数据（失效数据），不足以监测、评估软件衰退，且软件系统付出的代价高
	
	2）如何找到解决方案的？
	
	时序分析 - 趋势分析 - 斜率估计方法
	
	周期性的监测和收集与决定运行软件的健康状态有关的参数（系统行为和OS资源使用情况），之后用统计趋势分析（检测）技术对这些数据进行分析，建模单个资源消耗的趋势，提出预计耗竭时间概念，预估OS资源耗尽时间，来量化评估衰退。该文提出的一种metric预计耗竭时间方法，使用斜率估值技术（slope
	estimation technique）来衡量衰退在OS资源上的影响。
	
	3）不足之处
	
	该文忽略了负载对系统资源耗费的影响;假设资源耗损情况有全局趋势.
	
	分开考虑每个资源的趋势；而且是线性的 = 一维线性时序分析。无法分析非线性的、复杂的衰退情况
	
	不考虑那些在资源耗竭上没有任何表示的故障（可能是硬件故障或其他故障）
	
	4）未来方向
	
	考虑负载（环境因素）对衰退的影响
	
	5）本文针对的系统、衰退因素
	
	Hosted：主机名、操作系统、OS版本、mc地址
	
	timeVal：dateAndTime：当前日期和时间、hostUpStas：自上一次重启到目前的up时间
	
	osResource：
	
	 usedSwapSpace：已用交换空间
	
	 fileTableSize：文件表大小
	
	 realMemoryFree：剩余内存
	
	 procsTotal：进程数
	
	procStats：该机上运行的进程的状态},
  timestamp = {2012.02.21}
}

@ARTICLE{Mosberger1998p31-37,
  author = {Mosberger, D. and Jin, T.},
  title = {httperf：a tool for measuring web server performance},
  journal = {ACM SIGMETRICS Performance Evaluation Review},
  year = {1998},
  volume = {26},
  pages = {31--37},
  number = {3},
  file = {(1998) httperf：a tool for measuring web server performance（引用565）.pdf:05-抗衰补充\\(1998) httperf：a tool for measuring web server performance（引用565）.pdf:PDF},
  pdf = {05-抗衰补充\(1998) httperf：a tool for measuring web server performance（引用565）.pdf},
  publisher = {ACM},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Bobbio1999p82-91,
  author = {Bobbio, A. and Garg, S. and Gribaudo, M. and Horvath, A. and Sereno,
	M. and Telek, M. },
  title = {Modeling software systems with rejuvenation, restoration and checkpointing
	through fluid stochastic Petri nets},
  booktitle = {Proc. 8th Int Petri Nets and Performance Models Workshop},
  year = {1999},
  pages = {82--91},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, we present a Fluid Stochastic Petri Net (FSPN) based
	model which captures the behavior of aging <span class='snippet'>software</span>
	systems with checkpointing, <span class='snippet'>rejuvenation</span>
	and self-restoration, three well known techniques of <span class='snippet'>software</span>
	fault tolerance. The proposed FSPN based modeling framework is novel
	in many aspects. First, the FSPN formalism itself is extended by
	adding flush-out arcs. Second, the three techniques are simultaneously
	captured in a single model for the first time. Third, the formalism
	enables modeling dependencies of the three techniques on various
	system features such as failure, load and time in the same framework.
	Further, our base FSPN model can be viewed as a generalization of
	most previous models in the literature. We show that these FSPNs
	can not only mimic previously published models but can also extend
	them. For one FSPN model, we present numerical results to illustrate
	their usage in deriving measures of interest},
  doi = {10.1109/PNPM.1999.796555},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{hunter1999availability,
  author = {Hunter, S.W. and Smith, W.E.},
  title = {Availability modeling and analysis of a two node cluster},
  booktitle = {Proceedings of the 5th International Conference on Information Systems,
	Analysis and Synthesis},
  year = {1999},
  abstract = {Businesses today are becoming increasingly dependent on information
	technology (IT) to meet business-critical demands.
	
	Due to this dependency, the computing solution chosen must prove to
	be highly available, have scalable performance as
	
	well as being easily managed. A low cost approach being taken to accomplish
	this is to cluster multiple industry
	
	standard servers together in such a way as to allow workload sharing
	and fail-over capabilities. However, in able to
	
	validate and compare the different techniques, it is often necessary
	to build models of the system. This paper describes
	
	1) some system characteristics that benefit from clustering, 2) a
	two-node MSCS cluster configuration, and 3) an availability model
	of this system using Markov modeling techniques.},
  file = {(1999) Availability Modeling and analysis of a Two Node Cluster.pdf:21_国外其他英文论文\\(1999) Availability Modeling and analysis of a Two Node Cluster.pdf:PDF},
  review = {描述了系统可靠性相关的度量：可用性、可执行性、可扩展性等。
	
	an availability model of a two-node management scheduling and control
	system (MSCS) is described. Different failure scenarios are modeled,
	and availability is analyzed.
	
	实验架构可参考},
  timestamp = {2012.03.06}
}

@INPROCEEDINGS{vaidyanathan1999measurement,
  author = {Vaidyanathan, K. and Trivedi, K.S.},
  title = {A measurement-based model for estimation of resource exhaustion in
	operational software systems},
  booktitle = {Software Reliability Engineering, 1999. Proceedings. 10th International
	Symposium on},
  year = {1999},
  pages = {84--93},
  organization = {IEEE},
  abstract = {Software systems are known to suffer from outages due to transient
	errors. Recently, the phenomenon of “software aging”, in which the
	state of the software system degrades with time, has been reported
	(S. Garg et al., 1998). The primary causes of this degradation are
	the exhaustion of operating system resources, data corruption and
	numerical error accumulation. This may eventually lead to performance
	degradation of the software or crash/hang failure, or both. Earlier
	work in this area to detect aging and to estimate its effect on system
	resources did not take into account the system workload. In this
	paper, we propose a measurement-based model to estimate the rate
	of exhaustion of operating system resources both as a function of
	time and the system workload state. A semi-Markov reward model is
	constructed based on workload and resource usage data collected from
	the UNIX operating system. We first identify different workload states
	using statistical cluster analysis and build a state-space model.
	Corresponding to each resource, a reward function is then defined
	for the model based on the rate of resource exhaustion in the different
	states. The model is then solved to obtain trends and the estimated
	exhaustion rates and the time-to-exhaustion for the resources. With
	the help of this measure, proactive fault management techniques such
	as “software rejuvenation” (Y. Huang et al., 1995) may be employed
	to prevent unexpected outages.},
  file = {(1999) A measurement-based model for estimation of resource exhaustion in operational software systems.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\Kalyan Vaidyanathan(Ph.D_ Duke)\\(1999) A measurement-based model for estimation of resource exhaustion in operational software systems.pdf:PDF},
  review = {1)研究动机
	
	 前一篇文章“a methodology for detection and estimation of software aging
	”在检测抗衰和评价衰退对操作系统资源的影响时，只考虑了时间，未考虑系统负载对资源使用情况的影响。本文提出一个基于度量的方法来评估运行中的系统的系统资源耗竭率，把它作为时间和系统负载的函数。
	
	
	2）主要贡献
	
	The main contributions of this paper are (1) a measurement-basedmodel
	for capturing the effect of systemworkload on operating systemresources
	and (2) investigating the effect of workload on system resources,
	particularly with respect to exhaustion.
	
	改进：
	
	 改进了系统负荷的表达参数：别人使用的是CPU、内存使用率作为系统负载的衡量指标，本文使用系统活动参数来表达：四维{cpuContextSwitch,
	sysCall, pageIn, pageOut}；别人的反馈率是基于错误率设置的（依赖错误发生时获取的数据，及历史衰退数据），而本文每个状态的反馈率的赋值反应的是每个状态下的资源耗损率.
	
	
	3）不足
	
	未考虑中间件系统的资源耗竭情况。很多时候，out of memory等错误引起的失效是由于中间件系统，如JVM的资源耗尽引起的。},
  timestamp = {2012.03.05}
}

@INPROCEEDINGS{Dohi2000p25-34,
  author = {Dohi, T. and Goseva-Popstojanova, K. and Trivedi, K. S. },
  title = {Analysis of software cost models with rejuvenation},
  booktitle = {Proc. Fifth IEEE Int High Assurance Systems Engineering Symposim
	. HASE 2000},
  year = {2000},
  pages = {25--34},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive maintenance technique that has been extensively studied
	in the recent literature. In this paper we extend the classical result
	by Huang et al. (1995), and in addition propose a modified stochastic
	model to generate the <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> schedule. More precisely, the
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	models are formulated via the semi-Markov process, and the optimal
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedule which minimizes the expected costs per unit time in the
	steady-state are derived analytically for respective cases. Further
	we develop non-parametric algorithms to estimate the optimal <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedules, provided that the statistical complete (unsensored) sample
	data of failure time is given. In numerical examples, we compare
	two models in terms of economic justification, and examine asymptotic
	properties for the statistical estimation algorithms},
  doi = {10.1109/HASE.2000.895436},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Dohi2000p77-84,
  author = {Dohi, T. and Goseva-Popstojanova, K. and Trivedi, K. S.},
  title = {Statistical non-parametric algorithms to estimate the optimal software
	rejuvenation schedule},
  booktitle = {Proc. Pacific Rim Int Dependable Computing Symp},
  year = {2000},
  pages = {77--84},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, we extend the classical result by Huang, Kintala, Kolettis
	and Fulton (1995), and in addition propose a modified stochastic
	model to determine the software rejuvenation schedule. More precisely,
	the software rejuvenation models are formulated via the semi-Markov
	processes, and the optimal software rejuvenation schedules which
	maximize the system availabilities are derived analytically for respective
	cases. Further, we develop nonparametric statistical algorithms to
	estimate the optimal software rejuvenation schedules, provided that
	the statistical complete (unsensored) sample data of failure times
	is given. In numerical examples, we examine asymptotic properties
	for the statistical estimation algorithms.},
  doi = {10.1109/PRDC.2000.897287},
  file = {:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2000) Statistical non-parametric algorithms to  estimate the optimal software rejuvenation schedule.pdf:PDF},
  review = {1）研究动机：
	
	改进Huang1995年提出的抗衰模型（基于时间模型的抗衰方法），加入随机非参数统计方法，评估最优抗衰策略的效果，计算每个策略的系统可用性。
	
	In fact, the measurement-based approach in the literature [7]("Modeling
	and Analysis of Software
	
	Aging and Rejuvenation") to perform the effective software rejuvenation
	requires much effort to measure the physical characteristics of the
	system. Also, the modeling-based approaches studied in the literature
	can not explain the software aging phenomenon completely, since the
	underlying failure time distribution is unknown in many cases. The
	statistical approach developed},
  timestamp = {2012.02.20}
}

@ARTICLE{torres2000software,
  author = {Torres-Pomales, W. and others},
  title = {Software fault tolerance:A tutorial},
  journal = {NASA Langley Research Center, Hampton, Virginia, TM-2000-210616},
  year = {2000},
  file = {(2000) Software fault tolerance：A tutorial.pdf:07- 软件容错\\(2000) Software fault tolerance：A tutorial.pdf:PDF},
  timestamp = {2012.02.28}
}

@INPROCEEDINGS{Trivedi2000p270-279,
  author = {Trivedi, K. S. and Vaidyanathan, K. and Goseva-Popstojanova, K. },
  title = {Modeling and analysis of software aging and rejuvenation},
  booktitle = {Proc. 33rd Annual Simulation Symp. (SS 2000)},
  year = {2000},
  pages = {270--279},
  __markedentry = {[mariayh:]},
  abstract = {Software systems are known to suffer from outages due to transient
	errors. Recently, the phenomenon of “software aging”, one in which
	the state of the software system degrades with time, has been reported.
	To counteract this phenomenon,a proactive approach of fault management,
	called “software rejuvenation”, has been proposed. This essentially
	involves gracefully terminating an application or a system and restarting
	it in a clean internal state. In this paper, we discuss stochastic
	models to evaluate the effectiveness of proactive fault management
	in operational software systems and determine optimal times to perform
	rejuvenation, for different scenarios. The latter part of the paper
	deals with measurement-based methodologies to detect software aging
	and estimate its effect on various system resources. Models are constructed
	using workload and resource usage data collected from the UNIX operating
	system over a period of time. The measurement-based models are intended
	to help development of strategies for software rejuvenation triggered
	by actual measurements.},
  doi = {10.1109/SIMSYM.2000.844925},
  file = {(2000) Modeling and analysis of software aging and rejuvenation.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2000) Modeling and analysis of software aging and rejuvenation.pdf:PDF},
  review = {In fact, the measurement-based approach in the literature [7]("Modeling
	and Analysis of Software
	
	Aging and Rejuvenation") to perform the effective software rejuvenation
	requires much effort to measure the physical characteristics of the
	system.},
  timestamp = {2012.02.20}
}

@ARTICLE{avizienis2001fundamental,
  author = {Avizienis, A. and Laprie, J.C. and Randell, B.},
  title = {Fundamental concepts of dependability},
  journal = {TECHNICAL REPORT SERIESUNIVERSITY OF NEWCASTLE UPON TYNE COMPUTING
	SCIENCE},
  year = {2001},
  volume = {1145},
  pages = {7--12},
  number = {010028},
  file = {(2001) Fundamental concepts of dependability (2012-2-29引用584次).pdf:00-综述性文章\\(2001) Fundamental concepts of dependability (2012-2-29引用584次).pdf:PDF},
  publisher = {Citeseer},
  timestamp = {2012.02.29}
}

@ARTICLE{castelli2001proactive,
  author = {Castelli, V. and Harper, R.E. and Heidelberger, P. and Hunter, S.W.
	and Trivedi, K.S. and Vaidyanathan, K. and Zeggert, W.P.},
  title = {Proactive Management of Software Systems},
  journal = {IBM Journal of Research and Development},
  year = {2001},
  volume = {45},
  pages = {311--332},
  number = {2},
  note = {引用：221},
  abstract = {Software failures are now known to be a dominant source of system
	outages. Several studies and much anecdotal evidence point to “software
	aging” as a common phenomenon, in which the state of a software system
	degrades with time. Exhaustion of system resources, data corruption,
	and numerical error accumulation are the primary symptoms of this
	degradation, which may eventually lead to performance degradation
	of the software, crash/hang failure, or other undesirable effects.
	“Software rejuvenation” is a proactive technique intended to reduce
	the probability of future unplanned outages due to aging. The basic
	idea is to pause or halt the running software, refresh its internal
	state, and resume or restart it. Software rejuvenation can be performed
	by relying on a variety of indicators of aging, or on the time elapsed
	since the last rejuvenation. In response to the strong desire of
	customers to be provided with advance notice of unplanned outages,
	our group has developed techniques that dete ct the occurrence of
	software aging due to resource exhaustion, estimate the time remaining
	until the exhaustion reaches a critical level, and automatically
	perform proactive software rejuvenation of an application, process
	group, or entire operating system, depending on the pervasiveness
	of the resource exhaustion and our ability to pinpoint the source.
	This technology has been incorporated into the IBM Director for xSeries
	servers. To quantitatively evaluate the impact of different rejuvenation
	policies on the availability of cluster systems, we have developed
	analytical models based on stochastic reward nets (SRNs). For time-based
	rejuvenation policies, we determined the optimal rejuvenation interval
	based on system availability and cost. We also analyzed a rejuvenation
	policy based on prediction, and showed that it can further increase
	system availability and reduce downtime cost. These models are very
	general and can capture a multitude of cluster - system characteristics,
	failure behavior, and performabil ity measures, which we are just
	beginning to explore.},
  file = {2001- Proactive Management of Software Systems.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2001- Proactive Management of Software Systems.pdf:PDF},
  publisher = {IBM},
  timestamp = {2012.02.26}
}

@ARTICLE{castelli2001proactiveaging,
  author = {Castelli, V. and Harper, R.E. and Heidelberger, P. and Hunter, S.W.
	and Trivedi, K.S. and Vaidyanathan, K. and Zeggert, W.P.},
  title = {Proactive management of software aging},
  journal = {IBM Journal of Research and Development},
  year = {2001},
  volume = {45},
  pages = {311--332},
  number = {2},
  __markedentry = {[mariayh:]},
  file = {读书笔记:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(2001) Proactive management of software aging.docx:Word;(2001) Proactive Management of Software Aging.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2001) Proactive Management of Software Aging.pdf:PDF},
  publisher = {IBM},
  review = {1）研究动机
	
	提出一个衰退的软件系统的主动管理方法，尤其是针对资源耗竭。为集群系统应用软件抗衰。该文为IBM Director设计和开发了一个抗衰agent，讨论了若干个资源耗竭预测算法，预测是本方法的重要组件。抗衰也会导致宕机和成本损失，如果实施的比实际需要的频繁，将会导致更高的宕机时间和/或成本。因此本文构建和分析了集群系统的随机模型为了（评估、得到？）一些抗衰策略。本文为基于时间的策略说明了抗衰周期在稳定态期望（可接受的）的宕机时间和成本上的效果。然后，得到了最优抗衰周期，它为一组假定的参数值集合最小化宕机时间和成本。这些模型比较通用，且可以捕获很多集群系统特征、失效行为和性能度量（指标）。
	
	
	 用随机反馈网方法（Stochastic Reward nets，SRNs）开发若干个可靠性模型，来评估基于时间的和基于预测的抗衰策略对集群系统可靠性的影响。
	
	2)如何找到解决方案？
	
	 采用简单的基于时间模型的抗衰方法，易于在现有集群管理架构下实现；+ 基于检测和预测的抗衰方法（线性回归）预测资源耗竭引起的软件失效；这两种方法已分别在IBM
	x系列服务器集群服务器上实现。（IBM Netfinity line of cluster servers）
	
	
	3）未来工作
	
	 本文提出未来的工作之一是扩展本文提出的软件抗衰方法的应用范围，另一个是使软件抗衰方法具有自适应和多参数预测能力。目前实现的SRA（软件抗衰Agent），能够检测和预测任何指定的单个参数的耗竭，这种方法可能足够某些应用软件维持可用。但是它依赖于根据经验假设的会耗竭的资源类型和它们的耗竭阈值，而通常情况下，在任意的一个场景中，我们无从得知哪类资源的参数会耗竭。},
  timestamp = {2012.02.29}
}

@INPROCEEDINGS{Dohi2001p87-94,
  author = {Dohi, T. and Danjou, T. and Okamura, H. },
  title = {Optimal software rejuvenation policy with discounting},
  booktitle = {Proc. Pacific Rim Int Dependable Computing Symp},
  year = {2001},
  pages = {87--94},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive maintenance technique that has been extensively studied
	in the recent literature. We consider a generalized problem to estimate
	the optimal <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedule. More precisely, the <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> model is formulated via
	the semi-Markov process, and the optimal <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> schedule which minimizes
	the expected total discounted cost over an infinite time horizon
	is derived analytically. Further, we develop a statistically nonparametric
	algorithm to estimate the optimal <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> schedule, provided that
	the complete sample data of failure time is given. In numerical examples,
	we investigate how the discount factor affects the optimal policy
	and examine an asymptotic property for the statistical estimation
	algorithm},
  doi = {10.1109/PRDC.2001.992684},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{vaidyanathan2001extended,
  author = {Vaidyanathan, K. and Trivedi, K.S.},
  title = {Extended classification of software faults based on aging},
  booktitle = {Fast Abstract, Int. Symp. Software Reliability Eng., Hong Kong},
  year = {2001},
  organization = {Citeseer},
  file = {01-Extended classification of software faults based on aging.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\01-Extended classification of software faults based on aging.pdf:PDF},
  review = {软件抗衰方法分类。
	
	软件衰退模式：
	
	1）性能下降
	
	2）挂起或崩溃失效、或衰退导致的数据不一致
	
	故障模式：
	
	内存泄露或膨胀，未释放的文件锁，数据损坏，存储空间碎片，舍入误差错误累积},
  timestamp = {2012.02.29}
}

@ARTICLE{Vaidyanathan2001p62-71,
  author = {Vaidyanathan, K. and Harper, R.E. and Hunter, S.W. and Trivedi, K.S.},
  title = {Analysis and implementation of software rejuvenation in cluster systems},
  journal = {ACM SIGMETRICS Performance Evaluation Review},
  year = {2001},
  volume = {29},
  pages = {62--71},
  number = {1},
  file = {(2001) Analysis and implementation of software rejuvenation in cluster systems.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2001) Analysis and implementation of software rejuvenation in cluster systems.pdf:PDF},
  organization = {ACM} # s,
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@ARTICLE{Yurcik2001p48-52,
  author = {Yurcik, W. and Doss, D.},
  title = {Achieving fault-tolerant software with rejuvenation and reconfiguration},
  journal = IEEE_M_S,
  year = {2001},
  volume = {18},
  pages = {48--52},
  number = {4},
  note = {被引用：33},
  __markedentry = {[mariayh:]},
  doi = {10.1109/MS.2001.936217},
  file = {(2001) Achieving Fault-Tolerant Software with Rejuvenation and Reconfiguration.pdf:21_国外其他英文论文\\(2001) Achieving Fault-Tolerant Software with Rejuvenation and Reconfiguration.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{cassidy2002advanced,
  author = {Cassidy, K.J. and Gross, K.C. and Malekpour, A.},
  title = {Advanced pattern recognition for detection of complex software aging
	phenomena in online transaction processing servers},
  booktitle = {Dependable Systems and Networks, 2002. DSN 2002. Proceedings. International
	Conference on},
  year = {2002},
  pages = {478--482},
  organization = {IEEE},
  abstract = {Software aging phenomena have been recently studied; one particularly
	complex type is shared memory pool latch contention in large OLTP
	servers. Latch contention onset leads to severe performance degradation
	until a manual rejuvenation of the DBMS shared memory pool is triggered.
	Conventional approaches to automated rejuvenation have failed for
	latch contention because no single resource metric has been identified
	that can be monitored to alert the onset of this complex mechanism.
	The current investigation explores the feasibility of applying an
	advanced pattern recognition method that is embodied in a commercially
	available equipment condition monitoring system (SmartSignal eCM™)
	for proactive annunciation of software-aging faults. One hundred
	data signals are monitored from a large OLTP server, collected at
	20-60 sec. intervals over a 5-month period. Results show 13 variables
	consistently deviate from normal operation prior to a latch event,
	providing up to 2 hours early warning.},
  file = {读书笔记-泛读:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(2002) Advanced pattern recognition for detection of complex software aging phenomena in online transaction processing servers.docx:Word;(2002) Advanced pattern recognition for detection of complex software aging phenomena in online transaction processing servers.pdf:21_国外其他英文论文\\(2002) Advanced pattern recognition for detection of complex software aging phenomena in online transaction processing servers.pdf:PDF},
  review = {1、研究动机
	
	找不到合适的系统指标来度量OLTP服务器共享内存池锁竞争这样的复杂的衰退，and传统基于阈值的预测，很难定阈值。阈值设置低的话，尤其是电子商务应用、云计算平台，资源分配、回收是常事，且经常有资源使用数据突变，这就形成了有噪声数据，这会干扰基于阈值的方法的正确性，形成较高的误报率，造成不必要的抗衰活动，进而带来损失。但是阈值设置太大，会措施抗衰时机，
	而造成软件应用意外崩溃。
	
	而多元模式识别方法无需考虑阈值带来的困扰，它部需要在识别的敏感度和阈值之间做权衡，这个平衡可由监控系统构建者根据实际情况平衡。而且可以加入标准的可用性评价方法。
	
	2、评议：
	
	本文提出了使用一种非线性、非参数化的多变量统计技术MSET来识别系统资源耗费、负载和衰退程度之间的模式关系．该方法首先使用健康状态下的性能信息和资源耗费数据建立一个性能模型，在训练阶段该模型能为训练时序数据提供精确的估计，估计值与实际值的比较来判断软件衰退是否出现．同时对模型进行修正建立初步的模型；在实时监控阶段，对新的时序数据做出性能评估．确定具体的抗衰策略，策略实施的效果作为模型的反馈，从而进一步精练模型．该方法的一个独特之处在于使用统计模式识别方法建立的模型是动态的，能自我凋整。能适用于不同的软件系统．}
}

@INPROCEEDINGS{Dohi2002p159-166,
  author = {Dohi, T. and Iwamoto, K. and Okamura, H. and Kaio, N. },
  title = {Discrete availability models to rejuvenate a telecommunication billing
	application},
  booktitle = {Proc. 7th IEEE Int High Assurance Systems Engineering Symp},
  year = {2002},
  pages = {159--166},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a proactive fault management technique that has been extensively
	studied in the recent literature. We focus on an example for a telecommunication
	billing application considered in Huang et al. (1995) and develop
	the discrete-time stochastic models to estimate the optimal <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedule. More precisely, two <span class='snippet'>software</span>
	availability models with <span class='snippet'>rejuvenation</span>
	are formulated via the discrete semi-Markov processes, and the optimal
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedules which maximize the steady-state availabilities are derived
	analytically. Further, we develop statistically nonparametric algorithms
	to estimate the optimal <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> schedules, provided that the
	complete sample data of failure times are given. Then, a new statistical
	device, called discrete total time on test statistics, is introduced.
	Finally, we examine asymptotic properties for the statistical estimation
	algorithms proposed in this paper through a simulation experiment.},
  doi = {10.1109/HASE.2002.1173117},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Li2002p91-100,
  author = {Lei Li and Vaidyanathan, K. and Trivedi, K. S. },
  title = {An approach for estimation of software aging in a Web server},
  booktitle = {Proc. Int Empirical Software Engineering Symp. n},
  year = {2002},
  pages = {91--100},
  abstract = {L. Li等在文中分别使用线性回归模型和ARX模型分析一个LINUX环境下的APACHE WEB SERVER的性能和系统资源使用情况是否异常。实验证明ARX模型更适合分析具有非线性特征的系统资源使用情况。但文章未分析性能下降和系统资源耗竭之间的关系及其对评价APACHE
	WEB SERVER衰退的影响，选择模型时亦未考虑数据的周期性特征的影响，忽略此特性，得到的资源耗费评估结果简单却不准确。},
  doi = {10.1109/ISESE.2002.1166929},
  file = {读书笔记:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(2002) An approach for estimation of software aging in a web server 摘要.docx:Word;2002- An approach for estimation of software aging in a web server.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2002- An approach for estimation of software aging in a web server.pdf:PDF},
  owner = {mariayh},
  review = {1、研究动机
	
	 文中未特别说明。摘要中提到基于时间模型的抗衰方法虽易实施，但实际应用效果却不怎么好。需要实际测量系统资源使用情况和系统活动，这些参数可以检测和估计系统资源耗竭。
	
	2、评议
	
	L.LI等提出用时序ARMA模型来刻画软件衰退和资源耗费情况，并把它用来研究web服务器的衰退．该研究以Tnternet常用的Linux系统和Apache服务器平台为研究实例，在具体系统设计中．首先通过系统工具监测和收集web服务器的记录资源使用的情况和一些活动参数，然后根据这些数据构造出时序ARMA模型．仿真实验的结果表明时序ARMA模型有着很好的实际效果，而且计算强度较小．
	
	3、如何找到解决方案的？
	
	 1）线性回归分析，分析趋势（最小二乘法构造拟合函数）、Man-Kendall test
	
	 The least squares solution is r= 15.5655 +0.027t,where r is response
	time in milliseconds,t is the time from the beginning of the experiment.
	
	The 95% confidence interval for the slope is(0.02,0.04)ms/hour.
	
	 2）周期性分析
	
	 3）ARMA（自回归滑动平均模型）},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Liu2002p159-170,
  author = {Yun Liu and Trivedi, K. S. and Yue Ma and Han, J. J. and Levendel,
	H. },
  title = {Modeling and analysis of software rejuvenation in cable modem termination
	systems},
  booktitle = {Proc. 13th Int. Symp. Software Reliability Engineering ISSRE 2003},
  year = {2002},
  pages = {159--170},
  __markedentry = {[mariayh:3]},
  abstract = {In order to reduce system outages and the associated downtime cost
	caused by the "<span class='snippet'>software</span> aging" phenomenon,
	we propose to use <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	as a proactive system maintenance technique deployed in a CMTS (Cable
	Modem Termination System) cluster system. Different <span class='snippet'>rejuvenation</span>
	policies are studied from the perspective of cost and availability.
	To evaluate these policies, stochastic reward net models are developed
	and solved by SPNP (Stochastic Petri Net Package). Numerical results
	show that significant improvement in capacity-oriented availability
	and decrease in downtime cost can be achieved. The optimization of
	the <span class='snippet'>rejuvenation</span> interval in the time-based
	approach and the effect of the prediction coverage in the measurement-based
	approach are also studied in this paper.},
  doi = {10.1109/ISSRE.2002.1173239},
  file = {(2002) Modeling and analysis of software rejuvenation in cable modem termination systems.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2002) Modeling and analysis of software rejuvenation in cable modem termination systems.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2002p171-180,
  author = {Okamura, H. and Miyahara, S. and Dohi, T. },
  title = {Dependability analysis of a client/server software system with rejuvenation},
  booktitle = {Proc. 13th Int. Symp. Software Reliability Engineering ISSRE 2003},
  year = {2002},
  pages = {171--180},
  __markedentry = {[mariayh:]},
  abstract = {Long running <span class='snippet'>software</span> systems are known
	to experience an aging phenomenon called <span class='snippet'>software</span>
	aging, one in which the accumulation of errors during the execution
	of <span class='snippet'>software</span> leads to performance degradation
	and eventually results in failure. To counteract this phenomenon
	an active fault management approach, called <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>, is particularly useful.
	It essentially involves gracefully terminating an application or
	a system and restarting it in a clean internal state. We deal with
	dependability analysis of a client/server <span class='snippet'>software</span>
	system with <span class='snippet'>rejuvenation</span>. Three dependability
	measures in the server process, steady-state availability, loss probability
	of requests and mean response time on tasks, are derived from the
	well-known hidden Markovian analysis under the time-based <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> scheme. In numerical examples,
	we investigate the sensitivity of some model parameters to the dependability
	measures.},
  doi = {10.1109/ISSRE.2002.1173241},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{vaidyanathan2002analysis,
  author = {Vaidyanathan, K. and Selvamuthu, D. and Trivedi, K.S.},
  title = {Analysis of inspection-based preventive maintenance in operational
	software systems},
  booktitle = {Reliable Distributed Systems, 2002. Proceedings. 21st IEEE Symposium
	on},
  year = {2002},
  pages = {286--295},
  organization = {IEEE},
  note = {第一次提出基于时间模型和度量的混合抗衰方法},
  file = {(2002) Analysis of inspection-based preventive maintenance in operational software systems.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\Kalyan Vaidyanathan(Ph.D_ Duke)\\(2002) Analysis of inspection-based preventive maintenance in operational software systems.pdf:PDF},
  timestamp = {2012.03.15}
}

@PHDTHESIS{vaidyanathan2002proactive,
  author = {Vaidyanathan, K.},
  title = {Proactive management of software systems: Analysis and implementation},
  year = {2002},
  abstract = {Recently, the phenomenon of software aging, one in which the state
	of the software system degrades with time, has been reported. The
	primary causes of this degradation are the exhaustion of operating
	system and middleware system resources, fragmentation of these resources,
	data corruption and numerical error accumulation. Eventually, software
	aging may lead to performance degradation, security compromise or
	crash/hang failure. To counteract software aging, a proactive approach
	to fault management called software rejuvenation has been proposed.
	It essentially involves occasionally terminating an application or
	a system, cleaning its internal state and restarting it. 
	
	In this thesis, first, we extend the traditional classification of
	software faults (deterministic and transient) to include faults attributed
	to software aging, and study the treatment and recovery strategies
	for each of the fault classes. This will help us understand the nature
	of software faults and their impact on system availability and performance
	and aid in choosing the best possible recovery strategy when a fault
	is triggered. 
	
	
	Next, we discuss methods of evaluating the effectiveness of proactive
	fault management in operational software systems and determining
	optimal times to perform rejuvenation. In this regard, we take a
	two-pronged strategy—measurement-based modeling and analytic modeling.
	
	
	
	The measurement based approach deals with detection of software aging
	and predicting aging related failures by collection and analysis
	of system data, so that proactive methods can be applied to prevent
	unplanned outages. For quantifying the effect of aging in these resources,
	we propose a metric called the Estimated time to exhaustion. The
	developed measurement-based models are the important steps towards
	predicting aging-related failures based on actual measurements, intended
	to help development of policies that automate the proactive handling
	of potential problems. The aim of the analytic modeling is to determine
	optimal times to perform rejuvenation by developing and analyzing
	stochastic models to maximize availability or minimize downtime cost.
	Using stochastic reward nets (SRNs), we model and analyze different
	rejuvenation policies for a cluster system. We also model inspection-based
	preventive maintenance in systems whose degradation level can be
	determined through some observable parameters. The model is solved
	using Markov Regenerative Process (MRGP) theory to obtain optimal
	rejuvenation strategies. 
	
	
	We then describe the design and implementation of a software rejuvenation
	agent implemented in a major commercial server. 
	
	
	The measurement-based model is then combined with an earlier analytical
	model to obtain a comprehensive model for software aging and rejuvenation.
	
	
	
	Finally, we summarize the contributions of the thesis, classifying
	the approaches and current methods of rejuvenation.},
  journal = {Duke University (ACM)},
  publisher = {Duke University},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=959758}
}

@ARTICLE{朱鸿2002web,
  author = {朱鸿},
  title = {Web 软件的生长式开发过程模型及其支撑工具},
  journal = {电子学报},
  year = {2002},
  volume = {30},
  pages = {2090--2093},
  number = {12A},
  abstract = {Web软件多具有分布式、超媒体、自治、协作等性质，其生命周期多具有明显的动
	
	态性，其开发和维护面临着巨大的挑战。本文提出一个适合于 Web软件开发的生长式过程
	
	模型与生命周期策略，并进一步提出了支持这一开发策略的软件工具模型－软件生长环境
	
	MAISGE，介绍了正在以生长策略开发的针对 Web信息系统质量管理与测试的 MAISGE－
	
	AquIS 软件生长环境元系统。},
  file = {(2002) Web 软件的生长式开发过程模型及其支撑工具 (电子学报).pdf:20- 软件生命周期\\(2002) Web 软件的生长式开发过程模型及其支撑工具 (电子学报).pdf:PDF},
  keywords = {Web软件；软件工程；软件过程模型；生命周期策略；软件环境与工具；Agent},
  timestamp = {2012.02.29}
}

@INPROCEEDINGS{2003p562-566,
  author = {Fan Xin-yuan and Xu Guo-zhi and Ying Ren-dong and Zhang Hao and Jiang
	Le-tian},
  title = {Performance analysis of software rejuvenation},
  booktitle = {Proc. Fourth Int. Conf. PDCAT'2003 Parallel and Distributed Computing,
	Applications and Technologies},
  year = {2003},
  pages = {562--566},
  doi = {10.1109/PDCAT.2003.1236365},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Bao2003p241-248,
  author = {Yujuan Bao and Xiaobai Sun and Trivedi, K. S. },
  title = {Adaptive software rejuvenation：degradation model and rejuvenation
	scheme},
  booktitle = {Proc. Int Dependable Systems and Networks Conf},
  year = {2003},
  pages = {241--248},
  note = {被引用：36次},
  abstract = {We present a framework of adaptive estimation and rejuvenation of
	software system performance in the presence of aging sources. The
	framework specifies that a degradation model not only describe an
	aging process but also enable the adaptation of model-based performance
	estimates to on-line measurements of data pertaining to the aging
	process. The adaptive estimation uses model-based a priori estimation
	and obtains a posteriori estimation based on the data measurements.
	With the adaptive estimation, the rejuvenation policy determines
	the time epochs for data collection and rejuvenation according to
	system dynamics. In the specific context of resource leaks previously
	assumed to lead to aging, we present a non-homogeneous Markov model
	to explicitly establish a connection between resource leaks and the
	failure rate. We demonstrate an increasing failure rate in the presence
	of resource leaks.},
  doi = {10.1109/DSN.2003.1209934},
  file = {(2003) Adaptive software rejuvenation：degradation model and rejuvenation scheme.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2003) Adaptive software rejuvenation：degradation model and rejuvenation scheme.pdf:PDF},
  owner = {mariayh},
  review = {1）研究动机：
	
	基于模型的分析方法：依赖于失效先验知识构建模型，而未考虑软件的动态性。实际上软件是在不断变化的（自身升级、更新，运行环境变化），因此模型不准确、不通用；而且，构建了模型，却又定期执行抗衰，将模型的构建和基于模型的分析隔离开了。
	
	基于度量的分析方法：把分析给定的模型参数（资源使用）与分析性能下降连接起来，使得难以制定抗衰决策。资源耗竭的主要原因是资源泄露时，抗衰能帮忙。否则还会有不利影响；另一个问题是在线模型趋向于简单、并过度的敏感于局部暂时的变化。重点放在了局部动态性。},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Cai2003p77-86a,
  author = {Kai-Yuan Cai and Cangussu, J. W. and DeCarlo, R. A. and Mathur, A.
	P.},
  title = {An overview of software cybernetics},
  booktitle = {International Workshop on Eleventh Annual Software Technology and
	Engineering Practice, 2003.},
  year = {2003},
  pages = {77--86},
  organization = {IEEE},
  note = {北航 \&美-德克萨斯大学 \&美-普渡大学},
  abstract = {Software cybernetics explores the interplay between software and control
	and is motivated by the fundamental question whether or not and how
	software behavior can be controlled. In this paper, we formulate
	the underlying motivations and ideas of software cybernetics and
	review various existing research topics in this emerging area, including
	feedback mechanisms in software processes, bisimulation and controllability,
	adaptive software, software synthesis, software test process control,
	and adaptive testing. We identify software rejuvenation and performance
	control, software fault-tolerance, logical foundation for control
	systems, and communication complexity for control systems as potential
	research topics. Several on-going research projects are also summarized.},
  file = {(2003) An overview of software cybernetics （北航 &美-德克萨斯大学 &美-普渡大学）.pdf:00-综述性文章\\(2003) An overview of software cybernetics （北航 &美-德克萨斯大学 &美-普渡大学）.pdf:PDF},
  keywords = {Adaptive control, Communication system control , Communication system
	software , Control systems , Controllability , Cybernetics , Feedback
	, Programmable control , Software performance , Software testing},
  pdf = {00-综述性文章\(2003) An overview of software cybernetics （北航 &美-德克萨斯大学 &美-普渡大学）.pdf},
  review = {原来研究者认为软件与硬件不同，不会老化，但研究表明软件也会老化[57-59].本文提到软件老化不容忽视，尤其是网络环境下的软件，其老化会导致服务器挂起或崩溃；
	
	 本文概述了潜在的导致软件老化的原因；作者提出现有的大部分方法都缺乏固定的/一致的控制基础，并提出疑问：软件抗衰明显是一个软件控制学问题，如何适应性地执行抗衰？
	
	 应对衰退的方法是：定期或在软件服务挂起或崩溃前实施抗衰；
	
	 抗衰的研究内容包括：实时监测软件当前状态、收集信息、决定何时和软件的哪部分应该抗衰。
	
	 服务的性能和质量对网络软件来说很重要，网络软件也应该调整它的运行和服务情况，以与网络流量的变化一致。},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1372137&tag=1}
}

@ARTICLE{Diao2003p136-149,
  author = {Diao, Y. and Hellerstein, JL and Parekh, S. and Bigus, JP},
  title = {Managing web server performance with autotune agents},
  journal = {IBM Systems Journal},
  year = {2003},
  volume = {42},
  pages = {136--149},
  number = {1},
  file = {(2003) Managing Web server performance with AutoTune agents.pdf:21_国外其他英文论文\\(2003) Managing Web server performance with AutoTune agents.pdf:PDF},
  publisher = {Armonk, NY: International Business Machines Corp.}
}

@ARTICLE{ghoneim2003evaluation,
  author = {Ghoneim, S.A. and Fahmy, H.M.A.},
  title = {Evaluation of the DRM and the Time for Preventive Maintenance for
	Aging Software},
  journal = {Software Quality Journal},
  year = {2003},
  volume = {11},
  pages = {57--75},
  number = {1},
  publisher = {Springer},
  timestamp = {2012.02.28}
}

@ARTICLE{Ghoneim2003p57-75,
  author = {Ghoneim, S.A. and Fahmy, H.M.A.},
  title = {Evaluation of the DRM and the Time for Preventive Maintenance for
	Aging Software},
  journal = {Software Quality Journal},
  year = {2003},
  volume = {11},
  pages = {57--75},
  number = {1},
  file = {(2004) Evaluation of the DRM and the Time for Preventive Maintenance for Aging Software(埃及艾因·夏姆斯大学).pdf:21_国外其他英文论文\\(2004) Evaluation of the DRM and the Time for Preventive Maintenance for Aging Software(埃及艾因·夏姆斯大学).pdf:PDF},
  owner = {mariayh},
  pdf = {21_国外其他英文论文\(2004) Evaluation of the DRM and the Time for Preventive Maintenance for Aging Software(埃及艾因·夏姆斯大学).pdf},
  publisher = {Springer},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Oppenheimer:2003:WIS:1251460.1251461,
  author = {Oppenheimer, David and Ganapathi, Archana and Patterson, David A.},
  title = {Why do internet services fail, and what can be done about it?},
  booktitle = {Proceedings of the 4th conference on USENIX Symposium on Internet
	Technologies and Systems - Volume 4},
  year = {2003},
  series = {USITS'03},
  pages = {1--1},
  address = {Berkeley, CA, USA},
  publisher = {USENIX Association},
  acmid = {1251461},
  location = {Seattle, WA},
  numpages = {1},
  url = {http://dl.acm.org/citation.cfm?id=1251460.1251461}
}

@INPROCEEDINGS{sahoo2003critical,
  author = {Sahoo, R.K. and Oliner, A.J. and Rish, I. and Gupta, M. and Moreira,
	J.E. and Ma, S. and Vilalta, R. and Sivasubramaniam, A.},
  title = {Critical event prediction for proactive management in large-scale
	computer clusters},
  booktitle = {Proceedings of the ninth ACM SIGKDD international conference on Knowledge
	discovery and data mining},
  year = {2003},
  pages = {426--435},
  organization = {ACM},
  file = {(2003) Critical event prediction for proactive management in large-scale computer clusters _ACM.pdf:21_国外其他英文论文\\(2003) Critical event prediction for proactive management in large-scale computer clusters _ACM.pdf:PDF},
  url = {http://dl.acm.org/citation.cfm?id=956799}
}

@INPROCEEDINGS{shereshevsky2003software,
  author = {Shereshevsky, M. and Crowell, J. and Cukic, B. and Gandikota, V.
	and Liu, Y.},
  title = {Software aging and multifractality of memory resources},
  booktitle = {Proceedings of the International Conference on Dependable Systems
	and Networks (DSN 2003)},
  year = {2003},
  pages = {721--730},
  file = {(2003) Software aging and multifractality of memory resources.pdf:21_国外其他英文论文\\(2003) Software aging and multifractality of memory resources.pdf:PDF},
  review = {文中给出了一种新颖的方式来分析系统资源耗费的模式．即基于分形分析技术．分形通常用来建模自然界出现的复杂、混沌现象，分形技术已成功地应用到网络流量预测、语音识别等领域．在文中使用分形分析对反映系统资源耗费的多个时序数据进行了量化分析．用霍尔德指数来刻画分形的程度．在仿真实验中观察到时序数据的霍尔德指数随着系统负载的增大而减少，意味着软件衰退的程度在加剧．即用时序数据的霍尔德指数来建模系统衰退程度，并给出了一种基于分形分析结果的抗衰策略来避免系统宕机，在实验中取得的不错的效果．该方法的提出为基于度量的研究进一步拓展了研究途径．},
  timestamp = {2012.03.05}
}

@INPROCEEDINGS{Suzuki2003p479-490,
  author = {Suzuki, H. and Dohi, T. and Kaio, N. and Trivedi, K. S. },
  title = {Maximizing interval reliability in operational software system with
	rejuvenation},
  booktitle = {Proc. 14th Int. Symp. Software Reliability Engineering ISSRE 2003},
  year = {2003},
  pages = {479--490},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> aging often affects the performance
	of a <span class='snippet'>software</span> system and eventually
	causes it to fail. A novel approach to handle transient <span class='snippet'>software</span>
	failures is called <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	which can be regarded as a preventive and proactive solution that
	is particularly useful for counteracting the phenomenon of <span
	class='snippet'>software</span> aging. In this paper, we consider
	the optimal <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy maximizing the interval reliability in the general semi-Markov
	framework. We derive analytically the optimal <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> timing which maximizes
	the limiting interval reliability or the interval reliability with
	exponentially distributed operation times. Further, we examine numerically
	the transient behavior of the interval reliability at an arbitrary
	operation time. Our results under the interval reliability criteria
	are extentions of some earlier work, since the interval reliability
	can be specialized to the pointwise availability and the common reliability
	function.},
  doi = {10.1109/ISSRE.2003.1251068},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{vaidyanathan2003mset,
  author = {Vaidyanathan, K. and Gross, K.},
  title = {MSET performance optimization for detection of software aging},
  booktitle = {Proc. of ISSRE},
  year = {2003},
  file = {(2003) MSET performance optimization for detection of software aging.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\Kalyan Vaidyanathan(Ph.D_ Duke)\\(2003) MSET performance optimization for detection of software aging.pdf:PDF},
  review = {K．vaidya提出了使用一种非线性、非参数化的多变量统计技术MsET来识别系统资源耗费、负载和衰退程度之间的模式关系．该方法首先使用健康状态下的性能信息和资源耗费数据建立一个性能模型，在训练阶臣该模型能为训练时序数据提供精确的估计，估计值与实际值的比较来判断软件衰退是否出现．同时对模型进行修正建立初步的模型；在实时监控阶段，对新的时序数据做出性能评估．确定具体的抗衰策略，策略宴施的效果作为模型的反馈，从而进一步精练模型．该方法的一个独特之处在于使用统计模式识剐方法建立的模型是动态的，能自我凋整。能适用于不
	
	同的软件系统．},
  timestamp = {2012.03.05}
}

@ARTICLE{范新媛2003p1543-1546,
  author = {范新媛 and 徐国治 and 应忍冬},
  title = {基于检查点和Rejuvenation的软件可靠性建模分析},
  journal = {系统仿真学报},
  year = {2003},
  volume = {15},
  pages = {1543--1546},
  number = {011},
  file = {(2003) 基于检查点和Rejuvenation的软件可靠性建模分析.pdf:23_国内其他中文论文\\(2003) 基于检查点和Rejuvenation的软件可靠性建模分析.pdf:PDF},
  owner = {mariayh},
  pdf = {23_国内其他中文论文\(2003) 基于检查点和Rejuvenation的软件可靠性建模分析.pdf},
  timestamp = {2012.02.20}
}

@ARTICLE{1335467,
  author = {Nicol, D.M. and Sanders, W.H. and Trivedi, K.S.},
  title = {Model-based evaluation:from dependability to security},
  journal = {IEEE Transactions on Dependable and Secure Computing},
  year = {2004},
  volume = {1},
  pages = { 48 - 65},
  number = {1},
  month = {jan.-march},
  note = {引用：217},
  abstract = {The development of techniques for quantitative, model-based evaluation
	of computer system dependability has a long and rich history. A wide
	array of model-based evaluation techniques is now available, ranging
	from combinatorial methods, which are useful for quick, rough-cut
	analyses, to state-based methods, such as Markov reward models, and
	detailed, discrete-event simulation. The use of quantitative techniques
	for security evaluation is much less common, and has typically taken
	the form of formal analysis of small parts of an overall design,
	or experimental red team-based approaches. Alone, neither of these
	approaches is fully satisfactory, and we argue that there is much
	to be gained through the development of a sound model-based methodology
	for quantifying the security one can expect from a particular design.
	In this work, we survey existing model-based techniques for evaluating
	system dependability, and summarize how they are now being extended
	to evaluate system security. We find that many techniques from dependability
	evaluation can be applied in the security domain, but that significant
	challenges remain, largely due to fundamental differences between
	the accidental nature of the faults commonly assumed in dependability
	evaluation, and the intentional, human nature of cyber attacks.},
  doi = {10.1109/TDSC.2004.11},
  file = {(2004) Model-based evaluation：from dependability to security.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2004) Model-based evaluation：from dependability to security.pdf:PDF},
  issn = {1545-5971},
  keywords = { Markov reward models; dependability evaluation; discrete-event simulation;
	model-based evaluation; performability evaluation; security evaluation;
	stochastic modeling; system dependability; system security; Markov
	processes; fault tolerant computing; security of data; software reliability;},
  review = {研究动机：
	
	评估可靠性的、基于模型的方法能否用于评估安全？有哪些差异？
	
	可靠性与入侵有哪些差异？论文中能找到吗？}
}

@ARTICLE{2004p18-21,
  author = {万群丽,杨群,李正,许满武},
  title = {一种基于Agent适用于Web应用的软件抗衰方法},
  journal = {计算机应用研究},
  year = {2004},
  volume = {21},
  pages = {18--21},
  number = {8},
  file = {(2004) 一种基于Agent适用于Web应用的软件抗衰方法.pdf:23_国内其他中文论文\\(2004) 一种基于Agent适用于Web应用的软件抗衰方法.pdf:PDF},
  owner = {mariayh},
  pdf = {23_国内其他中文论文\(2004) 一种基于Agent适用于Web应用的软件抗衰方法.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Aung2004p507-510,
  author = {Khin Mi Mi Aung and Jong Sou Park},
  title = {A framework of software rejuvenation for survivability},
  booktitle = {Proc. 18th Int. Conf. Advanced Information Networking and Applications
	AINA 2004},
  year = {2004},
  volume = {2},
  pages = {507--510},
  __markedentry = {[mariayh:]},
  abstract = {We propose a novel approach of the security issue to survivability.
	The main objectives are to detect the attacks in real time, to characterize
	the attacks, and to survive in face of the attacks. To counteract
	the attacks' attempts, we perform the <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> methods (SWRMS) such as
	killing the intruders' processes in their tracks, halting abuse before
	it happens, shutting down unauthorized connection, and responding
	and restarting in real time. These slogans will really frustrate
	and deter the attacks, as the attackers can't make their progress.
	This is a way of survivability to maximize the deterrence against
	the attacks in the target environment. We address a framework to
	model and analyze the critical intrusion tolerance problems ahead
	of intrusion detection and we present a set of innovative models
	to solve the security aging problems.},
  doi = {10.1109/AINA.2004.1283854},
  timestamp = {2012.02.20}
}

@ARTICLE{aung2004software,
  author = {Aung, K. and Park, J.},
  title = {Software Rejuvenation Approach to Security Engineering},
  journal = {Computational Science and Its Applications--ICCSA 2004},
  year = {2004},
  pages = {574--583},
  note = {主成分分析法PCA},
  abstract = {While traditional security mechanisms rely on preventive controls
	and those are limited in surviving malicious attacks, we propose
	a novel approach to security engineering. The objective is to characterize
	the attacks in real time and survive in face of attacks by using
	software rejuvenation. In this paper we address the critical intrusion
	tolerance problems ahead of intrusion detection. Firstly, the attacks
	are characterized by applying Principle Component Analysis (PCA)
	and these characterized intrusions are analyzed according to their
	state changes by utilizing transient state analysis. Subsequently,
	the software rejuvenation methods are performed by killing the intruders’
	processes in their tracks, halting abuse before it happens, shutting
	down unauthorized connection, and responding and restarting in real
	time. These slogans will really frustrate and deter the attacks,
	as the attacker can’t make their progress. This is a way of survivability
	to increase the deterrence level against an attack in the target
	environment.},
  publisher = {Springer}
}

@PHDTHESIS{bao2004adaptive,
  author = {Bao, Y.},
  title = {Adaptive software rejuvenation},
  school = {Duke University},
  year = {2004},
  abstract = {In this dissertation, we present a framework for adaptive software
	rejuvenation (ASR). Software rejuvenation is a proactive fault management
	technique. Its objective is to counter the phenomenon of software
	aging, the gradual accumulation of potential fault conditions and
	their impacts during system operation. Software rejuvenation has
	gained quick recognition since it emerged in 1995, and has broader
	applications as software systems have become ubiquitous in today's
	economic, social, medical, and other infrastructures. This dissertation
	addresses itself to the new, pressing, and challenging issue of adapting
	software rejuvenation to the dynamic changes of a system. A typical
	software system undergoes many changes over its lifetime, most notable
	in system components, resources, services, and client requirements,
	among others. System changes are the rule instead of the exception.
	The purpose of adaptive software rejuvenation (ASR) is to maintain
	system availability, reliability or other measures while a system
	undergoes the aging process and dynamic changes. 
	
	Adaptive software rejuvenation poses some challenges, particularly
	with respect to theoretical understanding and practical implementation.
	The ASR framework presents a basic, integrated solution. It includes
	system modeling, online inspection, adaptive degradation estimation,
	and adaptive rejuvenation scheduling. We introduce new concepts and
	methodologies pertaining to all these aspects of the framework. In
	modeling, we have unified the modeling techniques to enable the traditional
	analysis of systems in ideal conditions, the incorporation of online
	measured data that pertains to the aging process, and the adaptive
	analysis of systems in degradation. In the degradation estimation,
	we provide a methodology to isolate the effects of the aging process,
	particularly resource leaks, from the other failure factors. This
	is essential to avoid adverse software rejuvenation. We provide a
	methodology to incorporate measured data with a degradation model
	to provide an adaptive degradation estimate. In rejuvenation scheduling,
	we have built a degradation-and-rejuvenation hierarchy with a rejuvenation
	model on top of a degradation model. We have introduced a method
	for providing adaptive software strategies to maintain a system under
	expected conditions or reach its highest potential in certain aspect.
	The ASR methodologies designed to realize the ASR objective are not
	limited to those introduced and illustrated in this dissertation.
	They may be more application-specific in practice or more advanced
	in general.},
  publisher = {Duke University},
  timestamp = {2012.02.26}
}

@INPROCEEDINGS{candea2004microreboot,
  author = {Candea, G. and Kawamoto, S. and Fujiki, Y. and Friedman, G. and Fox,
	A.},
  title = {Microreboot - A technique for cheap recovery},
  booktitle = {Proceedings of the 6th conference on Symposium on Opearting Systems
	Design \& Implementation-Volume 6},
  year = {2004},
  pages = {3--3},
  organization = {USENIX Association},
  publisher = {ACM},
  abstract = {A significant fraction of software failures in large-scale Internet
	systems are cured by rebooting, even when the exact failure causes
	are unknown. However, rebooting can be expensive, causing nontrivial
	service disruption or downtime even when clusters and failover are
	employed. In this work we use separation of process recovery from
	data recovery to enable microrebooting - a fine-grain technique for
	surgically recovering faulty application components, without disturbing
	the rest of the application.
	
	
	We evaluate microrebooting in an Internet auction system running on
	an application server. Microreboots recover most of the same failures
	as full reboots, but do so an order of magnitude faster and result
	in an order of magnitude savings in lost work. This cheap form of
	recovery engenders a new approach to high availability: microreboots
	can be employed at the slightest hint of failure, prior to node failover
	in multi-node clusters, even when mistakes in failure detection are
	likely; failure and recovery can be masked from end users through
	transparent call-level retries; and systems can be rejuvenated by
	parts, without ever being shut down.},
  file = {(2004)Microreboot - A Technique for Cheap Recovery.pdf:21_国外其他英文论文\\(2004)Microreboot - A Technique for Cheap Recovery.pdf:PDF}
}

@INPROCEEDINGS{Xie2004p122-129,
  author = {Xie, W. and Hong, Y. and Trivedi, K. S. },
  title = {Software rejuvenation policies for cluster systems under varying
	workload},
  booktitle = {Proc. 10th IEEE Pacific Rim Int Dependable Computing Symp},
  year = {2004},
  pages = {122--129},
  __markedentry = {[mariayh:4]},
  abstract = {We analyze two <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policies of cluster server systems under varying workload, called
	fixed <span class='snippet'>rejuvenation</span> and delayed <span
	class='snippet'>rejuvenation</span>. In order to achieve a higher
	average throughput, we propose the delayed <span class='snippet'>rejuvenation</span>
	policy, which postpones the <span class='snippet'>rejuvenation</span>
	of individual nodes until off-peak hours. Analytic models using the
	well known paradigm of Markov chains are used. Since the size of
	the Markov model is nontrivial, automated specification generation,
	and the solution via stochastic Petri nets is utilized. Deterministic
	time to trigger <span class='snippet'>rejuvenation</span> is approximated
	by a 20-stage Erlangian distribution. Based on the numerical solutions
	of the models, we find that under the given context, although the
	fixed <span class='snippet'>rejuvenation</span> occasionally yields
	a higher throughput, the delayed <span class='snippet'>rejuvenation</span>
	policy seems to outperform fixed <span class='snippet'>rejuvenation</span>
	policy by up to 11%. We also compare the steady-state system availabilities
	of these two <span class='snippet'>rejuvenation</span> policies.},
  doi = {10.1109/PRDC.2004.1276563},
  file = {(2004) Software Rejuvenation Policies for Cluster Systems under Varying Workload.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2004) Software Rejuvenation Policies for Cluster Systems under Varying Workload.pdf:PDF},
  timestamp = {2012.02.20}
}

@ARTICLE{范新媛2004p231-234,
  author = {范新媛 and 施侃 and 徐国治},
  title = {网络服务器软件老化现象的测试与分析},
  journal = {数据采集与处理},
  year = {2004},
  volume = {19},
  pages = {231--234},
  number = {2},
  file = {(2004) 网络服务器软件老化现象的测试与分析.pdf:23_国内其他中文论文\\(2004) 网络服务器软件老化现象的测试与分析.pdf:PDF},
  owner = {mariayh},
  pdf = {23_国内其他中文论文\(2004) 网络服务器软件老化现象的测试与分析.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Anerousis2005p75-88,
  author = {Anerousis, N. and Black, A. and Hanson, S. and Mummert, L. and Pacifici,
	G. },
  title = {Health monitoring and control for application server environments},
  booktitle = {Proc. 9th IFIP/IEEE Int. Symp. Integrated Network Management IM 2005},
  year = {2005},
  pages = {75--88},
  abstract = {Web applications have assumed a central role in the enterprise data
	center, and are becoming the foundation of an increasing number of
	critical business functions. The availability of such applications
	is a problem of critical importance. To address this problem, we
	present a health monitoring and control system for application server
	environments. We build on past work in the area of measuring system
	health by evaluating a number of parameters that convey health information.
	We propose a class-based model that assigns health policies to application
	servers to monitor health conditions of interest and correct problems
	before they cause catastrophic damage. We describe an implementation
	of the system, and provide a utility-based experimental evaluation.},
  doi = {10.1109/INM.2005.1440772},
  file = {(2005) Health monitoring and control for application server environments.pdf:01-研究组分类文章\\19_IBM\\(2005) Health monitoring and control for application server environments.pdf:PDF},
  keywords = {Web application; application server environment; class-based model;
	health control system; health monitoring; system management; Internet;
	computer network management; computerised monitoring; health and
	safety; network servers; telecommunication control; telecommunication
	network reliability;},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@ARTICLE{Bao2005p541-548,
  author = {Yujuan Bao and Xiaobai Sun and Trivedi, K. S.},
  title = {A workload-based analysis of software aging and rejuvenation},
  journal = {IEEE Transaction on Reliability},
  year = {2005},
  volume = {54},
  pages = {541--548},
  number = {3},
  doi = {10.1109/TR.2005.853442},
  file = {2005-A workload-based analysis of software aging and rejuvenation (IEEE Transaction).pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2005-A workload-based analysis of software aging and rejuvenation (IEEE Transaction).pdf:PDF},
  owner = {mariayh},
  review = {1）研究动机
	
	2）主要内容：提出一个层次化模型:底层为衰退模型，用于分析资源泄露导致的衰退；上层为抗衰层，用于主动故障管理，回收泄露的资源。双层模型允许作者将分析过程拆分为：首先预测资源泄露对衰退的影响，然后预测主动性故障管理和衰退对全局系统measures（如可用性）的影响。
	
	启发：
	
	未来可基于测量数据，构建更第一层的建模、分析层。},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Eto2005p483-487,
  author = {Eto, H. and Dohi, T. },
  title = {Optimality of Control-Limit Type of Software Rejuvenation Policy},
  booktitle = {Proc. 11th Int Parallel and Distributed Systems Conf},
  year = {2005},
  volume = {2},
  pages = {483--487},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive and proactive maintenance policy that is particularly
	useful for counteracting the phenomenon of <span class='snippet'>software</span>
	aging. In this paper we consider an operational <span class='snippet'>software</span>
	system with multiple degradations and derive the optimal <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> policy minimizing the expected
	operation cost per unit time in the steady state, via the dynamic
	programming approach. Especially, we show analytically that the control-limit
	type of <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy is optimal. A numerical example is presented to make a decision
	table and to perform the sensitivity analysis of cost parameters},
  doi = {10.1109/ICPADS.2005.212},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Jing2005p34-38,
  author = {You Jing and Xu Jian and Zhao Xue-long and Liu Feng-yu},
  title = {Modeling and availability analysis of nested software rejuvenation
	policy},
  booktitle = {Proc. IEEE Int Systems, Man and Cybernetics Conf},
  year = {2005},
  volume = {1},
  pages = {34--38},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a proactive technique to counteract <span class='snippet'>software</span>
	aging. A new nested <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy is put forward in this paper. A finite-state automaton is
	used to model the working process of <span class='snippet'>software</span>
	with this policy. Comparing to the conventional periodic <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> policy, the nested policy
	takes into account the application-level and system-level <span class='snippet'>rejuvenation</span>
	simultaneously, specially giving emphasis on nesting. This paper
	solves the <span class='snippet'>rejuvenation</span> intervals based
	on the minimum downtime and compares the maximum system availability
	of the nested <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy with the conventional periodic <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> policy's. The numerical
	results demonstrate that the new policy consumes less downtime, enhances
	<span class='snippet'>software</span> availability and reliability.},
  doi = {10.1109/ICSMC.2005.1571118},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2005p151-158,
  author = {Okamura, H. and Miyahara, S. and Dohi, T. },
  title = {Effect of preventive rejuvenation in communication network system
	with burst arrival},
  booktitle = {Proc. Autonomous Decentralized Systems ISADS 2005},
  year = {2005},
  pages = {151--158},
  __markedentry = {[mariayh:]},
  abstract = {Long running <span class='snippet'>software</span> systems are known
	to experience an aging phenomenon called <span class='snippet'>software</span>
	aging, one in which the accumulation of errors during the execution
	of <span class='snippet'>software</span> leads to performance degradation
	and eventually results in failure. To counteract this phenomenon
	a proactive fault management approach, called <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>, is particularly useful.
	It essentially involves gracefully terminating an application or
	a system and restarting it in a clean internal state. In this paper,
	we perform the dependability analysis of a client/server <span class='snippet'>software</span>
	system with <span class='snippet'>rejuvenation</span> under the assumption
	that the requests arrive according to the Markov modulated Poisson
	process. Three dependability measures, steady-state availability,
	loss probability of requests and mean response time on tasks, are
	derived through the hidden Markovian analysis based on the time-based
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	scheme. In numerical examples, we investigate the sensitivity of
	some model parameters to the dependability measures.},
  doi = {10.1109/ISADS.2005.1452041},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2005p493-499,
  author = {Okamura, H. and Iwamoto, K. and Dohi, T. },
  title = {A Dynamic Programming Algorithm for Software Rejuvenation Scheduling
	under Distributed Computation Circumstance},
  booktitle = {Proc. 11th Int Parallel and Distributed Systems Conf},
  year = {2005},
  volume = {2},
  pages = {493--499},
  __markedentry = {[mariayh:]},
  abstract = {Recently, a complementary approach to handle transient <span class='snippet'>software</span>
	failures, called <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>,
	is becoming popular as a proactive fault management technique in
	operational <span class='snippet'>software</span> systems. In this
	paper, we consider a scheduling problem of <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> for a distributed computation.
	Based on the dynamic programming approach, we derive the optimal
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedule which minimizes the expected total time of computation.
	In numerical examples, we examine the sensitivity of model parameters
	characterizing failure phenomenon to the resulting optimal <span
	class='snippet'>rejuvenation</span> schedule},
  doi = {10.1109/ICPADS.2005.22},
  timestamp = {2012.02.20}
}

@ARTICLE{pop00589,
  author = {K Iwamoto and T Dohi and ...},
  title = {Monitoring the health condition of a ubiquitous system：Rejuvenation
	vs recovery},
  journal = {Embedded and Ubiquitous Computing–EUC …},
  year = {2005},
  note = {Query date: 2012-02-23},
  abstract = {Software rejuvenation is a preventive and proactive solution that
	is particularly useful for counteracting the phenomenon of software
	aging. In this article, we consider a periodic software rejuvenation
	model based on the steady-state system availability in discrete operational
	circumstance. More precisely, we treat a telecommunication billing
	application as a simple ubiquitous application, and describe its
	stochastic behavior by applying the discrete renewal reward process.
	The main objective is the determination of the optimal frequency
	to rejuvenate the ubiquitous application, maximizing the steady-state
	system availability. Also, we develop a statistically non-parametric
	algorithm to estimate the optimal rejuvenation schedule with the
	discrete total time on test concept.},
  file = {(2005) Monitoring the health condition of a ubiquitous system：Rejuvenation vs recovery(广岛大学).pdf:01-研究组分类文章\\18-Kazuki lwamoto            _日本广岛大学\\(2005) Monitoring the health condition of a ubiquitous system：Rejuvenation vs recovery(广岛大学).pdf:PDF},
  publisher = {Springer},
  url = {http://www.springerlink.com/index/P2764W8275121H5V.pdf}
}

@INPROCEEDINGS{rinsaka2005behavioral,
  author = {Rinsaka, K. and Dohi, T.},
  title = {Behavioral analysis of a fault-tolerant software system with rejuvenation},
  booktitle = {Autonomous Decentralized Systems, 2005. ISADS 2005. Proceedings},
  year = {2005},
  pages = {159--166},
  organization = {IEEE},
  file = {(2005) Behavioral analysis of a fault-tolerant software system with rejuvenation.pdf:01-研究组分类文章\\18-Kazuki lwamoto            _日本广岛大学\\(2005) Behavioral analysis of a fault-tolerant software system with rejuvenation.pdf:PDF},
  timestamp = {2012.02.26}
}

@INPROCEEDINGS{Rinsaka2005p159-166,
  author = {Rinsaka, K. and Dohi, T. },
  title = {Behavioral analysis of a fault-tolerant software system with rejuvenation},
  booktitle = {Proc. Autonomous Decentralized Systems ISADS 2005},
  year = {2005},
  pages = {159--166},
  __markedentry = {[mariayh:]},
  abstract = {In recent years, considerable attention has been devoted to continuously
	running <span class='snippet'>software</span> systems whose performance
	characteristics are smoothly degrading in time. <span class='snippet'>Software</span>
	aging often affects the performance of a <span class='snippet'>software</span>
	system and eventually causes it to fail. A novel approach to handle
	transient <span class='snippet'>software</span> failures due to <span
	class='snippet'>software</span> aging is called <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>, which can be regarded
	as a preventive and proactive solution that is particularly useful
	for counteracting the aging phenomenon. In this paper, we focus on
	a high assurance <span class='snippet'>software</span> system with
	fault-tolerance and preventive <span class='snippet'>rejuvenation</span>,
	and analyze the stochastic behavior of such a highly critical <span
	class='snippet'>software</span> system. More precisely, we consider
	a fault-tolerant <span class='snippet'>software</span> system with
	two-version redundant structure and random <span class='snippet'>rejuvenation</span>
	schedule, and evaluate quantitatively a dependability measure like
	the steady-state system availability based on the familiar Markovian
	analysis. In numerical examples, we examine the dependence of two
	system diversity techniques; design and environment diversity techniques,
	on the system dependability measure.},
  doi = {10.1109/ISADS.2005.1452042},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Tai2005p570-579,
  author = {Tai, A. T. and Tso, K. S. and Sanders, W. H. and Chau, S. N. },
  title = {A performability-oriented software rejuvenation framework for distributed
	applications},
  booktitle = {Proc. Int. Conf. Dependable Systems and Networks DSN 2005},
  year = {2005},
  pages = {570--579},
  __markedentry = {[mariayh:]},
  abstract = {While inherent resource redundancies in distributed applications facilitate
	gracefully degradable services, methods to enhance their dependability
	may have subtle, yet significant, performance implications, especially
	when such applications are stateful in nature. In this paper, we
	present a performability-oriented framework that enables the realization
	of <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	in stateful distributed applications. The framework is constructed
	based on three building blocks, namely, a <span class='snippet'>rejuvenation</span>
	algorithm, a set of performability metrics, and a performability
	model. We demonstrate via model-based evaluation that this framework
	enables error-accumulation-prone distributed applications to deliver
	services at the best possible performance level, even in environments
	in which a system is highly vulnerable to failures.},
  doi = {10.1109/DSN.2005.12},
  timestamp = {2012.02.20}
}

@ARTICLE{Vaidyanathan2005p124-137,
  author = {Vaidyanathan, K. and Trivedi, K. S. },
  title = {A comprehensive model for software rejuvenation},
  journal = {IEEE Transaction on Dependable and Secure Computing},
  year = {2005},
  volume = {2},
  pages = {124--137},
  number = {2},
  __markedentry = {[mariayh:]},
  abstract = {Recently, the phenomenon of <span class='snippet'>software</span>
	aging, one in which the state of the <span class='snippet'>software</span>
	system degrades with time, has been reported. This phenomenon, which
	may eventually lead to system performance degradation and/or crash/hang
	failure, is the result of exhaustion of operating system resources,
	data corruption, and numerical error accumulation. To counteract
	<span class='snippet'>software</span> aging, a technique called <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	has been proposed, which essentially involves occasionally terminating
	an application or a system, cleaning its internal state and/or its
	environment, and restarting it. Since <span class='snippet'>rejuvenation</span>
	incurs an overhead, an important research issue is to determine optimal
	times to initiate this action. In this paper, we first describe how
	to include faults attributed to <span class='snippet'>software</span>
	aging in the framework of Gray's <span class='snippet'>software</span>
	fault classification (deterministic and transient), and study the
	treatment and recovery strategies for each of the fault classes.
	We then construct a semi-Markov reward model based on workload and
	resource usage data collected from the UNIX operating system. We
	identify different workload states using statistical cluster analysis,
	estimate transition probabilities, and sojourn time distributions
	from the data. Corresponding to each resource, a reward function
	is then defined for the model based on the rate of resource depletion
	in each state. The model is then solved to obtain estimated times
	to exhaustion for each resource. The result from the semi-Markov
	reward model are then fed into a higher-level availability model
	that accounts for failure followed by reactive recovery, as well
	as proactive recovery. This comprehensive model is then used to derive
	optimal <span class='snippet'>rejuvenation</span> schedules that
	maximize availability or minimize downtime cost.},
  doi = {10.1109/TDSC.2005.15},
  file = {(2005) A Comprehensive Model for Software Rejuvenation.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2005) A Comprehensive Model for Software Rejuvenation.pdf:PDF},
  timestamp = {2012.02.20}
}

@ARTICLE{Xinyuan2005p460-465,
  author = {Xinyuan, Fan and Guozhi, Xu and Rendong, Ying and Hao, Zhang},
  title = {Modeling and analysis of software rejuvenation on dispatcher-based
	web server farms},
  journal = {Journal of Systems Engineering and Electronics},
  year = {2005},
  volume = {16},
  pages = {460--465},
  number = {2},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@ARTICLE{Xinyuan2005p704-708,
  author = {Xinyuan, Fan and Letian, Jiang and Guozhi, Xu},
  title = {New software rejuvenation strategy based on measurement and time},
  journal = {Journal of Systems Engineering and Electronics},
  year = {2005},
  volume = {16},
  pages = {704--708},
  number = {3},
  __markedentry = {[mariayh:]},
  abstract = {Operational <span class='snippet'>software</span> systems often experience
	an &#x201C;aging&#x201D; phenomenon, characterized by progressive
	performance degradation and a sudden hang/crash failure. <span class='snippet'>Software</span>
	<span class='snippet'>rejuvenation</span> is a proactive fault-tolerance
	strategy aimed to prevent unexpected outages due to aging. A new
	<span class='snippet'>rejuvenation</span> strategy based on measurement
	and time, and constructs a SRN model to evaluate this strategy. Numerical
	results show that this strategy outweighs either the purely measurementbased
	or the purely time-based strategy and can effectively improve system
	performance.},
  timestamp = {2012.02.20}
}

@ARTICLE{杨芙清2005软件工程技术发展思索,
  author = {杨芙清},
  title = {软件工程技术发展思索},
  journal = {软件学报},
  year = {2005},
  volume = {16},
  number = {1},
  file = {(2005) 软件工程技术发展思索 (软件学报 -杨芙清).pdf:(2005) 软件工程技术发展思索 (软件学报 -杨芙清).pdf:PDF},
  review = {计算环境演变
	
	网络软件运行环境：Internet开放、动态、多变的环境
	
	软件应该按照功能目标、性能目标、可信性目标动态演化，使系统具有较高的用户信赖度（维持较高的用户信赖度）
	
	软件应该具有反应性（具有适应internet的开放、动态、多变环境的感知能力）、演化性（具有适应internet的开放、动态、多变环境的应变能力），感知环境的变化、并随机应变},
  timestamp = {2012.03.10}
}

@INPROCEEDINGS{Avritzer2006p435-444,
  author = {Avritzer, A. and Bondi, A. and Grottket, M. and Trivedi, K. S. and
	Weyuker, E. J.},
  title = {Performance Assurance via Software Rejuvenation: Monitoring, Statistics
	and Algorithms},
  booktitle = {Proc. Int. Conf. Dependable Systems and Networks DSN 2006},
  year = {2006},
  pages = {435--444},
  __markedentry = {[mariayh:]},
  abstract = {We present three algorithms for detecting the need for <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> by monitoring the changing
	values of a customer-affecting performance metric, such as response
	time. Applying these algorithms can improve the values of this customer-affecting
	metric by triggering <span class='snippet'>rejuvenation</span> before
	performance degradation becomes severe. The algorithms differ in
	the way they gather and use sample values to arrive at a <span class='snippet'>rejuvenation</span>
	decision. Their effectiveness is evaluated for different sets of
	control parameters, including sample size, using simulation. The
	results show that applying the algorithms with suitable choices of
	control parameters can significantly improve system performance as
	measured by the response time},
  doi = {10.1109/DSN.2006.58},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Chen2006p34-40,
  author = {Xiu-E Chen and Quan Quan and Yun-Fei Jia and Kai-Yuan Cai},
  title = {A Threshold Autoregressive Model for Software Aging},
  booktitle = {Proc. Second IEEE Int. Workshop Service-Oriented System Engineering
	SOSE '06},
  year = {2006},
  pages = {34--40},
  doi = {10.1109/SOSE.2006.5},
  file = {2006XiuE Chen_A Threshold Autoregressive Model for Software Aging(北京大学).pdf:22_国内其他英文论文\\2006XiuE Chen_A Threshold Autoregressive Model for Software Aging(北京大学).pdf:PDF},
  pdf = {22_国内其他英文论文\2006XiuE Chen_A Threshold Autoregressive Model for Software Aging(北京大学).pdf},
  timestamp = {2012.02.19}
}

@ARTICLE{Grottke2006p411-420,
  author = {Grottke, M. and Lei Li and Vaidyanathan, K. and Trivedi, K. S.},
  title = {Analysis of Software Aging in a Web Server},
  journal = {IEEE Transactions on Reliability},
  year = {2006},
  volume = {55},
  pages = {411--420},
  number = {3},
  abstract = {Several recent studies have reported & examined the phenomenon that
	long-running software systems show an increasing failure rate and/or
	a progressive degradation of their performance. Causes of this phenomenon,
	which has been referred to as “software aging”, are the accumulation
	of internal error conditions, and the depletion of operating system
	resources. A proactive technique called “software rejuvenation” has
	been proposed as a way to counteract software aging. It involves
	occasionally terminating the software application, cleaning its internal
	state and/or its environment, and then restarting it. Due to the
	costs incurred by software rejuvenation, an important question is
	when to schedule this action. While periodic rejuvenation at constant
	time intervals is straight forward to implement, it may not yield
	the best results. The rate at which software ages is usually not
	constant, but it depends on the time-varying system workload. Software
	rejuvenation should therefore be planned & initiated in the face
	of the actual system behavior. This requires the measurement, analysis,
	and prediction of system resource usage.
	
	 In this paper, we study the development of resource usage in a web
	server while subjecting it to an artificial workload. We first collect
	data on several system resource usage & activity parameters. Non-parametric
	statistical methods are then applied toward detecting & estimating
	trends in the data sets. Finally, we fit time series models to the
	data collected. Unlike the models used previously in the research
	on software aging, these time series models allow for seasonal patterns,
	and we show how the exploitation of the seasonal variation can help
	in adequately predicting the future resource usage. Based on the
	models employed here, proactive management techniques like software
	rejuvenation triggered by actual measurements can be built.
	
	
	摘要翻译：软件衰退（software aging）现象的出现及原因：内部错误累积和操作系统资源耗尽。软件抗衰提供了消除/中和软件衰退的能力，包含不定期中止软件应用、清空内部状态和/或它的环境、重启。因为软件抗衰存在成本问题，故一个重要问题是安排何时执行抗衰活动。周期性地在固定的时间间隔执行抗衰活动，并不能起到最好的效果。因为，软件衰退的频率并非是固定不变的，其依赖于系统的实时负载。（The
	rate at which software ages is usually not constant, but it depends
	on the time-varying system workload.）因此，软件抗衰应该面对实际系统行为而被计划/安排和发起。这就需要对系统资源使用情况进行测量、分析和预测。
	
	本文研究了一个web server中资源使用的发展情况，while subjecting it to a artificial workload（人为构造负载）.我们首先收集了数种系统资源使用和活动参数数据。接着，用非参数统计方法监测和评估数据集中的趋势。最后，we
	fit the time series models to the data collected。与先前软件衰退研究中使用的模型不同，这些时间序列模型考虑了周期模式，并且说明了利用周期变化如何能够帮助预测未来的资源使用情况。基于本文使用的模型，可以构建由实际监测（行为）触发的主动管理技术，如软件抗衰技术。},
  doi = {10.1109/TR.2006.879609},
  file = {读书笔记:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\Kishor S. Trivedi相关\\(2006) Analysis of Software Aging in a Web Server .docx:Word;2006- Analysis of Software Aging in a Web Server - IEEE Transaction.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2006- Analysis of Software Aging in a Web Server - IEEE Transaction.pdf:PDF},
  owner = {mariayh},
  pdf = {2006- Analysis of Software Aging in a Web Server - IEEE Transaction (2).pdf},
  review = {1)研究动机
	
	 以前的方法假设资源消耗数据有一个整体趋势，但仅掌握了整体趋势，并无法精确的预测出未来资源的使用（如：交换空间使用量）和执行抗衰策略的安排，原因是会出现局部突变（变异local
	variation）。
	
	2）如果找到解决方案的？ 
	
	作者人为对一个apache web server制造超载现象，目测到交换空间数据有明显的周期性（不断使用、释放）；因此，本文对数据集进行了（参数化parametric）时序分析（time
	series analysis），时序模型考虑了周期模式（seasonal patterns），并说明了考虑周期性变化如何能帮助预测未来的资源使用情况。对交换空间使用情况的时序分析说明了周期性结构的粗糙模型就能充分的预测未来超过1.5周的行为。
	
	3）未来工作
	
	未来的工作：
	
	a)继续深入研究OS和apache web server的配置对衰老行为的影响；
	
	b)使用多元时序模型来调查多种系统资源之间的相互作用。},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Kim2006p-,
  author = {Dong Seong Kim and Shazzad KM and Jong Sou Park},
  title = {A framework of survivability model for wireless sensor network},
  booktitle = {Proc. First Int. Conf. Availability, Reliability and Security ARES
	2006},
  year = {2006},
  __markedentry = {[mariayh:]},
  abstract = {Wireless sensor network (WSN) should be capable of fulfilling its
	mission, in a timely manner, in the middle of intrusion, attacks,
	accidents and failures in hostile environment. However, current security
	mechanisms for WSN are able to satisfy confidentiality, integrity,
	and authentication properties using cipher algorithms, key management
	schemes, and so on, but they are not enough to meet above requirements.
	Therefore, we propose a framework of survivability model for WSN.
	Our model adopts <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	methodology, which is applicable in security field and also less
	expensive. We model and analyze each cluster of a hierarchical cluster
	based WSN as a stochastic process based on semi-Markov process (SMP)
	and discrete-time Markov chain (DTMC). The model analysis indicates
	the feasibility of our approach.},
  doi = {10.1109/ARES.2006.6},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2006p175-182,
  author = {Koutras, V. P. and Platis, A. N. },
  title = {Applying Software Rejuvenation in a Two Node Cluster System for High
	Availability},
  booktitle = {Proc. Int. Conf. Dependability of Computer Systems DepCos-RELCOMEX
	'06},
  year = {2006},
  pages = {175--182},
  __markedentry = {[mariayh:]},
  abstract = {In order to achieve high availability the idea of cluster systems
	has been commonly used. In this paper a two node cluster system is
	considered in which <span class='snippet'>software</span> and hardware
	failures occur. Hardware failures are permanent and hence they are
	counteracted by a repair or replacement. On the other side, <span
	class='snippet'>software</span> failures require a reboot. A reboot
	though is a reactive action that can be taken when <span class='snippet'>software</span>
	failures due to degradation are observed. <span class='snippet'>Software</span>
	<span class='snippet'>rejuvenation</span>, a proactive kind of maintenance,
	is used to counteract <span class='snippet'>software</span> degradation
	called "<span class='snippet'>software</span> aging". In the cluster
	system presented, <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	is performed when the node's <span class='snippet'>software</span>
	experiences degradation in order to avoid an unscheduled reboot.
	The system is modeled under continuous time Markov chains (CTMC).
	Two different clustering techniques are studied and compared in order
	to determine the best configuration which provides the highest level
	of availability},
  doi = {10.1109/DEPCOS-RELCOMEX.2006.7},
  file = {(2006) Applying Software Rejuvenation in a Two Node Cluster System for High Availability.pdf:21_国外其他英文论文\\(2006) Applying Software Rejuvenation in a Two Node Cluster System for High Availability.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Matias2006p189-196,
  author = {Matias, R. and Filho, P. J. F. },
  title = {An Experimental Study on Software Aging and Rejuvenation in Web Servers},
  booktitle = {Proc. 30th Annual Int. Computer Software and Applications Conf. COMPSAC
	'06},
  year = {2006},
  volume = {1},
  pages = {189--196},
  __markedentry = {[mariayh:]},
  abstract = {Several studies have been conducted in order to understand the '<span
	class='snippet'>software</span> aging' phenomenon. This paper presents
	the results of an experimental research work, which evaluated the
	<span class='snippet'>software</span> aging effects on a Web server
	as well as the performance of a <span class='snippet'>rejuvenation</span>
	agent. Its main contribution is the identification and analytical
	validation of the factors that contribute for the Web server aging.
	We adopted the design of experiment technique (DOE) to characterize
	the aging phenomenon. The results showed evidence that the 'page
	type' and 'page size' factors were responsible for over 99% of memory
	size variation in httpd processes. A '<span class='snippet'>rejuvenation</span>
	agent' was implemented and integrated into the server environment
	to mitigate the aging effects. As a result, the size of the httpd
	processes could be kept under control and a higher availability and
	performance of the Web server could be provided, as compared to the
	scenario without <span class='snippet'>rejuvenation</span>},
  doi = {10.1109/COMPSAC.2006.25},
  file = {(2006) An Experimental Study on Software Aging and Rejuvenation in Web Servers.pdf:21_国外其他英文论文\\(2006) An Experimental Study on Software Aging and Rejuvenation in Web Servers.pdf:PDF},
  pdf = {21_国外其他英文论文\(2006) An Experimental Study on Software Aging and Rejuvenation in Web Servers.pdf},
  review = {该文的抗衰决策是基于阈值的：即高频率地监测节点控制器（NC）进程的内存使用情况，达到指定的阈值，就触发抗衰策略。
	
	 文中的抗衰策略是发个信号给Apache主进程，由apache主进程杀掉它管辖的所有空闲进程，再创建新的进程。这对服务的影响很小，因为主线程等待已建立的连接关闭。然而，创建新的进程替代老的进程，会导致5秒钟左右的宕机。
	在生产环境中，进程重启的间隔应该尽可能大，来避免长的运行时期间累计许多小的宕机期。
	
	 本文单纯的基于阈值方法决策抗衰策略，即高频率地监测节点控制器（NC）进程的内存使用情况，达到指定的阈值，就触发抗衰策略。因采样间隔太小的话，会影响系统性能；所以这个采样间隔也应该尽可能大，因此把1分钟的间隔作为最小持续时间。
	
	 但是，文“Software Rejuvenation in Eucalyptus Cloud Computing Infrastructure:
	A Method Based on Time Series Forecasting and Multiple Thresholds
	2011”提出：采样间隔设置大的话，会出现在两个采样时间点之间，内存达到上限、并崩溃，产生额外的宕机的情况（称之为monitor-caused
	downtime）。因此2011年这篇文章就在本文基础上，增加了预测成分。},
  timestamp = {2012.02.20}
}

@ARTICLE{Moorsel2006p547-558,
  author = {van Moorsel, A. P. A. and Wolter, K. },
  title = {Analysis of Restart Mechanisms in Software Systems},
  journal = IEEE_J_SE,
  year = {2006},
  volume = {32},
  pages = {547--558},
  number = {8},
  __markedentry = {[mariayh:]},
  abstract = {Restarts or retries are a common phenomenon in computing systems,
	for instance, in preventive maintenance, <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>, or when a failure is suspected.
	Typically, one sets a time-out to trigger the restart. We analyze
	and optimize time-out strategies for scenarios in which the expected
	required remaining time of a task is not always decreasing with the
	time invested in it. Examples of such tasks include the download
	of Web pages, randomized algorithms, distributed queries, and jobs
	subject to network or other failures. Assuming the independence of
	the completion time of successive tries, we derive computationally
	attractive expressions for the moments of the completion time, as
	well as for the probability that a task is able to meet a deadline.
	These expressions facilitate efficient algorithms to compute optimal
	restart strategies and are promising candidates for pragmatic online
	optimization of restart timers},
  doi = {10.1109/TSE.2006.73},
  timestamp = {2012.02.20}
}

@PHDTHESIS{pop00549,
  author = {Seong (Steve) R. Yu},
  title = {A software replication model for rejuvenation transparency to clients
	in a single computer environment},
  school = {Nova Southeastern University},
  year = {2006},
  note = {Query date: 2012-02-23},
  abstract = {Software aging related failures in the operational phase can be prevented
	by applying proactive software rejuvenation. Proactive rejuvenation
	is a process of gracefully terminating an application and immediately
	restarting it at a clean internal state. This process incurs periods
	of application unavailability during rejuvenation. Two policies were
	established to abate the effects of the application unavailability.
	First was to perform the periodic rejuvenations during scheduled
	rejuvenation windows. Second was to schedule the rejuvenation windows
	during the low system usage periods to reduce the per-unit cost of
	the downtime. This practice restricted the use of software rejuvenation
	during the peak workload periods when the software aging effect may
	be at its greatest. This research, therefore, addressed the unavailability
	associated with software rejuvenation in the single computer environment.
	
	
	A new software rejuvenation model was formulated in this research
	that achieved rejuvenation transparency to the clients in a single-computer
	environment. This goal was accomplished by formulating the new hot-standby
	rejuvenation model. The new hot-standby rejuvenation model was synthesized
	by augmenting the software rejuvenation method with the entity redundancy
	in the form of hot-passive software replication. 
	
	
	This research was based on prior works that applied software rejuvenation
	in the redundant hardware environments. SRN modeling formalism was
	used as the modeling technique. Two sets of experiments were conducted
	to validate the new hot-standby rejuvenation models formulated in
	this research. First set investigated the effect of the new rejuvenation
	models on the unavailability characteristics of the single component
	application architecture. Second set performed the same investigation
	using the loosely coupled multiple component application architecture.
	
	
	
	Experiment results in this research showed that the new hot-standby
	rejuvenation models can achieve rejuvenation transparency to the
	clients. The new models achieved the effects of rejuvenation by switching
	the aged active replica with the standby replica in the robust state.
	Furthermore, the results of the two experiments demonstrated that
	the new hot-standby rejuvenation method can provide significant improvement
	to the software unavailability. 
	
	
	A major implication of this research is the expanded use of software
	rejuvenation in the single computer environment. When using the new
	rejuvenation method, the proactive rejuvenation can be performed
	anytime as needed without restraint in a single computer environment.
	Applications that cannot tolerate service interruptions can use the
	new proactive rejuvenation model in a single computer environment.
	Another implication is the significant unavailability improvement
	produced by the new rejuvenation model in application systems where
	the current rejuvenation method provided small improvement. 
	
	
	A future research recommendation is to characterize the overhead of
	the new rejuvenation models. Another is to investigate a method of
	routinely capturing application failure rate, repair rate, and rejuvenation
	completion rate, and store these rates as part of the application
	history. These rates can then be used to calculate the optimum rejuvenation
	interval and the unavailability improvement ratio.},
  file = {(2006) A software replication model for rejuvenation transparency to clients in a single computer environment (诺瓦东南大学).pdf:06- 博士论文\\(2006) A software replication model for rejuvenation transparency to clients in a single computer environment (诺瓦东南大学).pdf:PDF},
  publisher = {dl.acm.org},
  review = {一、心得
	
	1）研究动机
	
	抗衰会暂停软件应用，会带来一定的损失，这限制了不能在最高峰执行抗衰活动（要避开高峰期），但往往在最高峰时，衰退的影响最严重。},
  timestamp = {2012.02.24}
}

@INPROCEEDINGS{Silva2006p56-65a,
  author = {Silva, L. and Madeira, H. and Silva, J.G.},
  title = {Software Aging and Rejuvenation in a SOAP-based Server},
  booktitle = {Network Computing and Applications, 2006. NCA 2006. Fifth IEEE International
	Symposium on},
  year = {2006},
  pages = {56--65},
  organization = {IEEE},
  file = {(2006) Software Aging and Rejuvenation in a SOAP-based Server.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2006) Software Aging and Rejuvenation in a SOAP-based Server.pdf:PDF},
  owner = {mariayh},
  pdf = {01-研究组分类文章\13_Luis Silva & A.Andrzejak _葡萄牙 科英布拉大学\(2006) Software Aging and Rejuvenation in a SOAP-based Server.pdf},
  timestamp = {2012.02.20}
}

@TECHREPORT{tixeuil2006overview,
  author = {Tixeuil, S. and Hoarau, W. and Silva, L.},
  title = {An overview of existing tools for fault-injection and dependability
	benchmarking in grids},
  year = {2006},
  booktitle = {Second CoreGRID Workshop on Grid and Peer to Peer Systems Architecture},
  file = {An Overview of Existing Tools for Fault-Injection and Dependability Benchmarking in Grids.pdf:03-期刊论文 技术报告\\An Overview of Existing Tools for Fault-Injection and Dependability Benchmarking in Grids.pdf:PDF},
  organization = {Citeseer}
}

@PHDTHESIS{徐建2006p-,
  author = {徐建},
  title = {软件抗衰的若干关键技术研究},
  school = {南京理工大学},
  year = {2006},
  file = {(2006) 软件抗衰的若干关键技术研究 -PhD thesis.pdf:01-研究组分类文章\\15_刘凤玉                      _南理工\\(2006) 软件抗衰的若干关键技术研究 -PhD thesis.pdf:PDF},
  pdf = {01-研究组分类文章\15_徐建 _南理工\(2006) 软件抗衰的若干关键技术研究 -PhD thesis.pdf},
  timestamp = {2012.02.20}
}

@ARTICLE{徐建2006基于免疫遗传的软件衰退检测算法,
  author = {徐建 and 游静 and 刘凤玉},
  title = {基于免疫遗传的软件衰退检测算法},
  journal = {计算机科学},
  year = {2006},
  volume = {33},
  pages = {167--169},
  number = {001},
  abstract = {本文吸取了免疫学的灵感，提出了一种新的方法来验证软件衰退的出现，也就是检测软件运行中的性能异常。这种方法结合了阴性选择算法和遗传算法，使用模糊逻辑产生模糊集来区分正常和异常的性能状态，使用了阴性选择算法充当过滤器来消除不合法的检测子、降低搜索空间。最后使用Mackey-Glass时间序列产生的数据集和知名的UCI数据库的一组数据进行了仿真实验，来验证本方法的可行性和有效性},
  file = {(2006) 基于免疫遗传的软件衰退检测算法 - 计算机科学.pdf:01-研究组分类文章\\15_刘凤玉                      _南理工\\(2006) 基于免疫遗传的软件衰退检测算法 - 计算机科学.pdf:PDF},
  review = {泛读笔记：提出许多研究人员使用的基于度量的可靠性估计方法（抗衰方法）主要是利用发生故障或错误时所采集的数据进行分析；对于软件衰退检测来说，仅利用故障数据是不够的。该文的基本思想是不断监控运行中软件的性能数据，利用免疫遗传算法（克隆选择算法？），其中NSA作为算子起到过滤作用，过滤掉不合法的检测器，可以稍微降低搜索空间，因此可以一定程度上解决海量数据时NSA的可扩展性问题。该文最后用模拟和标准数据集验证文中提出的方法的可行性和有效性，缺乏实践说服力。同时该文只检测了性能异常，不能量化异常的程度和确定软件衰退的原因。作者提出未来的工作是研究上述问题，为制定性能恢复策略提供依据。}
}

@PHDTHESIS{游静2006细粒度软件抗衰策略及相关技术研究,
  author = {游静},
  title = {细粒度软件抗衰策略及相关技术研究},
  school = {南京理工大学},
  year = {2006},
  file = {:06- 博士论文\\(2006) 细粒度软件抗衰策略及相关技术研究.nh:Word},
  timestamp = {2012.02.25}
}

@PHDTHESIS{钱鸿生2006p-,
  author = {钱鸿生},
  title = {基于风险管理的软件生命周期模型研究},
  school = {同济大学（上海）},
  year = {2006},
  abstract = {本文根据软件工程学的基本原理，结合国际上软件生命周期模型的最新研究成果，对具有自主知识产权的大型软件开发(Software Developing)过程中的风险管理所面临的一些问题进行了较为全面的论述，在此基础上综合应用系统论、方法论和运筹学的有关知识，提出了一种新型的软件生命周期模型的研究框架和思路，即基于风险管理的软件生命周期模型。
	首先作者提出了课题的来源，选题的依据和论文研究的结构和方法，并论述了本课题研究对于促进我国软件产业的成熟和发展，以及对提高软件项目管理(Software
	Project Management)的水平可能产生的积极作用与影响。 然后作者对国际上软件生命周期模型研究中不同的建模思路和方法进行了论述，并从软件生命周期模型的一般过程的分析中，提出了分阶段进行风险识别的观点和过程风险的概念。
	随后在进行了风险管理和软件生命周期模型关联分析的基础之上，揭示了在软件生命周期不同阶段中核心风险客观存在的事实，并从核心风险的要素分析中进一步提出了核心风险模板的概念，为从事软件项目管理人员提供了一种对可能出现的风险进行预测和判断的工具，从而为基于风险管理的软件生命周期模型体系的建立奠定了基础。
	同样在提出了软件生命周期不同阶段核心风险的基础之上，对于影响整个软件开发过程可能发生的各类风险，提出了与软件开发及项目管理整个过程有关的过程风险模型，即COST模型图，并且分析了组织风险对于软件项目管理可能造成的重要影响。
	作者运用基于风险管理的软件生命周期模型的一些基本观点，对各类风险概率的分布与风险识别的技术方法进行了重点研究，并把这种研究称之为风险管理的有效性分析，认为这种有效性分析是在基于风险管理的软件生命周期模型的核心风险模板和过程风险模板体系下的一种积极有效的应用，对于提高风险管理的效益和改进风险管理的技术，具有十分重要的意义。
	案例分析是对一个典型的中美合资的大型软件企业—国信朗讯公司，在软件项目管理过程中应用本文提出的基于风险管理的软件生命周期模型进行了实证研究和成果分析。
	最后在总结和展望中，作者对本文提出的一些基本观点进行了归纳分析并对基于风险管理的软件生命周期模型的理论意义和实际使用价值进行了探讨，同时指出了本论文研究中尚且存在的一些问题，为该课题进一步地研究提出了新的目标。},
  file = {(2006) 基于风险管理的软件生命周期模型研究 (同济大学 博士论文).pdf:20- 软件生命周期\\(2006) 基于风险管理的软件生命周期模型研究 (同济大学 博士论文).pdf:PDF},
  timestamp = {2012.03.15}
}

@ARTICLE{钱鸿生2006基于风险管理的软件生命周期模型研究,
  author = {钱鸿生 and 黄立平},
  title = {基于风险管理的软件生命周期模型研究},
  journal = {通信学报},
  year = {2006},
  volume = {27},
  pages = {135--140},
  number = {5},
  file = {(2006) 基于风险管理的软件生命周期模型研究 (通信学报).pdf:20- 软件生命周期\\(2006) 基于风险管理的软件生命周期模型研究 (通信学报).pdf:PDF},
  timestamp = {2012.02.29}
}

@INPROCEEDINGS{Andrzejak2007p159-168,
  author = {Andrzejak, A. and Silva, L.},
  title = {Deterministic Models of Software Aging and Optimal Rejuvenation Schedules},
  booktitle = {Proc. 10th IFIP/IEEE Int. Symp. Integrated Network Management IM
	'07},
  year = {2007},
  pages = {159--168},
  __markedentry = {[mariayh:]},
  abstract = {Automated modeling of software aging processes is a prerequisite for
	cost-effective usage of adaptive software rejuvenation as a self-healing
	technique. We consider the problem of such automated modeling in
	server-type applications whose performance degrades depending on
	the "work" done since last rejuvenation, for example the number of
	served requests. This type of performance degradation - caused mostly
	by resource depletion - is common, as we illustrate in a study of
	the popular Axis Soap server 1.3. In particular, we propose deterministic
	models for approximating the leading indicators of aging and an automated
	procedure for statistical testing of their correctness. We further
	demonstrate how to use these models for finding optimal rejuvenation
	schedules under utility functions. Our focus is on the important
	case that the utility function is the average of a performance metric
	(such as maximum service rate). We also consider optional SLA constraints
	under which the performance should never drop below a specified level.
	Our approach is verified by a study of the aging processes in the
	Axis Soap 1.3 server. The experiments show that the deterministic
	modeling technique is appropriate in this case, and that the optimization
	of rejuvenation schedules can greatly improve the average maximum
	service rate of an aging application.
	
	摘要翻译：对软件衰退过程自动建模，是适应性软件抗衰作为自愈技术的先决条件。本文在一个服务器类型的应用中，考虑这个自动建模问题，服务器型应用的性能衰退依赖于自前一次抗衰后，它所做的工作，比如它服务的请求数。这类性能异常（主要由资源衰退引起的）很常见，因此，我们通过学习主流的AXIS
	Soap Server 1.3来说明。特别地，本文提出一些动态模型，来逼近导致衰退的主要indicators，并用统计方法自动验证其正确性。并说明如何用这些模型，在效用函数下，去发现最优抗衰安排。我们的关注在于：效用函数是性能度量标准（如最大服务率）的均值。我们也考虑可选的SLA（服务等级协议）限制，在它的约束下，性能永远不能低于一个特定的level。实验显示这种确定性建模技术适合这种情况，且最优抗衰安排可以很大改善一个衰退应用的平均最大服务率。},
  doi = {10.1109/INM.2007.374780},
  file = {(2007) Deterministic models of software aging and optimal rejuvenation schedules(葡萄牙 - 科英布拉大学).pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2007) Deterministic models of software aging and optimal rejuvenation schedules(葡萄牙 - 科英布拉大学).pdf:PDF},
  review = {1）研究动机
	
	本文提出了确定性的、时间无关的致衰因素建模，为什么？
	
	文章自夸的优势：
	
	a）减小了概率模型在建模衰退现象时繁重的工作；
	
	b）确定性模型似乎比概率技术精确
	
	c）一般使用这种类型的模型多，因为他们准确描述了衰退，如果内存泄露或其他未释放的资源是衰退的主要原因的话。
	
	2）假设
	
	 假设1：性能下降的主要indicators可以被逼近为一些“work”相关的度量标准（metric），如自前一次抗衰起服务的请求数。这种软件衰退可能归因于内存泄露、未终止的线程、旧的文件锁和与每个或一系列请求一起发生的其他资源的消耗。而且还假设致衰因素只依赖于一个指标（度量work的指标）。
	
	 假设2：大多数情况，衰退过程能够被一个确定的衰退模型足够精确的捕获。
	
	2.1）假设去掉之后方法是否成立？
	
	 假设1去掉后，方法应该不成立，因为本文只考虑了资源未释放导致的操作系统资源的消耗情况，未考虑数据损坏、数值错误等引起的应用特殊的资源消耗和指标。（OLTP的共享内存池、DBMS数据库连接池、JVM的堆栈内存/虚拟内存等）。而且，许多复杂的衰退过程不适用，他们的metric是若干个参数的综合函数。
	
	 假设2去掉后，方法也不成立。软件及其运行环境是动态变化的，衰退则具有动态性、多样性、随机性等不确定性，所以不是任何一个衰退的应用软件系统都满足该假设（尤其是网络环境下运行的软件）。用来确认假设2的统计数据集也是有限的。},
  timestamp = {2012.02.20}
}

@ARTICLE{Dai2007p781-795,
  author = {Yuan-Shun Dai and Min Xie and Quan Long and Szu-Hui Ng},
  title = {Uncertainty Analysis in Software Reliability Modeling by Bayesian
	Analysis with Maximum-Entropy Principle},
  journal = {IEEE Transactions on Software Engineering},
  year = {2007},
  volume = {33},
  pages = {781--795},
  number = {11},
  __markedentry = {[mariayh:6]},
  doi = {10.1109/TSE.2007.70739},
  file = {贝叶斯网络分析可靠性建模中的不确定性:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\00- 综述性文章\\(2007-IEEE Trans) Uncertainty Analysis in Software Reliability Modeling by Bayesian Analysis with Maximum-Entropy Principle.pdf:PDF},
  review = {本文试图研究和量化拥有相关参数的单一组件与拥有众多组件的大型系统在软件可靠性建模中的不确定性因素。本文提出利用专家的意见和来自先前项目的历史数据来补充少数观察的不足来量化不确定因素。这是利用结合最大熵原理到贝叶斯理论的方法来完成的。本文还利用蒙特卡洛方法进一步考虑了系统级的不确定性分析，其中包含多个组件，每个组件都有其各自的模型、参数和不确定性。文中一些利用不同建模方法的例子来阐明该方法的通用性和有效性。此外，本文还讲述了该方法怎么利用考虑各组件之间的确定因素方法来改善一个大型系统的可靠性模型。},
  timestamp = {2012.02.22}
}

@ARTICLE{grottke2007fighting,
  author = {Grottke, M. and Trivedi, K.S.},
  title = {Fighting bugs: Remove, retry, replicate, and rejuvenate},
  journal = {IEEE Computer},
  year = {2007},
  volume = {40},
  pages = {107--109},
  number = {2},
  file = {(2007) Fighting Bugs：Remove, Retry, Replicate, and Rejuvenate.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2007) Fighting Bugs：Remove, Retry, Replicate, and Rejuvenate.pdf:PDF},
  publisher = {IEEE},
  timestamp = {2012.02.25}
}

@INPROCEEDINGS{Houbao2007p646-650,
  author = {Xu Houbao and Wang Junmin},
  title = {Asymptotic Stability of Software Systems with Rejuvenation Policy},
  booktitle = {Proc. Chinese Control Conf. CCC 2007},
  year = {2007},
  pages = {646--650},
  __markedentry = {[mariayh:]},
  abstract = {Asymptotic stability of <span class='snippet'>software</span> systems
	with <span class='snippet'>rejuvenation</span> policy is studied.
	Both partial restart and reboot from crash are considered in gradually
	deteriorating <span class='snippet'>software</span> systems. An integral-differential
	mathematical model of <span class='snippet'>software</span> systems
	is constructed. We show that the system operator generates a positive
	C<sub>o</sub>-semigroup of contractions in the state Banach space.
	Moreover, 0 is an eigenvalue with algebraical multiplicity 1 and
	it is also a unique spectral point on the imaginary axis. As a result,
	the asymptotic stability of <span class='snippet'>software</span>
	systems is then obtained and the steady-state space of the system
	is spanned by the eigenfunction of eigenvalue 0.},
  doi = {10.1109/CHICC.2006.4347423},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2007p262-269,
  author = {Koutras, V. P. and Platis, A. N. },
  title = {VoIP Availability and Service Reliability through Software Rejuvenation
	Policies},
  booktitle = {Proc. 2nd Int. Conf. Dependability of Computer Systems DepCoS-RELCOMEX
	'07},
  year = {2007},
  pages = {262--269},
  __markedentry = {[mariayh:]},
  abstract = {Nowadays voice over Internet protocol (VoIP) is becoming an evolutionary
	technology in telecommunications. In this paper the study is focused
	on the resources that are allocated for VoIP calls. Resource allocation
	in a VoIP system and resource degradation when new demands for resources
	arrive at the system are modeled. To counteract resource degradation
	and improve availability and service reliability, we propose to perform
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>..
	Moreover, the rate of resource allocation in such a system can be
	importantly affected by the time that an amount of resources is allocated
	in order to serve VoIP calls. Hence, we model <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> in a VoIP system with a
	semi-Markov process in order to capture the effects of time spent
	at resource degraded states of the system. Through the stochastic
	analysis of the system an optimal <span class='snippet'>rejuvenation</span>
	policy that maximizes system's availability is proposed and furthermore
	the corresponding reliability levels in means of Mean Time To Failure
	are derived.},
  doi = {10.1109/DEPCOS-RELCOMEX.2007.54},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{lyu2007software,
  author = {Lyu, M.R.},
  title = {Software Reliability Engineering：A Roadmap},
  booktitle = {2007 Future of Software Engineering},
  year = {2007},
  pages = {153--170},
  organization = {IEEE Computer Society},
  note = {软件可靠性工程中存在的问题，未来需要考虑软件失效的表现机制。未来方向软件架构和常备组件的可靠性、可靠性设计、可靠性评定的测试、可靠性预计的度量、新兴的软件应用可靠性},
  abstract = {Software reliability engineering is focused on engineering techniques
	for developing and maintaining software systems whose reliability
	can be quantitatively evaluated. In order to estimate as well as
	to predict the reliability of software systems, failure data need
	to be properly measured by various means during software development
	and operational phases. Moreover, credible software reliability models
	are required to track underlying software failure processes for accurate
	reliability analysis and forecasting. Although software reliability
	has remained an active research subject over the past 35 years, challenges
	and open questions still exist. In particular, vital future goals
	include the development of new software reliability engineering paradigms
	that take software architectures, testing techniques, and software
	failure manifestation mechanisms into consideration. In this paper,
	we review the history of software reliability engineering, the current
	trends and existing problems, and specific difficulties. Possible
	future directions and promising research subjects in software reliability
	engineering are also addressed.},
  file = {软件可靠性工程发展蓝图:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\00- 综述性文章\\(2007) Software Reliability Engineering：A Roadmap.pdf:PDF},
  review = {在这篇文章中，作者回顾了软件可靠性工程的历史，分析了软件可靠性工程研究动态、现状中存在的问题和困难，提到未来的软件可靠性工程研究要考虑软件体系结构、测试技术和软件失效的表现机制，还从五个领域分别讲述了软件可靠性工程未来可能的发展方向和有前途的研究课题：软件架构和常备组件的可靠性、可靠性设计、可靠性评定的测试、可靠性预计的度量、新兴的软件应用可靠性。},
  url = {http://dl.acm.org/citation.cfm?id=1254716}
}

@ARTICLE{ma2007web,
  author = {Ma, L. and Tian, J.},
  title = {Web error classification and analysis for reliability improvement},
  journal = {Journal of Systems and Software},
  year = {2007},
  volume = {80},
  pages = {795--804},
  number = {6},
  file = {(2007) Web error classification and analysis for reliability improvement.pdf:21_国外其他英文论文\\(2007) Web error classification and analysis for reliability improvement.pdf:PDF},
  publisher = {Elsevier},
  timestamp = {2012.02.21}
}

@INPROCEEDINGS{MouraSilva2007p33-44,
  author = {Moura Silva, L. and Alonso, J. and Silva, P. and Torres, J. and Andrzejak,
	A.},
  title = {Using Virtualization to Improve Software Rejuvenation},
  booktitle = {Proc. Sixth IEEE Int. Symp. Network Computing and Applications NCA
	2007},
  year = {2007},
  pages = {33--44},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, we present an approach for <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> based on automated self-healing
	techniques that can be easily applied to off-the-shelf Application
	Servers and Internet sites. <span class='snippet'>Software</span>
	aging and transient failures are detected through continuous monitoring
	of system data and performability metrics of the application server.
	If some anomalous behavior is identified the system triggers an automatic
	<span class='snippet'>rejuvenation</span> action. This self-healing
	scheme is meant to be the less disruptive as possible for the running
	service and to get a zero downtime for most of the cases. In our
	scheme, we exploit the usage of virtualization to optimize the self-recovery
	actions. The techniques described in this paper have been tested
	with a set of open-source Linux tools and the XEN virtualization
	middleware. We conducted an experimental study with two applications
	benchmarks (Tomcat/Axis and TPC-W). Our results demonstrate that
	virtualization can be extremely helpful for <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> and fail-over in the occurrence
	of transient application failures and <span class='snippet'>software</span>
	aging.},
  doi = {10.1109/NCA.2007.53},
  file = {使用虚拟化技术改进软件抗衰:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(2007) Using Virtualization to Improve Software Rejuvenation.docx:Word;(2007) Using Virtualization to Improve Software Rejuvenation.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2007) Using Virtualization to Improve Software Rejuvenation.pdf:PDF},
  review = {基于度量-阈值的抗衰策略，立论中有一些对软件抗衰的必要性的描述不错。详见读书笔记。
	
	"An Overview of Existing Tools for Fault-Injection and Dependability
	Benchmarking in Grids
	
	1、研究动机
	
	在斯坦福大学ROC（[24-26]）项目的micro-rebooting被认为是目前抗衰领域可能最好的贡献，但它不满足本文抗衰7条原则的1、3、7.在ROC研究结果的基础上，为了更进一步、尽可能减少平均恢复时间（MTTR：mean
	time to repair），并使抗衰技术能够直接应用于现有的应用服务器，而不需要对应用或中间件重新开放、实施软件工程流程，本文研究利用虚拟机实施抗衰技术。
	
	2、不足
	
	只采用简单的阈值技术来检测衰退。we configured the rejuvenation mechanism to be triggered
	when there is some threshold violation in one of the external QoS
	metrics. 一个外部QoS指标超过阈值，就触发抗衰，这种方法有如下不足：
	
	1）丢弃了很多对后续提取抗衰决策规则可能有用的参数。因此，一个参数不足以判定。而且，不能保证根据经验选择的阈值适用于所有场景。比如，一些攻击和作业可能保持CPU使用足够高，来逃避实施虚拟机的抗衰;
	
	2)不考虑历史（前一些times）的情况。而只有当综合（in times combined）考虑若干连续的采样时间点软件的情况，才能识别有些攻击和复杂的异常。
	
	3、未来的工作
	
	用统计学习（注重数据的统计规律，如统计分析、机器学习等）和时序分析技术增加预测衰退的准确性。
	
	4、评议：
	
	 本文提出一种基于虚拟机的软件抗衰方法提供优化的自恢复活动，目的是可以简单地被应用到现有的应用服务器和因特网站点，不用重构、调整已有的应用和中间件，以及使抗衰机制对运行中的服务影响较小，大多数情况下的宕机时间为零。该方法通过持续监测系统数据和应用服务器的性能指标，来检测软件衰退和瞬时性失效。如果检测到有异常行为发生，系统会自动触发抗衰活动。作者使用一些开源Linux工具和XEN虚拟化中间件搭建环境，在两个应用benchmark（Tomcat/Axis和TPC_W）上测试本文提出的方法。测试结果说明虚拟化技术确实有助于在出现瞬时失效和软件失效时实施软件抗衰和故障转移？},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Ning2007p-,
  author = {Meng Hai Ning and Qi Yong and Hou Di and Chen Ying},
  title = {Forecasting Software Aging of Service-Oriented Application Server
	Based on Wavelet Network with Adaptive Genetic Algorithm},
  booktitle = {Proc. Fourth Int. Conf. Autonomic Computing ICAC '07},
  year = {2007},
  abstract = {Web services are gaining acceptance as a standards-based approach
	for integrating loosely coupled services. Achieving high levels of
	reliability and availability of service-oriented application server
	in spite of service or infrastructure failures poses new challenges.
	According to the characteristic of performance parameters of service-oriented
	application sever, a new software aging forecasting model based on
	wavelet network is proposed. The dimensionality of input variables
	is reduced by principal component analysis, and the structure and
	parameters of wavelet network are optimized with genetic algorithm
	and evolutionary programming. The objective is to observe and model
	the existing systematic parameter data series of service-oriented
	application server to forecast accurately future unknown data values.
	By the model, we can get the aging threshold before application server
	fails and rejuvenate the application server in autonomic ways before
	observed systematic parameter value reaches the threshold. The experiments
	are carried out to validate the efficiency of the proposed model
	and show that the aging forecasting model based on wavelet network
	with adaptive genetic algorithm is superior to the BP neural network
	model and wavelet network model in the aspects of convergence rate
	and forecasting precision.},
  doi = {10.1109/ICAC.2007.19},
  file = {(2007) Forecasting Software Aging of Service-Oriented Application Server Based on Wavelet Network with Adaptive Genetic Algorithm.pdf:01-研究组分类文章\\21-西安交通大学\\(2007) Forecasting Software Aging of Service-Oriented Application Server Based on Wavelet Network with Adaptive Genetic Algorithm.pdf:PDF},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@ARTICLE{pop00090,
  author = {A Avritzer and RG Cole and ...},
  title = {Using performance signatures and software rejuvenation for worm mitigation
	in tactical MANETs},
  journal = {（ACM）Proceedings of the 6th international workshop on Software and
	performance},
  year = {2007},
  note = {4 cites: http://scholar.google.com/scholar?cites=16961454501830817543\&as_sdt=2005\&sciodt=0,5\&hl=en\&num=100},
  abstract = {In this paper, we propose a new approach for mitigation of worm propagation
	through tactical Mobile Ad-Hoc Networks (MANETs) which is based upon
	performance signatures and software rejuvenation. Three application
	performance signature and software rejuvenation algorithms are proposed
	and analyzed. These algorithms monitor critical applications' responsiveness
	and trigger actions for software rejuvenation when host resources
	degrade due to a co-resident worm competing for host resources. We
	analyze the effectiveness of our algorithms through analytic modeling
	and detailed, extensive simulation studies. The key performance metrics
	investigated are application response time, mean time between rejuvenations
	and the steady state probability of host infection. We also use simulation
	models to investigate several design and parameter tuning issues.
	We investigate the relationship between the rate at which the application
	performance monitors can detect out-of-specification applications
	and the rate of worm propagation in the network.},
  publisher = {dl.acm.org},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=1217023}
}

@ARTICLE{pop00111,
  author = {A Andrzejak and MM Moser and ...},
  title = {Managing performance of aging applications via synchronized replica
	rejuvenation},
  journal = {（ACM）Proceedings of the Distributed systems: operations and management
	18th IFIP/IEEE international conference on Managing virtualization
	of networks and services},
  year = {2007},
  note = {7 cites: http://scholar.google.com/scholar?cites=1214098085432999667\&as_sdt=2005\&sciodt=0,5\&hl=en\&num=100},
  abstract = {We investigate the problem of ensuring and maximizing performance
	guarantees for applications suffering software aging. Our focus is
	the optimization of the minimum and average performance of such applications
	in virtualized and non-virtualized scenario. The key technique is
	to use a set of simultaneously active application replica and to
	optimize their rejuvenation schedules. We derive an analytical method
	for maximizing the minimum "any-time" performance for certain cases
	and propose a heuristic method for maximization of minimum and average
	performance for all others. To evaluate our method we perform extensive
	studies on two applications: aging profiles of Apache Axis 1.3 and
	the aging data of the TPC-W benchmark instrumented with a memory
	leak injector. The results show that our approach is a practical
	way to ensure uninterrupted availability and optimize performance
	for even strongly aging applications.},
  file = {(2007) Managing performance of aging applications via synchronized replica rejuvenation.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2007) Managing performance of aging applications via synchronized replica rejuvenation.pdf:PDF},
  publisher = {dl.acm.org},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=1783386}
}

@ARTICLE{pop00273,
  author = {Y Singh and ...},
  title = {A step towards software preventive maintenance},
  journal = {ACM SIGSOFT Software Engineering Notes},
  year = {2007},
  note = {5 cites: http://scholar.google.com/scholar?cites=15752207842324195897\&as_sdt=2005\&sciodt=0,5\&hl=en\&num=100},
  file = {(2007) A step towards software preventive maintenance  _ACM.pdf:21_国外其他英文论文\\(2007) A step towards software preventive maintenance  _ACM.pdf:PDF},
  publisher = {dl.acm.org},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=1281432}
}

@ARTICLE{pop00543,
  author = {J Patel and ...},
  title = {A new model for evaluating performability under the effects of software
	aging and rejuvenation},
  journal = {(ACM) EA '07 Proceedings of the 11th IASTED International Conference
	on Software Engineering and Applicationss},
  year = {2007},
  note = {Query date: 2012-02-23},
  abstract = {When a fault-tolerant layered distributed system continues its operation
	despite the presence of component failures, its performance is usually
	degraded. Its performance can also be degraded if it is executing
	continuously for a long period of time due to a phenomenon known
	as Software Aging. To prevent unexpected or unplanned outages due
	to aging, a pro-active technique called software rejuvenation can
	be employed. This technique involves gracefully terminating an application
	and immediately restarting it with a refreshed internal state. For
	proper modeling of these systems, their performance and dependability
	characteristics need to be considered in a unified way, called performability.
	This paper proposes a model to evaluate the effects of software aging
	and rejuvenation on performability of these layered systems. Specifically
	a Layered Queueing Network (LQN) is used for performance analysis
	and a Multi State Fault Tree (MSFT) is used for dependability analysis.},
  publisher = {dl.acm.org},
  review = {原文下载不到：
	
	参考文献：
	
	2. Michael Grottke , Kishor S. Trivedi, Fighting Bugs: Remove, Retry,
	Replicate, and Rejuvenate, Computer, v.40 n.2, p.107-109, February
	2007 [doi>10.1109/MC.2007.55]
	
	3. S. Garg , A. Van Moorsel , K. Vaidyanathan , K. S. Trivedi, A Methodology
	for Detection and Estimation of Software Aging, Proceedings of the
	The Ninth International Symposium on Software Reliability Engineering,
	p.283, November 04-07, 1998 
	
	4. Kalyanaraman Vaidyanathan , Kishor S. Trivedi, A Comprehensive
	Model for Software Rejuvenation, IEEE Transactions on Dependable
	and Secure Computing, v.2 n.2, p.124-137, April 2005 [doi>10.1109/TDSC.2005.15]
	
	
	5. Nick Kolettis , N. Dudley Fulton, Software Rejuvenation: Analysis,
	Module and Applications, Proceedings of the Twenty-Fifth International
	Symposium on Fault-Tolerant Computing, p.381, June 27-30, 1995
	
	11. Letian Jiang , Guozhi Xu, Modeling and analysis of software aging
	and software failure, Journal of Systems and Software, v.80 n.4,
	p.590-595, April, 2007 [doi>10.1016/j.jss.2006.06.029] 
	
	12. András Pfening , Sachin Garg , Antonio Puliafito , Miklós Telek
	, Kishor S. Trivedi, Optimal software rejuvenation for tolerating
	soft failures, Performance Evaluation, 27-28, p.491-506, Oct. 1996
	[doi>10.1016/0166-5316(96)00038-7]},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=1647642}
}

@INPROCEEDINGS{Rinsaka2007p247-256,
  author = {Rinsaka, K. and Dohi, T. },
  title = {Non-parametric Predictive Inference of Preventive Rejuvenation Schedule
	in Operational Software Systems},
  booktitle = {Proc. 18th IEEE Int. Symp. Software Reliability ISSRE '07},
  year = {2007},
  pages = {247--256},
  __markedentry = {[mariayh:]},
  abstract = {In this paper we develop a novel approach to estimate the optimal
	preventive <span class='snippet'>rejuvenation</span> schedule which
	maximizes the steady-state system availability. In the case with
	unknown system failure time distribution, the preventive <span class='snippet'>rejuvenation</span>
	is triggered for the purpose of preventive maintenance of <span class='snippet'>software</span>
	system. We formulate the upper and lower bounds of the predictive
	system availability using the one-look ahead predictive survivor
	function, and derive the pessimistic and optimistic <span class='snippet'>rejuvenation</span>
	policies. In the real data analysis we focus on a real Web server
	system and show the usefulness of the non-parametric predictive inference
	approach proposed in this paper.},
  doi = {10.1109/ISSRE.2007.13},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Tirtea2007p767-772,
  author = {Tirtea, R. and Deconinck, G. },
  title = {Software Rejuvenation and Replicated Rejuvenated Services},
  booktitle = {Proc. 5th IEEE Int Industrial Informatics Conf},
  year = {2007},
  volume = {2},
  pages = {767--772},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, the <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	model, designed for a continuously running non-replicated application,
	is extended for the case of distributed systems with rejuvenated
	replicated services. It identifies to which extent an increase in
	availability can be achieved and how the cost associated with downtime
	can be reduced using <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> combined with replication. Based
	on two representative situations in a case study, it can be concluded
	that replica <span class='snippet'>rejuvenation</span> improves the
	service availability and reduces the cost associated with downtime.
	In general, replica <span class='snippet'>rejuvenation</span> improves
	the availability even in the cases where, in the original model,
	<span class='snippet'>rejuvenation</span> is not recommended.},
  doi = {10.1109/INDIN.2007.4384870},
  timestamp = {2012.02.20}
}

@ARTICLE{Wang2007p247-265,
  author = {Dazhi Wang and Wei Xie and Kishor S. Trivedi},
  title = {Performability analysis of clustered systems with rejuvenation under
	varying workload},
  journal = {Performance Evaluation},
  year = {2007},
  volume = {64},
  pages = {247 - 265},
  number = {3},
  abstract = {This paper develops time-based rejuvenation policies to improve the
	performability measures of a cluster system. Three rejuvenation policies,
	namely standard rejuvenation, delayed rejuvenation and mixed rejuvenation,
	are designed to improve the cluster performability under varying
	workload. Analytic models are built to evaluate these three policies.
	Since deterministic transitions are used in this paper and analytical
	models based on homogeneous continuous-time Markov chains (CTMC)
	do not allow non-exponential distributions, we utilize deterministic
	and stochastic Petri nets (DSPN), in which the underlying stochastic
	process is a Markov regenerative process (MRGP), to capture both
	exponential and deterministic distributions. System performability
	measures under these three rejuvenation policies are derived based
	on the DSPN models. We show that the mixed rejuvenation policy achieves
	the maximum performability among the three policies, which results
	in 12% improvement on the system throughput in the example shown
	in this paper. The delayed rejuvenation is better than the standard
	rejuvenation with respect to the optimal job blocking probability
	and system throughput. For longer rejuvenation-triggering intervals,
	the standard rejuvenation yields a better result than delayed rejuvenation,
	while for shorter rejuvenation-triggering intervals the delayed rejuvenation
	policy outperforms standard rejuvenation policy.},
  doi = {10.1016/j.peva.2006.04.002},
  file = {(2007) Performability analysis of clustered systems with rejuvenation under varying workload.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\(2007) Performability analysis of clustered systems with rejuvenation under varying workload.pdf:PDF},
  issn = {0166-5316},
  keywords = {Clustered system},
  timestamp = {2012.02.21},
  url = {http://www.sciencedirect.com/science/article/pii/S0166531606000381}
}

@ARTICLE{徐建2007软件抗衰研究综述,
  author = {徐建 and 张琨 and 刘风玉},
  title = {软件抗衰研究综述},
  journal = {小型微型计算机系统},
  year = {2007},
  volume = {28},
  pages = {1952--1958},
  number = {011},
  file = {(2007) 软件抗衰研究综述 (小型微型计算机系统).pdf:00-综述性文章\\(2007) 软件抗衰研究综述 (小型微型计算机系统).pdf:PDF},
  timestamp = {2012.03.05}
}

@PHDTHESIS{王湛2007智能化细粒度软件抗衰策略及相关技术研究,
  author = {王湛},
  title = {智能化细粒度软件抗衰策略及相关技术研究},
  school = {南京理工大学},
  year = {2007},
  abstract = {随着计算系统复杂性程度的提高,许多已知和未知的软件缺陷无法避免,由其引发的软件老化现象成为软件运行中必须面对的重要问题,由此,软件抗衰技术应运而生;为了最大程度地提高软件抗衰的效率,缩减抗衰成本,降低系统性能衰退以及意外失效所导致的损失,智能化细粒度软件抗衰技术的提出迫在眉睫。本文针对上述应用需求展开的主要研究工作及取得的创新性成果概述如下:(1)针对现有组件重启相关度判定规则及系统重启树构建步骤相对粗糙、不够完善的问题,提出了以软件工程为依据的新型高准确度重启相关度判定规则和系统重启树的构建方法。通过分析软件体系结构和各组件间的数据访问关系,给出了组件间依赖程度的数据化表示,通过搜索两组件间的可达路径,求得任意两个组件间的重启相关度,并据此判定组件重启群,构建系统重启树,从而完成抗衰重启的前期准备。(2)建立了多级嵌套软件抗衰策略的形式化模型,给出了模型的求解方法。为了更清晰地描述复杂系统细粒度多级嵌套软件抗衰策略,论文综合采用Petri网和有限状态自动机建立k级嵌套软件抗衰模型,用Petri网表示各次重启的动态行为细节,用自动机控制策略的重启组件、组件重启次序和执行周期,最终得到简单且易于理解的策略模型,同时避免了直接将模型同构为马尔可夫过程可能遇到的状态空间爆炸问题。(3)分析了软件抗衰智能化的可实现性,初步提出了智能化抗衰的实现原理及模型,构建并制定了基于软件抗衰的神经网络模型、遗传算法及DNA计算。首先分析神经网络、遗传算法及DNA计算的工作原理,确定其在抗衰技术中的可用性;由此依据抗衰原理,构建出五层神经网络结构模型,给出基于抗衰的遗传算法及DNA计算,最终智能化地判定组件重启相关度及组件可达集,提高了抗衰效率,节约了抗衰成本,为实现智能化软件抗衰提供支持。(4)制定了分布式系统智能化细粒度软件抗衰策略,给出了基于该策略的agent系统体系结构。根据分布式系统各重启层组件的运行特点,提出了系统四层嵌套的抗衰策略,将抗衰粒度细化至线程级。通过分析系统各级组件间控制、调用及数据访问的关系,确定了适应各层的直接依赖组件判定方法;同时通过监控系统资源的使用情况,确定系统重启组件,明确各级重启组件间的嵌套重启关系,建立了系统重启链,给出了抗衰体系结构:为实现了分布式系统的智能化细粒度软件抗衰奠定了基础。(5)定义了基于软件抗衰的数据流系统模型,提高了抗衰技术的准确度,增强了抗衰实时性。在数据流的基础上,结合软件抗衰重启理论,制定了较为全面的系统性能参数,给出基于软件抗衰的数据流系统模型,并通过异常模式提取和趋势分析的方法有效地对异常组件进行预测,由此判定组件间重启相关度、确定重启组件及重启次序,最终构建系统的重启链,实现了高效准确的软件抗衰技术,全面改善了重启效果。},
  file = {智能化细粒度软件抗衰策略及相关技术研究:06- 博士论文\\(2007) 智能化细粒度软件抗衰策略及相关技术研究.nh:CHM}
}

@PHDTHESIS{郭成昊2007计算系统的自适应体系结构研究,
  author = {郭成昊},
  title = {计算系统的自适应体系结构研究},
  school = {南京理工大学},
  year = {2007},
  file = {计算系统的自适应体系结构研究:06- 博士论文\\(2007) 计算系统的自适应体系结构研究.nh:CHM},
  timestamp = {2012.02.25}
}

@INPROCEEDINGS{Andrzejak2008p25-32,
  author = {Andrzejak, A. and Silva, L.},
  title = {Using machine learning for non-intrusive modeling and prediction
	of software aging},
  booktitle = {Network Operations and Management Symposium, 2008. NOMS 2008. IEEE},
  year = {2008},
  pages = {25--32},
  organization = {IEEE},
  abstract = {Abstract：The wide-spread phenomenon of software (running image) aging
	is known to cause performance degradation, transient failures or
	even crashes of applications. In this work we describe first a method
	for monitoring and modeling of performance degradation in SOA applications,
	particularly application servers. This method works for a large class
	of the aging processes caused by resource depletion (e.g. memory
	leaks). It can be deployed non-intrusively in a production environment,
	under arbitrary service request distributions. Based on this schema
	we investigate in the second part of the paper how machine learning
	(classification) algorithms can be used for proactive detection of
	performance degradation or sudden drops caused by aging. We leverage
	the predictive power of these algorithms with several techniques
	to make the measurement-based aging models more adaptive and more
	robust against transient failures. We evaluate several state-of-the-art
	classification methods for their accuracy and computational efficiency
	in this scenario. The studies are performed on a data set generated
	by a TPCW benchmark instrumented with a memory leak injector. The
	results show that the probing method yields accurate aging models
	with low overhead and the machine learning approach gives statistically
	significant short-term predictions of degrading application performance.
	Both approaches can be used directly to fight aging via adaptive
	software rejuvenation (restart of the application), for operator
	alerting, or for short-term capacity planning.},
  file = {读书笔记：SOA应用Server衰退建模与预测:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\04- 软件抗衰  软件衰退检测 性能评估\\(2008) Using machine learning for non-intrusive modeling and prediction of software aging.docx:Word;(2008) Using machine learning for non-intrusive modeling and prediction of software aging（SOA应用-应用server）.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2008) Using machine learning for non-intrusive modeling and prediction of software aging（SOA应用-应用server）.pdf:PDF},
  owner = {mariayh},
  pdf = {01-研究组分类文章\13_Luis Silva & A.Andrzejak _葡萄牙 科英布拉大学\(2008) Using machine learning for non-intrusive modeling and prediction of software aging（SOA应用-应用server）.pdf},
  review = {non-intrusive:外置，非内置
	
	1、研究动机
	
	先前的方法存在不足：先前的方法需要经过很多个抗衰周期收集初始数据集，来构建预测模型；无法应对不符合所构建的衰退模型的瞬时性失效；衰退模型的计算代价大，尤其是ARMA模型。
	
	需要专门的测试设置；
	
	时序分析等预测方法多为单变量的，而机器学习方法可同步考虑多个变量的变化。发现综合的衰退过程（复合的多种衰退问题）
	
	处理不确定性，使算法/模型具备自适应性，以应对瞬时故障和不确定性衰退效果
	
	
	2、不足
	
	作者未测试他们提出的方法对动态的和涉及多个资源的衰退问题的效果.----Javier Alonso, Jordi Torres et.al,
	“Adaptive on-line software aging prediction based on machine learning”,
	2010 IEEE IIFIP International Conference on Dependable Systems &
	Networks (DSN)
	
	3、评议
	
	算法成立/有效的前提：用来训练的样本集比较完备、样本要有代表性，不能处理未知的衰退情况（未知的软件bug引起的衰退情况）
	
	两种方法：
	
	1）基于work的
	
	基于work的方法，记录从上次抗衰执行开始，一定的时间间隔内，服务的最大请求数；当While this applies to a large
	number of aging processes caused by resource depletion [3], such
	models might fail if the dependencies are more complex or transient
	failures occur. 
	
	2）基于机器学习的
	
	In a such scenario, we propose use machine learning classification
	methods to predict performance in the near future. Such algorithms
	are capable to model implicitly complex relationships, and become
	more accurate with growing amount of the historical data.
	
	 步骤：a）特征提取；b）数据预处理（分类算法要求训练数据集中已经打好标签）；c）根据训练数据集，训练分类器；d）测试分类器；e）预测},
  timestamp = {2012.02.20}
}

@ARTICLE{andrzejak2008robust,
  author = {Andrzejak, A. and Silva, L. and Informtica, DE},
  title = {Robust and adaptive modeling of software aging},
  year = {2008},
  note = {2 cites: http://scholar.google.com/scholar?cites=1879117303517889708\&as_sdt=2005\&sciodt=0,5\&hl=en\&num=100},
  file = {(2008) Robust and Adaptive Modeling Of Software Aging.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2008) Robust and Adaptive Modeling Of Software Aging.pdf:PDF},
  publisher = {Citeseer}
}

@INPROCEEDINGS{Avritzer2008p1-6,
  author = {Avritzer, A. and Cole, R. G. and Weyuker, E. J. },
  title = {Methods and opportunities for rejuvenation in aging distributed software
	systems},
  booktitle = {Proc. IEEE Int. Conf. Software Reliability Engineering Workshops
	ISSRE Wksp 2008},
  year = {2008},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {In this paper we describe several methods for detecting the need for
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	in mission critical systems that are subjected to worm infection.
	We introduce a new <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	algorithm that tracks both the state of the mission and the customer
	affecting metric, response time. We evaluate the probability of mission
	success of several different <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> algorithms using simulation.},
  doi = {10.1109/ISSREW.2008.5355518},
  pdf = {02-国际会议论文 书籍\2008 IEEE International Conference on Software Reliability Engineering Workshops(ISSRE)\Alberto Avritzer- Methods and opportunities for rejuvenation in aging distributed software systems.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Cherkasova2008p452-461,
  author = {Cherkasova, L. and Ozonat, K. and Mi, N. and Symons, J. and Smirni,
	E.},
  title = {Anomaly？Application Change？or Workload Change？Towards Automated Detection
	of Application Performance Anomaly and Change},
  booktitle = {Dependable Systems and Networks With FTCS and DCC, 2008. DSN 2008.
	IEEE International Conference on},
  year = {2008},
  pages = {452--461},
  organization = {IEEE},
  file = {(2008) Anomaly？Application Change？or Workload Change？Towards Automated Detection of Application Performance Anomaly and Change.pdf:21_国外其他英文论文\\(2008) Anomaly？Application Change？or Workload Change？Towards Automated Detection of Application Performance Anomaly and Change.pdf:PDF},
  owner = {mariayh},
  pdf = {21_国外其他英文论文\(2008) Anomaly？Application Change？or Workload Change？Towards Automated Detection of Application Performance Anomaly and Change.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{El-Shishiny2008p182-187,
  author = {El-Shishiny, H. and Sobhy Deraz, S. and Badreddin, O. B. },
  title = {Mining software aging: A neural network approach},
  booktitle = {Proc. IEEE Symp. Computers and Communications ISCC 2008},
  year = {2008},
  pages = {182--187},
  doi = {10.1109/ISCC.2008.4625660},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@ARTICLE{el2008mining,
  author = {El-Shishiny, H. and Deraz, S. and Bahy, O.},
  title = {Mining Software Aging Patterns by Artificial Neural Networks},
  journal = {Artificial Neural Networks in Pattern Recognition},
  year = {2008},
  pages = {252--262},
  file = {(f-2008) Mining Software Aging Patterns by Artificial Neural Networks（Web Server）.pdf:21_国外其他英文论文\\(f-2008) Mining Software Aging Patterns by Artificial Neural Networks（Web Server）.pdf:PDF},
  publisher = {Springer},
  timestamp = {2012.02.28}
}

@INPROCEEDINGS{Grottke2008p1-6,
  author = {Grottke, M. and Matias, R. and Trivedi, K.S.},
  title = {The fundamentals of software aging},
  booktitle = {Software Reliability Engineering Workshops, 2008. ISSRE Wksp 2008.
	IEEE International Conference on},
  year = {2008},
  pages = {1--6},
  organization = {IEEE},
  file = {2008 - The fundamentals of software aging.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2008 - The fundamentals of software aging.pdf:PDF},
  owner = {mariayh},
  pdf = {01-研究组分类文章\11_Kishor S. Trivedi相关 _杜克大学\2008 - The fundamentals of software aging.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{guo2008web,
  author = {Guo, Y. and Sampath, S.},
  title = {Web application fault classification-an exploratory study},
  booktitle = {Proceedings of the Second ACM-IEEE international symposium on Empirical
	software engineering and measurement},
  year = {2008},
  pages = {303--305},
  organization = {ACM},
  file = {(2008) Web application fault classification-an exploratory study -web应用故障分类.pdf:21_国外其他英文论文\\(2008) Web application fault classification-an exploratory study -web应用故障分类.pdf:PDF},
  timestamp = {2012.02.21}
}

@INPROCEEDINGS{He2008p723-727,
  author = {Xin He and Wei Wei and Xiaolin Gui},
  title = {The Software Rejuvenation Model with Pre-start Technology},
  booktitle = {Proc. Int Information Processing (ISIP) Symp.s},
  year = {2008},
  pages = {723--727},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> aging related failures can be
	prevented by applying <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> technology. But the restart operation
	in the <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	phase makes the system unable to provide services, which leads to
	system unavailability. The <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> model with pre-start technology
	is therefore proposed to reduce downtime and improve availability
	by switching between active copy and backup copy, which can substitute
	for restart operation and resolve unavailability problem. First of
	all, the <span class='snippet'>rejuvenation</span> operation of model
	with pre-start technology is described and improvements on the conventional
	model are presented. Second, the model availability is calculated
	by Markov Regenerative process. And finally, according to the experimental
	results, current model proves to be more available than the conventional
	one.},
  doi = {10.1109/ISIP.2008.19},
  timestamp = {2012.02.20}
}

@ARTICLE{immonen2008survey,
  author = {Immonen, A. and Niemela, E.},
  title = {Survey of reliability and availability prediction methods from the
	viewpoint of software architecture},
  journal = {Software and Systems Modeling},
  year = {2008},
  volume = {7},
  pages = {49--65},
  number = {1},
  file = {软件可靠性和可用性预测:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\00- 综述性文章\\(2008) Survey of reliability and availability prediction methods from the viewpoint of software architecture.pdf:PDF},
  publisher = {Springer},
  review = {本文从软件体系结构的角度定义了一个框架可靠性和可用性分析比较的方法。该篇文章从构建水平比较了现有的能够用于可靠性和可用性预测的分析方法和技术，目的是要发现哪种可靠性和可用性的预测方法适合今天复杂的系统，这些方法的不足和怎么克服这些缺点。比较发现没有一个现存的方法完全满足以上框架中规定的要求。作者从不同角度揭示了新的可靠性和可用性分析方法的优越性。},
  timestamp = {2012.02.22},
  url = {http://www.springerlink.com/content/h2604n4724716445/}
}

@INPROCEEDINGS{Jia2008p1-6a,
  author = {Jia, Y.F. and Su, J.Y. and Cai, K.Y.},
  title = {A feedback control approach for software rejuvenation in a web server},
  booktitle = {Software Reliability Engineering Workshops, 2008. ISSRE Wksp 2008.
	IEEE International Conference on},
  year = {2008},
  pages = {1--6},
  organization = {IEEE},
  file = {(2008) A feedback control approach for software rejuvenation in a web server.pdf:01-研究组分类文章\\16-贾云飞                    _北航\\(2008) A feedback control approach for software rejuvenation in a web server.pdf:PDF},
  owner = {mariayh},
  pdf = {01-研究组分类文章\16-贾云飞 _北航\(2008) A feedback control approach for software rejuvenation in a web server.pdf},
  review = {不足：web server中运行不同的软件应用，就要有不同的算法、模型来控制},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Jia2008p241-246,
  author = {Yun-Fei Jia and Xiu-E Chen and Lei Zhao and Kai-Yuan Cai},
  title = {On the Relationship between Software Aging and Related Parameters
	(Short Paper)},
  booktitle = {Proc. Eighth Int. Conf. Quality Software QSIC '08},
  year = {2008},
  pages = {241--246},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> aging refers to the phenomenon
	that long-running <span class='snippet'>software</span> shows signs
	of increasing failing rate, overmuch resource usage, and performance
	degradation. <span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a proactive approach to dealing with this problem. However, commonly
	used <span class='snippet'>rejuvenation</span> methods involve a
	relatively larger overhead. An alternative is to reduce the severity
	of <span class='snippet'>software</span> aging by online adjusting
	the settings of related parameters of the system. In this paper,
	we conduct controlled experiments to analyze severity of <span class='snippet'>software</span>
	aging under different settings of related parameters. Based on the
	experimental data, a metric is defined to measure the severity of
	<span class='snippet'>software</span> aging. A multiple-input and
	multiple-output (MIMO) model is then constructed to formulate the
	relationship between severity of <span class='snippet'>software</span>
	aging and related parameter settings. The proposed MIMO model gives
	us a way to control the severity of <span class='snippet'>software</span>
	aging at runtime.},
  doi = {10.1109/QSIC.2008.54},
  file = {:01-研究组分类文章\\16-贾云飞                    _北航\\(2006) On the Relationship between Software Aging and Related Parameters （short paper）.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Jia2008p77-84,
  author = {Yun-Fei Jia and Lei Zhao and Kai-Yuan Cai},
  title = {A Nonlinear Approach to Modeling of Software Aging in a Web Server},
  booktitle = {Proc. 15th Asia-Pacific Software Engineering Conf. APSEC '08},
  year = {2008},
  pages = {77--84},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> aging refers to the phenomenon
	that the performance degradation, increasing failure rate or massive
	resource usage demonstrated in long-running <span class='snippet'>software</span>
	systems such as web servers. It was reported that <span class='snippet'>software</span>
	aging has a significant relationship with resource usage. To study
	the <span class='snippet'>software</span> aging phenomenon in web
	servers, we built an experimental platform with a server and multiple
	clients to collect the data of system resource usage on the server.
	In this paper, we present several experiments based on the platform
	and study <span class='snippet'>software</span> aging phenomenon
	of a widely used web server <span class='snippet'>software</span>
	system - the Apache HTTP server. Some repeatable <span class='snippet'>software</span>
	aging phenomena are observed in our experiments. The process of <span
	class='snippet'>software</span> aging is shown to be nonlinear and
	chaotic. In order to better present the nonlinear interplay of various
	resource parameters of web server and forecast resource exhaustion,
	a nonlinear dynamic model of <span class='snippet'>software</span>
	aging is constructed to formulate <span class='snippet'>software</span>
	aging process.},
  doi = {10.1109/APSEC.2008.38},
  file = {:01-研究组分类文章\\16-贾云飞                    _北航\\(2009) A Neural Network Approach to Forecasting Computing-Resource Exhaustion with Workload.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Kim2008p732-737,
  author = {Dong Seong Kim and Parvin, S. and Jong Sou Park},
  title = {Software Rejuvenation and Reconfiguration for Enhancing Survivability
	of Sensor Networks},
  booktitle = {Proc. 22nd Int. Conf. Advanced Information Networking and Applications
	- Workshops AINAW 2008},
  year = {2008},
  pages = {732--737},
  __markedentry = {[mariayh:]},
  abstract = {It is important to provide survivability of sensor networks in face
	of attacks in the network. In this paper, we focus on survivability
	modeling and enhancing of sensor networks through <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> and reconfiguration of
	sensor nodes in a cluster in the network. A specific action in <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	and reconfiguration is enforced to sensor node and it is possible
	to enhance survivability of sensor networks. We present a conceptual
	two level survivability model. The lower level presents how to define
	the state of each cluster in the network through a threshold function.
	The upper level presents probabilistic survivability of each cluster.
	We analyze proposed survivability model using proof of concept scenario
	examples and steady state analysis.},
  doi = {10.1109/WAINA.2008.231},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2008p1-6,
  author = {Koutras, V. P. and Platis, A. N. and Limnios, N. },
  title = {Availability and reliability estimation for a system undergoing minimal,
	perfect and failed rejuvenation},
  booktitle = {Proc. IEEE Int. Conf. Software Reliability Engineering Workshops
	ISSRE Wksp 2008},
  year = {2008},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, a <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	model is presented in which two different <span class='snippet'>rejuvenation</span>
	actions are considered, perfect and minimal. The concept of a failed
	<span class='snippet'>rejuvenation</span> action which leads the
	system to failure is also introduced. The presented model is studied
	under a Continuous Time Markov Chain (CTMC) framework and a maximum
	likelihood estimator of the generator matrix is presented. Based
	on this, estimators for instantaneous availability and reliability
	function are also presented. Moreover, the behavior of the above
	estimators is studied under various <span class='snippet'>rejuvenation</span>
	policies. A numerical example based on simulation results is finally
	presented.},
  doi = {10.1109/ISSREW.2008.5355519},
  pdf = {02-国际会议论文 书籍\2008 IEEE International Conference on Software Reliability Engineering Workshops(ISSRE)\V.P. Koutras- Availability and reliability estimation for a system undergoing minimal, perfect and failed rejuvenation.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2008p127-134,
  author = {Koutras, V. P. and Platis, A. N. },
  title = {Semi-Markov Availability Modeling of a Redundant System with Partial
	and Full Rejuvenation Actions},
  booktitle = {Proc. Third Int. Conf. Dependability of Computer Systems DepCos-RELCOMEX
	'08},
  year = {2008},
  pages = {127--134},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive maintenance technique to prevent failures in continuously
	running systems that experience <span class='snippet'>software</span>
	aging. In this paper, <span class='snippet'>rejuvenation</span> is
	modeled in a redundant computer system via a semi-Markov process
	in order to counteract <span class='snippet'>software</span> aging.
	The system can be switched into the standby unit automatically or
	manually in the case of a failure at the switching mechanism. Depending
	on the degradation of the system resources, the running node is either
	rejuvenated or continues serving and systempsilas steady-state availability
	is studied along with the optimal time to perform <span class='snippet'>rejuvenation</span>,
	which increases systempsilas availability. Moreover, an alternative
	<span class='snippet'>rejuvenation</span> modeling is introduced,
	in which two different actions; partial and full <span class='snippet'>rejuvenation</span>
	are performed according to the degradation level. The optimal <span
	class='snippet'>rejuvenation</span> policies for this case are also
	derived, leading the system to higher levels of availability.},
  doi = {10.1109/DepCoS-RELCOMEX.2008.13},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2008p95-103,
  author = {Koutras, V. P. and Platis, A. N. },
  title = {Modeling Perfect and Minimal Rejuvenation for Client Server Systems
	with Heterogeneous Load},
  booktitle = {Proc. 14th IEEE Pacific Rim Int. Symp. Dependable Computing PRDC
	'08},
  year = {2008},
  pages = {95--103},
  __markedentry = {[mariayh:]},
  abstract = {In the present study a client-server system is considered, which experiences
	resource degradation as clients' requests increase. <span class='snippet'>Software</span>
	<span class='snippet'>rejuvenation</span> is performed in order to
	counteract resource exhaustion. Two different levels of <span class='snippet'>rejuvenation</span>
	actions are implemented, perfect, and minimal. Moreover the concept
	of a failed <span class='snippet'>rejuvenation</span> is introduced
	to model the fact that <span class='snippet'>rejuvenation</span>
	due to some circumstances cannot be accomplished. As the load of
	such a system varies from hour to hour but reveals a cyclic behavior
	from day to day, different <span class='snippet'>rejuvenation</span>
	policies for each period of the day are proposed using a cyclic non-homogeneous
	Markov (CNHM) model. As a measure of performance, the steady-state
	expected downtime cost is considered. Additionally, to set off the
	need of CNHM modeling, the system is also modeled by a Homogeneous
	Markov Chain (HMC) and the performance results are compared.},
  doi = {10.1109/PRDC.2008.22},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2008p1-6,
  author = {Okamura, H. and Dohi, T. },
  title = {Availability optimization in operational software system with aperiodic
	time-based software rejuvenation scheme},
  booktitle = {Proc. IEEE Int. Conf. Software Reliability Engineering Workshops
	ISSRE Wksp 2008},
  year = {2008},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {This paper discusses an aperiodic time-based <span class='snippet'>rejuvenation</span>
	policy maximizing the steady-state system availability in operational
	<span class='snippet'>software</span> system. Under a fixed periodic
	checkpoint schedule, we develop an algorithm to derive the optimal
	aperiodic <span class='snippet'>rejuvenation</span> times based on
	dynamic programming. In numerical examples, the optimal <span class='snippet'>rejuvenation</span>
	time and its maximum availability are illustrated in the case where
	the system failure obeys the Weibull distribution.},
  doi = {10.1109/ISSREW.2008.5355516},
  pdf = {02-国际会议论文 书籍\2008 IEEE International Conference on Software Reliability Engineering Workshops(ISSRE)\H. Okamura- Availability optimization in operational software system with aperiodic time-based software rejuvenation scheme.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Parvin2008p295-300,
  author = {Parvin, S. and Dong Seong Kim and Jong Sou Park},
  title = {Towards Optimal Software Rejuvenation in Wireless Sensor Networks
	using Self-Regenerative Components},
  booktitle = {Proc. Int. Conf. Information Security and Assurance ISA 2008},
  year = {2008},
  pages = {295--300},
  __markedentry = {[mariayh:]},
  abstract = {The existing researchers on security for sensor networks have mostly
	concerned about only reconfiguration or only <span class='snippet'>rejuvenation</span>
	or both mechanisms for adaptation of sensor networks. In this paper
	we employ self-regenerative <span class='snippet'>software</span>
	components in order to perform optimal <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> in wireless sensor network
	with a view to increase the availability of sensor nodes in sensor
	networks. Here, the model uses self-regenerative capabilities for
	detecting misbehaving in node level and apply <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> in optimal time scheduling
	in order to extend the availability of sensor networks. In this paper
	we propose a general framework for optimal self-regenerative <span
	class='snippet'>rejuvenation</span> Scheduling. The security analysis
	shows the feasibility of our approach.},
  doi = {10.1109/ISA.2008.87},
  timestamp = {2012.02.20}
}

@ARTICLE{pop00107,
  author = {Y Tang and Q Gao and ...},
  title = {LeakSurvivor: towards safely tolerating memory leaks for garbage-collected
	languages},
  journal = {USENIX 2008 Annual Technical Conference on …},
  year = {2008},
  note = {10 cites: http://scholar.google.com/scholar?cites=5848861139320237697\&as_sdt=2005\&sciodt=0,5\&hl=en\&num=100},
  abstract = {Continuous memory leaks severely hurt program performance and software
	availability for garbage-collected programs. This paper presents
	a safe method, called LeakSurvivor, to tolerate continuous memory
	leaks at runtime for garbage-collected programs. Our main idea is
	to periodically swap out the "Potentially Leaked" (PL) memory objects
	identified by leak detectors from the virtual memory to disks. As
	a result, the virtual memory space occupied by the PL objects can
	be reclaimed by garbage collectors and available for future uses.
	If a swapped-out PL object is accesses later, LeakSurvivor will restore
	it from disks to the memory for correct program execution. Furthermore,
	LeakSurvivor helps developers to prune false positives.
	
	
	We have built the prototype of LeakSurvivor on top of Jikes RVM 2.4.2,
	a high performance Java-in-Java virtual machine developed by IBM.
	We conduct the experiments with three Java applications including
	Eclipse, SPECjbb2000 and Jigsaw. Among them, Eclipse and Jigsaw contain
	memory leaks introduced by their developers, while SPECjbb2000 contain
	a memory leak injected by us. Our results show that LeakSurvivor
	effectively tolerates memory leaks for two applications (Eclipse
	and SPECjbb2000), i.e., no cumulative performance degradation and
	no software failures when facing continuous memory leaks at runtime.
	For Jigsaw, LeakSurvivor extends the program lifetime by two times
	and improves the performance by 46% compared with native runs. Furthermore,
	when there are no memory leaks, LeakSurvivor imposes small runtime
	overhead, i.e., 2.5% over the leak detector and 23.7% over the native
	runs.},
  publisher = {dl.acm.org},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=1404040}
}

@INPROCEEDINGS{Rinsaka2008p1-6,
  author = {Rinsaka, K. and Dohi, T. },
  title = {Non-parametric predictive inference of adaptive software rejuvenation
	schedule},
  booktitle = {Proc. IEEE Int. Conf. Software Reliability Engineering Workshops
	ISSRE Wksp 2008},
  year = {2008},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {In this paper we develop an adaptive approach to estimate the optimal
	preventive rejuvenation schedule which maximizes the steady-state
	system availability. We formulate the upper and lower bounds of the
	predictive system availability using the one-look ahead predictive
	survival function from system failure time data, and derive the pessimistic
	and optimistic rejuvenation policies. Then, we derive adaptive rejuvenation
	policies from the original data together with a right-censored observation.},
  doi = {10.1109/ISSREW.2008.5355521},
  pdf = {02-国际会议论文 书籍\2008 IEEE International Conference on Software Reliability Engineering Workshops(ISSRE)\Koichiro Rinsaka-Non-parametric predictive inference of adaptive software rejuvenation schedule.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{shetty2008analysis,
  author = {Shetty, H. and Nambiar, M. and Kalita, H.},
  title = {Analysis and application of conditional software rejuvenation—A new
	approach},
  booktitle = {Software Reliability Engineering Workshops, 2008. ISSRE Wksp 2008.
	IEEE International Conference on},
  year = {2008},
  pages = {1--5},
  organization = {IEEE},
  file = {(2008) Analysis and application of conditional software rejuvenation—A new approach.pdf:21_国外其他英文论文\\(2008) Analysis and application of conditional software rejuvenation—A new approach.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Thein2008p1-4,
  author = {Thein, T. and Sang Min Lee and Sung-Do Chi and Jong Sou Park},
  title = {Survival of the internet applications: Proactive recovery model with
	virtualization},
  booktitle = {Proc. IEEE Int. Symp. Consumer Electronics ISCE 2008},
  year = {2008},
  pages = {1--4},
  __markedentry = {[mariayh:]},
  abstract = {Internet applications have been increasingly and widely used in every
	field in the society. On the other hand, the disruptions of services
	caused by <span class='snippet'>software</span> fault and hardware
	fault are more and more widespread. To improve the survivability
	of the Internet applications, we have conducted a study of virtualized
	clustering technology and <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> that follows a proactive fault-tolerant
	approach. In this paper, we present a virtualized two node cluster
	recovery model to increase the survivability level of Internet applications
	in which <span class='snippet'>software</span> and hardware failures
	occur. The system is modeled under Markov chains. Two different clustering
	systems are studied, traditional clustering system and virtualized
	clustering system, and compared in order to determine the best configuration
	which provides the highest level of survivability and availability.},
  doi = {10.1109/ISCE.2008.4559431},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Thein2008p281-285,
  author = {Thein, T. and Sung-Do Chi and Jong Sou Park},
  title = {Increasing Availability and Survivability of Cluster Head in WSN},
  booktitle = {Proc. 3rd Int. Conf. Grid and Pervasive Computing Workshops GPC Workshops
	'08},
  year = {2008},
  pages = {281--285},
  __markedentry = {[mariayh:]},
  abstract = {Recently WSN has become one of the most interesting networking technologies
	since it can be deployed without communication infrastructures. The
	cluster-based wireless sensor network (WSN) can enhance the whole
	network lifetime. In the clustered environment, the data gathered
	by the sensors is communicated to the base station (BS) through a
	hierarchy of cluster-heads (CHs). Once CH is destroyed, it is no
	longer operational and all common nodes belonging to that cluster
	lose communication ability. The CH plays an important role in aggregating
	and forwarding data sensed by other common nodes. Thus malfunctioning
	and/or compromised CH can lead to unreliable data delivery. To resolve
	this issue, we propose a recovery model to increase the availability
	and survivability of CH in WSN. In this paper, we present the redundant
	recovery model with <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>.
	The system is modeled under stochastic process. We calculate the
	availability and survivability of dual CH system using the solutions
	and find that proactive <span class='snippet'>rejuvenation</span>
	and reactive recovery approach can be used to improve the availability
	and survivability of CH in WSN.},
  doi = {10.1109/GPC.WORKSHOPS.2008.44},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Thein2008p855-860,
  author = {Thein, T. and Sung-Do Chi and Jong Sou Park},
  title = {Improving Fault Tolerance by Virtualization and Software Rejuvenation},
  booktitle = {Proc. Second Asia Int. Conf. Modeling \& Simulation AICMS 08},
  year = {2008},
  pages = {855--860},
  __markedentry = {[mariayh:]},
  abstract = {The phenomenon that the state of <span class='snippet'>software</span>
	degrades with time is known as <span class='snippet'>software</span>
	aging. The primary method to fight aging is <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>. This paper presents new
	ways of effective <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	using virtualization for addressing <span class='snippet'>software</span>
	aging. This new approach is meant to be the less disruptive as possible
	for the running service and to get a zero downtime in most of the
	cases. We construct the state transition models to describe the behaviors
	of virtualized and non- virtualized application server. We map through
	the <span class='snippet'>rejuvenation</span> actions to this transition
	model with stochastic process and express availability, downtime
	and downtime costs in terms of the parameters in our models. Our
	results show that virtualization and <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> can be used to prolong
	the availability of the services.},
  doi = {10.1109/AMS.2008.75},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Zhao2008p1371-1375,
  author = {Xufeng Zhao and Quan Sun and Lei Bao and Guang Yang and Cunhua Qian},
  title = {Research of Software Preventive Rejuvenation policy based on cumulative
	damage process},
  booktitle = {Proc. Chinese Control and Decision Conf. CCDC 2008},
  year = {2008},
  pages = {1371--1375},
  __markedentry = {[mariayh:]},
  abstract = {To counteract <span class='snippet'>software</span> aging more effectively,
	a new preventive <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy is proposed in this paper. This technique is implemented when
	additive consumption of resources has reached level <i>Z</i>(0 &lt;
	<i>Z</i> les <i>K</i>), it is different from the conventional measurement-based
	<span class='snippet'>rejuvenation</span> policy, because <span class='snippet'>software</span>
	system is in low-efficient state and will face high-risk crash probability
	causing high-cost <span class='snippet'>rejuvenation</span> when
	additive consumption of resources has reached the threshold level
	<i>K</i>. As an important resource, physical memory is considered,
	and its consumption caused by aging-related bugs could be known by
	tests made at periodic times nT(n = 1, 2, hellip). Using the theory
	of cumulative processes, expected cost is obtained, and an optimal
	level Z* which minimizes it is analytically discussed.},
  doi = {10.1109/CCDC.2008.4597542},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Zhao2008p261-265,
  author = {Long Zhao and QinBao Song},
  title = {Availability and Cost Analysis of a Fault-Tolerant Software System
	with Rejuvenation},
  booktitle = {Proc. Int. Conf. Advanced Computer Theory and Engineering ICACTE
	'08},
  year = {2008},
  pages = {261--265},
  __markedentry = {[mariayh:]},
  abstract = {In recent years, remarkable attention has been paid to <span class='snippet'>software</span>
	aging phenomena, in which the performance of <span class='snippet'>software</span>
	systems degrades with time. <span class='snippet'>Software</span>
	aging may eventually leads to transient crash/hang failures. The
	well-known technique of <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> can be regarded as the most effective
	procedure to counteract the aging phenomena. In this paper, the concept
	of common <span class='snippet'>software</span>-aging-related faults
	in fault-tolerant systems is proposed. Then the common faults defined
	are integrated into a behavior model of a double-version fault-tolerant
	<span class='snippet'>software</span> system. The dependability measures,
	such as availability, cost, and the availability to cost ratio, are
	evaluated as bivariate functions using continuous time Markov chain
	(CTMC). Finally, the effects of common <span class='snippet'>software</span>-aging-related
	faults are investigated based on several numerical examples.},
  doi = {10.1109/ICACTE.2008.115},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Zhao2008p327-331,
  author = {Long Zhao and QinBao Song and Lei Zhu},
  title = {Common Software-Aging-Related Faults in Fault-Tolerant Systems},
  booktitle = {Proc. Int Computational Intelligence for Modelling Control \& Automation
	Conf},
  year = {2008},
  pages = {327--331},
  __markedentry = {[mariayh:]},
  abstract = {In recent years, remarkable attention has been focused on <span class='snippet'>software</span>
	aging phenomena, in which the performance of <span class='snippet'>software</span>
	systems degrades with time. Fault-tolerant <span class='snippet'>software</span>
	systems which provide high assurance may suffer from such phenomena.
	Based on the common <span class='snippet'>software</span>-aging-related
	faults in fault-tolerant systems, a behavior model of a double-version
	fault-tolerant <span class='snippet'>software</span> system is established
	using Markov reward model. The performance of the system such as
	expected service rate in steady state is evaluated and the sensitivity
	analysis of some parameters is performed.},
  doi = {10.1109/CIMCA.2008.113},
  file = {(2008) Common Software-Aging-Related Faults in Fault-Tolerant Systems.pdf:22_国内其他英文论文\\(2008) Common Software-Aging-Related Faults in Fault-Tolerant Systems.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Alonso2009p264-269,
  author = {Alonso, J. and Torres, J. and Gavald{\`a}, R.},
  title = {Predicting Web Server Crashes： A Case Study in comparing prediction
	algorithms},
  booktitle = {Fifth International Conference on Autonomic and Autonomous Systems,
	2009. ICAS'09.},
  year = {2009},
  pages = {264--269},
  organization = {IEEE},
  file = {(2009 Javier Alonso) Predicting Web Server Crashes： A Case Study in Comparing Prediction Algorithms.pdf:01-研究组分类文章\\14_Javier Alonso             _西班牙 加泰罗尼亚科技大学\\(2009 Javier Alonso) Predicting Web Server Crashes： A Case Study in Comparing Prediction Algorithms.pdf:PDF},
  owner = {mariayh},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Du2009p240-245,
  author = {Xiaozhi Du and Yong Qi and Di Hou and Ying Chen and Xiao Zhong},
  title = {Modeling and Performance Analysis of Software Rejuvenation Policies
	for Multiple Degradation Systems},
  booktitle = {Proc. 33rd Annual IEEE Int. Computer Software and Applications Conf.
	COMPSAC '09},
  year = {2009},
  volume = {1},
  pages = {240--245},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive and proactive technology to counteract the phenomenon
	of <span class='snippet'>software</span> aging and system failures
	and to improve the system reliability. In this paper we present and
	analyze three <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policies for an operational <span class='snippet'>software</span>
	system with multiple degradations, called preemptive <span class='snippet'>rejuvenation</span>,
	delayed <span class='snippet'>rejuvenation</span> and mixed <span
	class='snippet'>rejuvenation</span>. These policies consider both
	history data and current running state, and the <span class='snippet'>rejuvenation</span>
	action is triggered on the basis of predetermined performance threshold
	and <span class='snippet'>rejuvenation</span> interval respectively.
	Continuous-time Markov chains are used to describe the analytic models.
	To evaluate these polices expediently, we utilize deterministic and
	stochastic Petri nets to solve the models. Numerical results show
	that the deployment of <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> in the system leads to significant
	improvement in availability and throughput. These three <span class='snippet'>rejuvenation</span>
	policies are better than the standard <span class='snippet'>rejuvenation</span>
	policy, and the mixed policy is the best one.},
  doi = {10.1109/COMPSAC.2009.39},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Du2009p376-383,
  author = {Xiaozhi Du and Yong Qi and Di Hou and Ying Chen and Xiao Zhong},
  title = {A Mixed Software Rejuvenation Policy for Multiple Degradations Software
	System},
  booktitle = {Proc. 11th IEEE Int. Conf. High Performance Computing and Communications
	HPCC '09},
  year = {2009},
  pages = {376--383},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive and proactive technology to counteract the phenomenon
	of <span class='snippet'>software</span> aging and system failures,
	and to improve the system reliability. In this paper we present a
	mixed <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy for an operational <span class='snippet'>software</span> system
	with multiple degradation states, which considers both the history
	information and the current running state. By this policy, the system
	is rejuvenated when it achieves to a degradation threshold or it
	comes to the pre-determined <span class='snippet'>rejuvenation</span>
	interval. For comparison, standard <span class='snippet'>rejuvenation</span>
	policy is also discussed. Continuous-time Markov chains are used
	to describe the multiple degradation states model. To evaluate these
	polices expediently, we utilize deterministic and stochastic Petri
	nets (DSPN) to solve the models. Numerical results show that the
	deployment of <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	in the system leads to significant improvement in availability and
	throughput. And the mixed <span class='snippet'>rejuvenation</span>
	policy is better than the standard <span class='snippet'>rejuvenation</span>
	policy.},
  doi = {10.1109/HPCC.2009.18},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Jiang2009p435-439,
  author = {Letian Jiang and Xiangyu Peng and Guozhi Xu},
  title = {Software Rejuvenation Practice},
  booktitle = {Proc. WRI World Congress Software Engineering WCSE '09},
  year = {2009},
  volume = {3},
  pages = {435--439},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> is playing a more and more important
	role in a system, and more and more studies show that system failures
	are more due to <span class='snippet'>software</span> faults than
	due to hardware faults. Therefore, <span class='snippet'>software</span>
	reliability has been one of the hottest research topics. Recently,
	a phenomenon, "<span class='snippet'>software</span> aging" is reported.
	In order to counteract this phenomenon, a proactive technique, "<span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>"
	is presented. In this paper, we attempt to give an investigation
	on <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>,
	including <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	process, <span class='snippet'>rejuvenation</span> approaches and
	some practice.},
  doi = {10.1109/WCSE.2009.168},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{khatchadourian2009pointcut,
  author = {Khatchadourian, R. and Greenwood, P. and Rashid, A. and Xu, G.},
  title = {Pointcut rejuvenation: Recovering pointcut expressions in evolving
	aspect-oriented software},
  booktitle = {Proceedings of the 2009 IEEE/ACM International Conference on Automated
	Software Engineering},
  year = {2009},
  pages = {575--579},
  organization = {IEEE Computer Society},
  __markedentry = {[mariayh:]},
  abstract = {Pointcut fragility is a well-documented problem in Aspect-Oriented
	Programming; changes to the base-code can lead to join points incorrectly
	falling in or out of the scope of pointcuts. In this paper, we present
	an automated approach that limits fragility problems by providing
	mechanical assistance in pointcut maintenance. The approach is based
	on harnessing arbitrarily deep structural commonalities between program
	elements corresponding to join points selected by a pointcut. The
	extracted patterns are then applied to later versions to offer suggestions
	of new join points that may require inclusion. To illustrate that
	the motivation behind our proposal is well founded, we first empirically
	establish that join points captured by a single pointcut typically
	portray a significant amount of unique structural commonality by
	analyzing patterns extracted from twenty-three AspectJ programs.
	Then, we demonstrate the usefulness of our technique by rejuvenating
	pointcuts in multiple versions of three of these programs. The results
	show that our parameterized heuristic algorithm was able to accurately
	and automatically infer the majority of new join points in subsequent
	<span class='snippet'>software</span> versions that were not captured
	by the original pointcuts.},
  doi = {10.1109/TSE.2011.21},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2009p99-106,
  author = {Koutras, V. P. and Salagaras, C.-P. S. and Platis, A. N. },
  title = {Software Rejuvenation for Higher Levels of VoIP Availability and
	Mean Time to Failure},
  booktitle = {Proc. Fourth Int. Conf. Dependability of Computer Systems DepCos-RELCOMEX
	'09},
  year = {2009},
  pages = {99--106},
  __markedentry = {[mariayh:]},
  abstract = {Recently, voice over Internet protocol (VoIP) has become an evolutionary
	technology in the communication area. Despite its innovative nature,
	VoIP faces some problems such as resource degradation on the server
	supporting the system. In this paper a VoIP system consisting of
	the main parts that can affect the VoIP service such as SIP servers,
	routers, ISP internet service provider, firewalls and finally the
	electrical power is studied. To counteract the aforementioned problems
	concerning servers we propose to adopt <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>. <span class='snippet'>Rejuvenation</span>
	is a proactive technique that can be periodically adopted to prevent
	<span class='snippet'>software</span> failures. Our main aim is to
	determine how VoIP availability and reliability can be affected by
	<span class='snippet'>rejuvenation</span>. Continuous time Markov
	chain (CTMC) is used to model systempsilas function while asymptotic
	availability and mean time to failure (MTTF) when <span class='snippet'>rejuvenation</span>
	is performed are determined. Moreover we are interested on the optimal
	<span class='snippet'>rejuvenation</span> policy that improves systempsilas
	performance.},
  doi = {10.1109/DepCoS-RELCOMEX.2009.21},
  timestamp = {2012.02.20}
}

@ARTICLE{pezze2009handling,
  author = {PEZZE, M.},
  title = {Handling Software Faults with Redundancy},
  journal = {Architecting Dependable Systems VI},
  year = {2009},
  publisher = {Springer},
  timestamp = {2012.02.28}
}

@INPROCEEDINGS{Rui2009p451-455,
  author = {Shi Rui and You Jing and Sun Yuqiang and Wang Hongyuan},
  title = {The Relationship Research between Usage of Resource and Performance
	of Computer System},
  booktitle = {Proc. WRI World Congress Software Engineering WCSE '09},
  year = {2009},
  volume = {3},
  pages = {451--455},
  doi = {10.1109/WCSE.2009.169},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@ARTICLE{thein2009availability,
  author = {Thein, T. and Sou Park, J.},
  title = {Availability analysis of application servers using software rejuvenation
	and virtualization},
  journal = {Journal of computer science and technology},
  year = {2009},
  volume = {24},
  pages = {339--346},
  number = {2},
  abstract = {Demands on software reliability and availability have increased tremendously
	due to the nature of present day applications. We focus on the aspect
	of software for the high availability of application servers since
	the unavailability of servers more often originates from software
	faults rather than hardware faults. The software rejuvenation technique
	has been widely used to avoid the occurrence of unplanned failures,
	mainly due to the phenomena of software aging or caused bytransient
	failures. In this paper, first we present a new way of using the
	virtual machine based software rejuvenation named VMSR to offer high
	availability for application server systems. Second we model a single
	physical server which is used to host multiple virtual machines (VMs)
	with the VMSR framework using stochastic modeling and evaluate it
	through both numerical analysis and SHARPE (Symbolic Hierarchical
	Automated Reliability and Performance Evaluator) toolsimulation.
	This VMSR model is very general and can capture application server
	characteristics, failure behavior, and performability measures. Our
	results demonstrate that VMSR approach is a practical way to ensure
	uninterrupted availability and to optimize performance for aging
	applications.},
  publisher = {Springer},
  timestamp = {2012.02.28}
}

@INPROCEEDINGS{Thein2009p605-610,
  author = {Thein, T. and Sang Min Lee and Jong Sou Park},
  title = {Improved Method for Secure and Survivable Wireless Sensor Networks},
  booktitle = {Proc. 11th Int. Conf. Computer Modelling and Simulation UKSIM '09},
  year = {2009},
  pages = {605--610},
  __markedentry = {[mariayh:]},
  abstract = {The survivability of the wireless sensor network (WSN) is threatened
	by resource limitations and security attacks. Security and survivability
	of WSNs are receiving increasing attention, particularly critical
	infrastructure protection. Our goal is to develop a framework for
	secure and survivable WSN that can provide essential services in
	the presence of attacks and failures, and recovery of full services
	in a timely manner. To achieve such a goal, we propose a framework
	of survivability model with <span class='snippet'>rejuvenation</span>
	methodology for WSNs. This paper also outlines the interaction of
	survivability, security and fault tolerance, so that we can effectively
	analyze and design the secure and survivable WSNs. The system is
	modeled under Markov chain and numerical results are included to
	show the performance of the proposed methods. It will be one of the
	approaches for improving the survivability level in WSN environment.},
  doi = {10.1109/UKSIM.2009.52},
  timestamp = {2012.02.20}
}

@ARTICLE{陈锦富2009软件错误注入测试技术研究,
  author = {陈锦富 and 卢炎生 and 谢晓东},
  title = {软件错误注入测试技术研究},
  journal = {Journal of Software},
  year = {2009},
  volume = {20},
  pages = {1425--1443},
  number = {6},
  file = {(2009) 软件错误注入测试技术研究  （软件学报）.pdf:05-抗衰补充 实验等\\(2009) 软件错误注入测试技术研究  （软件学报）.pdf:PDF},
  timestamp = {2012.02.28}
}

@INPROCEEDINGS{Alonso2010p507-516,
  author = {Alonso, J. and Torres, J. and Berral, J.L. and Gavalda, R.},
  title = {Adaptive on-line software aging prediction based on machine learning},
  booktitle = {Dependable Systems and Networks (DSN), 2010 IEEE/IFIP International
	Conference on},
  year = {2010},
  pages = {507--516},
  organization = {IEEE},
  file = {(2010 Javier Alonso) Adaptive on-line software aging prediction based on machine learning.pdf:01-研究组分类文章\\14_Javier Alonso             _西班牙 加泰罗尼亚科技大学\\(2010 Javier Alonso) Adaptive on-line software aging prediction based on machine learning.pdf:PDF},
  pdf = {01-研究组分类文章\14_Javier Alonso _西班牙 加泰罗尼亚科技大学\(2010 Javier Alonso) Adaptive on-line software aging prediction based on machine learning.pdf},
  timestamp = {2012.02.20}
}

@TECHREPORT{chu2010review,
  author = {Chu, T.L. and Yue, M. and Martinez-Guridi, G. and Lehner, J.},
  title = {Review of Quantitative Software Reliability Methods},
  institution = {BROOKHAVEN NATIONAL LABORATORY (BNL)},
  year = {2010},
  file = {软件可靠性量化方法综述:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\00- 综述性文章\\(2010-R) Review of Quantitative Software Reliability Methods.pdf:PDF},
  review = {本文对数字系统风险研究做了介绍，对当前定量分析软件可靠性的方法做了回顾，旨在着录描述能够被用作量化软件故障率和数字系统的失效概率的可能方法。回顾软件可靠性量化方法的目的是获得可用方法（尤其是那些强调量化软件故障率的方法）的全面知识。}
}

@INPROCEEDINGS{Ge2010p-,
  author = {Junwei Ge and Shanfeng Chen and Yiqiu Fang},
  title = {Sever performance degradation analysis based on average load chaotic
	time series forecast},
  booktitle = {Proc. Int Computer Application and System Modeling (ICCASM) Conf},
  year = {2010},
  volume = {3},
  __markedentry = {[mariayh:]},
  abstract = {A long-running Web <span class='snippet'>software</span> system may
	lead to the exhaustion of resources, which cause performance degradation.
	To solve that problem, needs to predict the crucial resources using
	situation, and then carry out the proper <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> strategies. At first, this
	paper identify the average load chaotic character which can be described
	by using G-P algorithm to analyze correlation dimension changing
	with embedding dimension, then get the largest Lyapunov exponent
	through small data method and build chaotic time series prediction
	model based on largest Lyapunov exponent for average load time series.
	The experimental results show that the prediction model can precisely
	make short-time prediction to the Web server's load, which can efficiently
	estimate the performance degradation situation and provide foundation
	for the <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>.},
  doi = {10.1109/ICCASM.2010.5620029},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Grottke2010p447-456,
  author = {Grottke, M. and Nikora, A.P. and Trivedi, K.S.},
  title = {An empirical investigation of fault types in space mission system
	software},
  booktitle = {Dependable Systems and Networks (DSN), 2010 IEEE/IFIP International
	Conference on},
  year = {2010},
  pages = {447--456},
  organization = {IEEE},
  file = {f-2010-An empirical investigation of fault types in space mission system software.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\f-2010-An empirical investigation of fault types in space mission system software.pdf:PDF},
  owner = {mariayh},
  pdf = {01-研究组分类文章\11_Kishor S. Trivedi相关 _杜克大学\f-2010-An empirical investigation of fault types in space mission system software.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Guo2010p80-83,
  author = {Jun Guo and Weiyue Li and Xinya Song and Bin Zhang and Yunsheng Wang},
  title = {Software Rejuvenation Strategy Based on Components},
  booktitle = {Proc. Second World Congress Software Engineering (WCSE)},
  year = {2010},
  volume = {2},
  pages = {80--83},
  __markedentry = {[mariayh:]},
  abstract = {Since Component-Based <span class='snippet'>Software</span> Development
	technology has been widely used, traditional <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> strategy seems too rough
	on solving Component-<span class='snippet'>Software</span> aging,
	the whole system will be regenerated even only a few components aging,
	which leads to high cost of <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> and reduces the stability
	of the system. Therefore, we propose a component-based <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> strategy and we make components
	be the objects of <span class='snippet'>rejuvenation</span>. The
	aging components will be rejuvenated when <span class='snippet'>software</span>
	ages. In this paper, the process of judging <span class='snippet'>software</span>
	aging and <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	are described, then we propose the methods of judging <span class='snippet'>software</span>
	aging, determining the sequence that the aging components to be rejuvenated
	and rejuvenating components. Finally, an experiment is done to certify
	the efficiency of the strategy.},
  doi = {10.1109/WCSE.2010.113},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{HlaMyint2010p156-162,
  author = {Hla Myint, M. T. and Thein, T. },
  title = {Availability Improvement in Virtualized Multiple Servers with Software
	Rejuvenation and Virtualization},
  booktitle = {Proc. Fourth Int Secure Software Integration and Reliability Improvement
	(SSIRI) Conf},
  year = {2010},
  pages = {156--162},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> aging often affects the performance
	of a <span class='snippet'>software</span> system and eventually
	causes it to fail. To highlight the aging problems in long running
	applications, we have conducted the study of <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> approach and virtualization
	technology in this paper. In order to reduce the downtime during
	<span class='snippet'>rejuvenation</span> interval, <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> and virtualization technology
	are combined in this paper. Virtualization allows multiple operating
	system instances to run concurrently on a single physical machine.
	In this paper, we map virtualization based <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> approach with Markov Chain
	process and get mathematical steady-state solutions of the chain.
	We model multiple physical servers which are used to host multiple
	virtual machines (VMs) using stochastic modeling and evaluate it
	through both numerical analysis and SHARPE (Symbolic Hierarchical
	Automated Reliability and Performance Evaluator) tool simulation.
	The numerical results show that <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> and virtualization can
	be used to prolong the availability of the services and reduce the
	downtime of the systems.},
  doi = {10.1109/SSIRI.2010.19},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Jiang2010p114-117,
  author = {Letian Jiang and Xiangyu Peng and Guozhi Xu},
  title = {Time and Prediction based Software Rejuvenation Policy},
  booktitle = {Proc. Second Int Information Technology and Computer Science (ITCS)
	Conf},
  year = {2010},
  pages = {114--117},
  __markedentry = {[mariayh:]},
  abstract = {Operational <span class='snippet'>software</span> systems often experience
	an &#x201C;aging&#x201D; phenomenon, characterized by progressive
	performance degradation and a sudden hang/crash failure. <span class='snippet'>Software</span>
	<span class='snippet'>rejuvenation</span> is a proactive fault-tolerance
	strategy aimed to prevent unexpected outages due to aging. Existing
	<span class='snippet'>rejuvenation</span> approaches can be largely
	classified into two types: Purely Time based <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> policy (PTSRP) and Purely
	Prediction based <span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	policy (PPSRP). In this paper, combining the merits of these two
	policies, a new <span class='snippet'>rejuvenation</span> policy,
	Time and Prediction based <span class='snippet'>Software</span> <span
	class='snippet'>Rejuvenation</span> Policy (TPSRP), is proposed.
	In this policy, time based <span class='snippet'>rejuvenation</span>
	policy is performed from the system's start or restart, during which
	prediction based policy is also employed. To evaluate the effectiveness
	of this new policy, system availability and Downtime cost is adopted
	and a stochastic reward net model is built. Numerical results show
	that under the same conditions, TPSRP can achieve higher availability
	and lower downtime cost than both the PTSRP and PPSRP.},
  doi = {10.1109/ITCS.2010.34},
  timestamp = {2012.02.20}
}

@MASTERSTHESIS{linyijie2010Rejuvenation,
  author = {林已杰},
  title = {一种基于马尔科夫和神经网络的软件衰退预测方法研究},
  school = {西南大学},
  year = {2010},
  file = {(2010) 一种基于马尔科夫和神经网络的软件衰退预测方法研究 (西南大学 硕士论文).pdf:23_国内其他中文论文\\(2010) 一种基于马尔科夫和神经网络的软件衰退预测方法研究 (西南大学 硕士论文).pdf:PDF},
  timestamp = {2012.03.15}
}

@INPROCEEDINGS{Machida2010p1-6,
  author = {Machida, F. and Dong Seong Kim and Trivedi, K. S. },
  title = {Modeling and analysis of software rejuvenation in a server virtualized
	system},
  booktitle = {Proc. IEEE Second Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2010},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {As server virtualization is used as an essential <span class='snippet'>software</span>
	infrastructure of various <span class='snippet'>software</span> services
	such as cloud computing, availability management of server virtualized
	system is becoming more significant. Although time-based <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> is useful to postpone/prevent
	failures due to <span class='snippet'>software</span> aging in a
	server virtualized system, the <span class='snippet'>rejuvenation</span>
	schedules for virtual machine (VM) and virtual machine monitor (VMM)
	need to be determined in a proper way for the VM availability, since
	VMM <span class='snippet'>rejuvenation</span> affects VMs running
	on the VMM. This paper presents analytic models using stochastic
	reward nets for three time-based <span class='snippet'>rejuvenation</span>
	techniques of VMM; (i) Cold-VM <span class='snippet'>rejuvenation</span>
	in which all VMs are shut down before the VMM <span class='snippet'>rejuvenation</span>,
	(ii) Warm-VM <span class='snippet'>rejuvenation</span> in which all
	VMs are suspended before the VMM <span class='snippet'>rejuvenation</span>
	and (iii) Migrate-VM <span class='snippet'>rejuvenation</span> in
	which all VMs are moved to the other host server during the VMM <span
	class='snippet'>rejuvenation</span>. We compare the three techniques
	in terms of steady-state availability and the number of transactions
	lost in a year. We find the optimal combination of <span class='snippet'>rejuvenation</span>
	trigger intervals for each <span class='snippet'>rejuvenation</span>
	technique by a gradient search method. The numerical analysis shows
	the interesting result that Warm-VM <span class='snippet'>rejuvenation</span>
	does not always outperform Cold-VM <span class='snippet'>rejuvenation</span>
	in terms of steady-state availability depending on <span class='snippet'>rejuvenation</span>
	trigger intervals. Migrate-VM <span class='snippet'>rejuvenation</span>
	is better than the other two as long as live VM migration rate is
	large enough and the other host server has a capacity to accept the
	migrated VM.},
  doi = {10.1109/WOSAR.2010.5722098},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{magalhaes2010detection,
  author = {Magalhaes, J.P. and Silva, L.M.},
  title = {Detection of performance anomalies in web-based applications},
  booktitle = {Network Computing and Applications (NCA), 2010 9th IEEE International
	Symposium on},
  year = {2010},
  pages = {60--67},
  organization = {IEEE},
  abstract = {Performance management and dependability are two of the fundamental
	issues in business-critical applications. The ability to detect the
	occurrence of performance failures and anomalies has raised the attention
	of researchers in the last years. It is in fact a difficult problem,
	since a visible change in the performance can result from some natural
	cause (e.g., workload variations, upgrades) or by some internal anomaly
	or fault that may end up in a performance failure or application
	crash. Distinguish between the two scenarios is the goal of the framework
	presented in this paper. Our framework is targeted for web-based
	and component-based applications. It makes use of AOP-based monitoring,
	data correlation techniques and time-series alignment algorithms
	to spot the occurrence of performance anomalies avoiding false alarms
	due to workload variations. The paper includes some experimental
	results that show the effectiveness of our techniques under the occurrence
	of dynamic workloads and some fault-load situations.
	
	性能管理和可靠性是业务关键的应用的两个基础问题。在过去的几年中，性能失效和异常检测能力已经引起了研究者的关注。实际上，这是个困难的问题，因为性能变化可能是由于负载变化或升级等自然、正常的因素引起的，也可能由会导致性能失效或应用崩溃的内部异常或故障引起的。该文利用基于AOP的监测器、数据相关性技术和时序分析（alignment定位）算法来识别性能异常，避免负载改变导致的false
	alarm。实验结果显示本文方法的有效性},
  file = {(2010) Detection of performance anomalies in web-based applications.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2010) Detection of performance anomalies in web-based applications.pdf:PDF},
  review = {we also presented a framework targeted for detection, localization
	and recovery from performance anomalies in web applications. Our
	framework is able to distinguish a performance anomaly from a workload
	variation. In some scenarios it is also able to identify the system
	or applications parameters that are associated with the performance
	anomaly. This root-cause analysis is crucial do select the most appropriate
	recovery technique. These projects represent important advances but
	there is still a high potential to work on techniques to estimate
	and identify how multiple related parameters may result in a performance
	or a crash failure.
	
	该文提出了一个框架，旨在检测、定位和恢复web应用软件中的性能异常。该框架能够从负载变化中区分开性能异常。在一些场景中，该框架也能够识别出与性能异常相关的系统或应用参数（导致性能异常的参数？根源？）。这种根本原因分析对选择最合适的恢复技术很关键。
	
	
	这些工作由很重要的优势，但仍有很大的潜力来研究评估、识别多关联参数如何会导致性能异常或崩溃失效的技术},
  timestamp = {2012.03.09}
}

@INPROCEEDINGS{Magalhães2010p1-7,
  author = {Magalhães, J.P. and Silva, L.M.},
  title = {Prediction of Performance Anomalies in Web-Applications Based-on
	Software Aging Scenarios},
  booktitle = {Software Aging and Rejuvenation (WoSAR), 2010 IEEE Second International
	Workshop on},
  year = {2010},
  pages = {1--7},
  organization = {IEEE},
  abstract = {The topic of this paper is about prediction of performance anomalies
	caused by software aging. We have developed a framework for detection
	of performance anomalies that is targeted to web and component-based
	applications. In this study, we selected some amount of historical
	data previously collected and we conducted a correlation analysis
	with this data. The resulting dataset was then submitted to some
	Machine-Learning (ML) classification algorithms. The best algorithms
	were selected according to the accuracy
	
	and precision. In a second step, we induced some synthetic aging scenarios
	(memory leaks and CPU contention) in the application and we tried
	to do estimation of the system parameters by using time-series analysis.
	With the estimated values we conducted a classification with the
	three previous ML algorithms. From the initial results we observed
	that combining the estimation of parameters supported by time-series
	models withML classification techniques provides some good results
	on the prediction of performance anomalies.We also observed that
	there is no single ML algorithm that can be applied effectively to
	predict the response time for all the web-transactions.
	
	本文选取一定数量的历史数据，用这些数据构建相关性分析（特征提取？），分析结果被提交给一些机器学习分类算法。根据准确度和预测能力，挑选出最佳机器学习分类算法。接着，在web应用软件中诱导（induce）一些复合衰退场景（内存泄露和CPU竞争），用时序分析方法估计系统参数。利用时序分析方法的估计结果（估计值），该文用上述的3种机器学习算法进行分类。初步结果说明：组合时序分析模型提供的参数估计和机器学习分类算法，提供一些好的预测性能异常的结果；同时，作者也观察到没有单一的机器学习算法能够有效的预测所有web事务的响应时间。},
  file = {(2010) Prediction of Performance Anomalies in Web-Applications Based-on  Software Aging Scenarios.pdf:01-研究组分类文章\\13_Luis Silva & A.Andrzejak  _葡萄牙 科英布拉大学\\(2010) Prediction of Performance Anomalies in Web-Applications Based-on  Software Aging Scenarios.pdf:PDF},
  owner = {mariayh},
  pdf = {01-研究组分类文章\13_Luis Silva & A.Andrzejak _葡萄牙 科英布拉大学\(2010) Prediction of Performance Anomalies in Web-Applications Based-on Software Aging Scenarios.pdf},
  review = {1、研究动机
	
	 预测web和基于组件的应用软件中不确定性软件衰退导致的性能异常的发生。
	
	2、评议
	
	 首先，在训练阶段，该文选取一定量的历史数据进行相关性分析，得到应用软件的响应时间和工作负载之间的相关系数，据此准备训练数据集和测试数据集，然后利用不同的机器学习分类算法（如决策树、神经网络）训练分类器，根据算法的准确度和预测能力挑选出最佳机器学习分类算法；接着，实时监测阶段，在web应用软件中诱导（induce）一些复合的衰退场景（如内存泄露和CPU竞争），用时序分析方法（如ARMA模型）估计实时采集的系统参数，最后用上述机器学习算法分类器对时序分析的结果进行分类，预测被监测的应用软件是否会发生性能异常。初步结果说明：组合时序分析模型提供的参数估计和机器学习分类算法，提供一些好的预测性能异常的结果；同时，作者也观察到没有单一的机器学习算法能够有效的预测所有web事务的响应时间。
	
	 1）采集的参数：剩余JVM内存（可用JVM内存）、应用服务器中运行的线程数、系统可用的文件描述器（file descriptors）、应用服务器上运行的class数、web服务器接收的网络字节数、web服务器发送的网络字节数、从硬盘读的字节数、写硬盘的字节数、闲置的CPU比率、运行队列中运行的进程数（num.
	of processes running in the run-queue）、运行队列中阻塞的进程数、运行队列中新进的进程数、每个用户事务的请求数（Transaction_#）、类标签{绿、黄、红}
	
	3、要解决的问题：
	
	 In all this context, this particular work is driven by the
	
	following questions:
	
	• which machine learning (ML) classification algorithms are the best
	to describe the behavior of an application?
	
	• how to forecast multiple system/application parameters for subsequent
	classification?
	
	• how much confidence do we obtain from the forecast & classification
	technique to predict performance anoma-
	
	lies?
	
	4、实验结果说明的问题
	
	 1）没有单一的机器学习算法能够有效的预测所有web事务的响应时间。
	
	 2）做参数预测时，应该考虑结合不同的时序模型，来处理时间和负载会发生的变化。
	
	5、未来工作
	
	 扩展本文的方法，考虑fault-load故障负载和更复杂的实验},
  timestamp = {2012.02.20}
}

@ARTICLE{Matias2010p102-114,
  author = {Matias, R. and Barbetta, P.A. and Trivedi, K.S. and others},
  title = {Accelerated degradation tests applied to software aging experiments},
  journal = {IEEE Transactions on Reliability},
  year = {2010},
  volume = {59},
  pages = {102--114},
  number = {1},
  abstract = {In the past ten years, the software aging phenomenon has been systematically
	researched, and recognized by both academic, and industry communities
	as an important obstacle to achieving dependable software systems.
	One of its main effects is the depletion of operating system resources,
	causing system performance degradation or crash/hang failures in
	running applications. When conducting experimental studies to evaluate
	the operational reliability of systems suffering from softwareaging,
	long periods of runtime are required to observe system failures.
	Focusing on this problem, we present a systematic approach to accelerate
	the software aging manifestation to reduce the experimentation time,
	and to estimate the lifetime distribution of the investigated system.
	First, we introduce the concept of "aging factor" that offers a fine
	control of the aging effects at the experimental level. The aging
	factors are estimated via sensitivity analysesbased on the statistical
	design of experiments. Aging factors are then used together with
	the method of accelerated degradation test to estimate the lifetime
	distribution of the system under test at various stress levels. This
	approach requires us to estimate a relationship model between stress
	levels and aging degradation. Such models are called stress-accelerated
	aging relationships. Finally, the estimated relationship models enable
	us to estimate the lifetimedistribution under use condition. The
	proposed approach is used in estimating the lifetime distribution
	of a web server with software aging symptoms. The main result is
	the reduction of the experimental time by a factor close to 685 in
	comparison with experiments executed without the use of our technique.},
  file = {2010_Accelerated Degradation Tests Applied to Software Aging Experiments（IEEE Tran）.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2010_Accelerated Degradation Tests Applied to Software Aging Experiments（IEEE Tran）.pdf:PDF},
  publisher = {IEEE},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Matias2010p211-219,
  author = {Matias, R. and Trivedi, K. S. and Maciel, P. R. M. },
  title = {Using Accelerated Life Tests to Estimate Time to Software Aging Failure},
  booktitle = {Proc. IEEE 21st Int Software Reliability Engineering (ISSRE) Symp},
  year = {2010},
  pages = {211--219},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> aging is a phenomenon defined
	as the continuing degradation of <span class='snippet'>software</span>
	systems during runtime, being particularly noticeable in long-running
	applications. Aging-related failures are very difficult to observe,
	because the accumulation of aging effects usually requires a long-term
	execution. Thus, collecting a statistically significant sample of
	times to aging-related failures so as to estimate the system's lifetime
	distribution is a very hard task. This is an important problem that
	prevents many experimental and analytical studies, mainly those focused
	on modeling of <span class='snippet'>software</span> aging aspects,
	of using representative parameter values. In this paper we propose
	and evaluate the use of quantitative accelerated life tests (QALT)
	to reduce the time to obtain the lifetime distribution of systems
	that fail due to <span class='snippet'>software</span> aging. Since
	QALT was developed for hardware failures, in this paper, we adapt
	it to <span class='snippet'>software</span> aging experiments. We
	test the proposed approach experimentally, estimating the lifetime
	distribution of a real web server system. The accuracy of the estimated
	distribution is evaluated by comparing its reliability estimates
	with a sample of failure times observed from the real system under
	test. The mean time to failure calculated from the real sample falls
	inside the 90% confidence interval constructed from the estimated
	lifetime distribution, demonstrating the high accuracy of the estimated
	model. The proposed approach reduces the time required to obtain
	the failure times by a factor of seven, for the real system investigated.},
  doi = {10.1109/ISSRE.2010.42},
  pdf = {01-研究组分类文章\11_Kishor S. Trivedi相关 _杜克大学\2010_ Using Accelerated Life Tests to Estimate Time to Software Aging Failure.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Matias2010p211-219a,
  author = {Matias, R. and Trivedi, K.S. and Maciel, P.R.M.},
  title = {Using accelerated life tests to estimate time to software aging failure},
  booktitle = {Software Reliability Engineering (ISSRE), 2010 IEEE 21st International
	Symposium on},
  year = {2010},
  pages = {211--219},
  organization = {IEEE},
  file = {2010_ Using Accelerated Life Tests to Estimate Time to Software Aging Failure.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2010_ Using Accelerated Life Tests to Estimate Time to Software Aging Failure.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Naksinehaboon2010p499-506,
  author = {Naksinehaboon, N. and Taerat, N. and Leangsuksun, C. and Chandler,
	C. F. and Scott, S. L. },
  title = {Benefits of Software Rejuvenation on HPC Systems},
  booktitle = {Proc. Int Parallel and Distributed Processing with Applications (ISPA)
	Symp},
  year = {2010},
  pages = {499--506},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Rejuvenation</span> is a technique expected
	to mitigate failures in HPC systems by replacing, repairing, or resetting
	system components. Because of the small overhead required by <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>,
	we primarily focus on OS/kernel <span class='snippet'>rejuvenation</span>.
	In this paper, we propose three <span class='snippet'>rejuvenation</span>
	scheduling techniques. Moreover, we investigate the claim that <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	prolongs failure times in HPC systems. Also, we compare the lost
	computing times of the checkpoint/restart mechanism with and without
	<span class='snippet'>rejuvenation</span> after each checkpoint.},
  doi = {10.1109/ISPA.2010.82},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2010p1-6,
  author = {Okamura, H. and Dohi, T. },
  title = {Performance-aware software rejuvenation strategies in a queueing
	system},
  booktitle = {Proc. IEEE Second Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2010},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {This paper deals with the performance analysis of a queueing system
	with <span class='snippet'>rejuvenation</span> controls. In particular,
	we describe the arrival process by the Markov-modulated Poisson process
	(MMPP) and consider a gradually degraded sever system. Under this
	situation, we discuss the system throughput of the queueing system
	and the optimal <span class='snippet'>rejuvenation</span> strategy
	maximizing the throughput based on the semi-Markov decision process
	in the case where the arrival and service rates are observable.},
  doi = {10.1109/WOSAR.2010.5722099},
  pdf = {02-国际会议论文 书籍\01_2010 IEEE 2nd International Workshop on Software Aging and Rejuvenation (WoSAR)\H.Okamura_ Performance-aware software rejuvenation strategies in a queueing system.pdf},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Pengfei2010p155-159,
  author = {Chen Pengfei and Qi Yong},
  title = {Resource-Aware Component Scheduling Rejuvenation Model Using Lagrangian
	Relaxation},
  booktitle = {Proc. 7th Web Information Systems and Applications Conf. (WISA)},
  year = {2010},
  pages = {155--159},
  __markedentry = {[mariayh:]},
  abstract = {As the time of system running increases, the performance of the system
	will decrease. This phenomenon is called <span class='snippet'>software</span>
	aging. Recently <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	as an efficient method to counteract <span class='snippet'>software</span>
	aging emerges. This method recovers the performance of the system
	through cleaning the internal state of system. Now component-oriented
	programming concept has been proposed and spreaded. And <span class='snippet'>software</span>
	system based on component emerges. These components with different
	function not only promote <span class='snippet'>software</span> reusability
	and self-management but also <span class='snippet'>software</span>
	reliability and availability. This paper demonstrates a <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> model based on resource-aware
	component optimized scheduling to realize <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> and avoid system crashing.
	In this paper we give the Lagrangian Relaxation component scheduling
	algorithm under single constrained condition and multi constrained
	condition. Then we test the algorithm and evaluate the model. Comparing
	system reboot, this <span class='snippet'>rejuvenation</span> model
	reduces MTTR (mean time to recover) very much. So the continuity
	of the service is promoted and the cost of downtime is decreased.},
  doi = {10.1109/WISA.2010.13},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Platis2010p1-6,
  author = {Platis, A. N. and Koutras, V. P. },
  title = {Software rejuvenation on a PKI},
  booktitle = {Proc. IEEE Second Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2010},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {One of the major issues for PKI-based mechanisms is the validity of
	user's certificate. In order to examine whether a certificate is
	valid or not, the PKI Certificate Authority (CA) has to check the
	most recent Certificate Revocation List (CRL) that maintains. But
	the CRL is not always available when is needed. In such a case the
	problem to be solved is whether to proceed to a transaction or abandon
	it. One of the main reasons for CRL's unavailability is the CA's
	server unavailability. In this paper we innovatively propose to adopt
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	to reduce the probability that CA's cannot issue the CRL. Using a
	Markovbased model, an indicator is derived, concerning the cost of
	security incidents and abandoned transactions The aim of the present
	work consists firstly in defining a threshold under which a transaction
	can be accomplished even without checking the CRL and secondly in
	scheduling <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	on CA's server such that the total operational cost is minimized).},
  doi = {10.1109/WOSAR.2010.5722102},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Reinecke2010p1-6,
  author = {Reinecke, P. and Wolter, K. },
  title = {A simulation study on the effectiveness of restart and rejuvenation
	to mitigate the effects of software ageing},
  booktitle = {Proc. IEEE Second Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2010},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {We study the effectiveness of client-side restart and server-side
	<span class='snippet'>rejuvenation</span> on a system that suffers
	from <span class='snippet'>software</span> ageing due to memory leaks.
	An implicit and an explicit model for <span class='snippet'>software</span>
	ageing are studied. We consider system and service unavailability
	as measures for the availability of the server.},
  doi = {10.1109/WOSAR.2010.5722100},
  pdf = {02-国际会议论文 书籍\01_2010 IEEE 2nd International Workshop on Software Aging and Rejuvenation (WoSAR)\Philipp Reineche-A simulation study on the effectiveness of restart and rejuvenation to mitigate the effects of software ageing.pdf},
  timestamp = {2012.02.20}
}

@ARTICLE{salfner2010survey,
  author = {Salfner, F. and Lenk, M. and Malek, M.},
  title = {A survey of online failure prediction methods},
  journal = {ACM Computing Surveys (CSUR)},
  year = {2010},
  volume = {42},
  pages = {10},
  number = {3},
  abstract = {With the ever-growing complexity and dynamicity of computer systems,
	proactive fault management is an effective approach to enhancing
	availability. Online failure prediction is the key to such techniques.
	In contrast to classical reliability methods, online failure prediction
	is based on runtime monitoring and a variety of models and methods
	that use the current state of a system and, frequently, the past
	experience as well. This survey describes these methods. To capture
	the wide spectrum of approaches concerning this area, a taxonomy
	has been developed, whose different approaches are explained and
	major concepts are described in detail.},
  file = {(2010) A survey of online failure prediction methods  _ACM.pdf:21_国外其他英文论文\\(2010) A survey of online failure prediction methods  _ACM.pdf:PDF},
  publisher = {ACM},
  review = {预防性故障管理：在线故障预测综述
	
	1）研究动机
	
	计算机系统变得越来越复杂，他们也在动态的变化，归结于设备的移动性、运行环境的改变、频繁的更新和升级、在线修复、删减系统组件和系统/网络自身的复杂性。经典的可靠性理论和传统的方法很少能考虑系统实际的状态，因此不能响应运行时系统的动态性和失效过程。这些方法比较适合设计用于average行为预测和比较分析。因此，有必要研究在线失效预测技术。
	
	 第8-9页提出可用于评估预测算法正确性的数学公式：},
  timestamp = {2012.02.21}
}

@ARTICLE{simeonov2010proactive,
  author = {Simeonov, D. and Avresky, DR},
  title = {Proactive software rejuvenation based on machine learning techniques},
  journal = {Cloud Computing},
  year = {2010},
  pages = {186--200},
  __markedentry = {[mariayh:]},
  abstract = {This work presents a framework for detecting anomalies in servers
	leading to crash such as memory leaks in aging systems and proactively
	rejuvenating them. 
	
	Proactive VM-rejuvenation framework has been extended with machine
	learning techniques. Utilization of the framework is allowing the
	effect of software failures virtually to be reduced to zero downtime.
	It can be applied against internal anomalies like memory leaks in
	the web servers and external as Denial of Service Attacks. The framework
	has been implemented with virtual machines and a machine learning
	algorithm has been realized for successfully determining a decision
	rule for proactively initiating the system rejuvenation. The proposed
	framework has been theoretically justified and experimentally validated.},
  file = {(2010) Proactive software rejuvenation based on machine learning techniques.pdf:21_国外其他英文论文\\(2010) Proactive software rejuvenation based on machine learning techniques.pdf:PDF},
  publisher = {Springer},
  review = {1、研究动机
	
	 本文在[1]提出的虚拟机抗衰框架之上扩展的理由：（文[1] Moura Silva, L.; Alonso, J.; Silva,
	P.; Torres, J. & Andrzejak, A. "Using Virtualization to Improve Software
	Rejuvenation". Proc. Sixth IEEE Int. Symp. Network Computing and
	Applications NCA 2007, 2007, 33-44)
	
	 文[1]只简单的依赖从虚拟机（与主虚拟机相对）当前的CPU使用(是否到阈值)，决定是否需要对它执行抗衰（，意思是：决定要抗衰的时候，以CPU使用情况，如负载，判定软件当前适不适合实施抗衰？）。这种做法可能对检测内存泄露有效，但有如下不足：
	
	1）丢弃了很多对后续提炼抗衰决策规则可能有用的参数。因此，一个参数不足以判定。而且，不能保证根据经验选择的阈值适用于所有场景。比如，存在的一些攻击和作业可能保持CPU使用一直居高不下，这将会阻止抗衰的实施;
	
	2)不考虑历史（前一些times）的情况。而只有当综合（in times combined）考虑若干连续的采样时间点软件的情况，才能识别有些攻击和复杂的异常。
	
	 那么本文引入机器学习算法，希望解决上述不足，并达到如下目的：
	
	1）在Lasso Regularization（线性回归方法）之上，引入其他机器学习算法，以处理那些复杂的、非线性的会导致软件崩溃的异常行为。可以极大地降低伪肯定和伪否定。
	
	2）预防多种类型的异常同时出现的复杂情况
	
	2、如何找到解决方案
	
	1）制造让软件易失效的异常，采集样本——>
	
	2）给每个样本点打标（“标记”：从当前时刻到软件失效的时间）便于提取用其他参数预测软件失效的时间的规则——>
	
	3）汇聚：可能为解决文[1]第二个不足，将一段时期的采样点进行汇聚，汇聚样本点中加入一些描述这段时间的参数的动态性的参数（如每个参数的平均斜率就构成了汇聚样本点））——>
	
	4）特征提取：加入汇聚点各参数后，参数集合很庞大了，维数非常高，计算复杂度就提高了；而有些参数可能与有些衰退情况无关；同时为了保障决策规则在一定维数上收敛，需要对汇聚样本点进行降维、特征提取。采用Lasso
	Regularization方法，Lasso Regularization的结果是汇聚样本点每个参数的权重。
	
	5）决策规则应用：用支持向量机、标准最小二乘法等机器学习算法提取抗衰决策规则：何时软件会失效，需抗衰。通过计算汇聚样本点和Lasso
	Regularization输出的权重的点积来训练决策规则。（第5步未在本文实现）
	
	
	3、不足
	
	本文使用的参数{内存使用情况（总内存、已使用内存、剩余内存）、交换空（总量、已使用、剩余）、CPU使用情况（）}
	
	 训练分类器需要大量衰退数据，而衰退难以再现，因此衰退数据难以获取。
	
	4、评议
	
	本文扩展了文[1]提出的基于虚拟化技术的抗衰框架，加入Lasso Regularization算法，提取web server异常检测需要的关键指标，降低问题空间的复杂度和维数。本文的方法可以随意增加用于备份的虚拟机，且可以基于机器学习算法可靠地预测软件失效的时间。作者实现了一个机器学习算法，用于成功的选定用于主动触发抗衰活动的规则。本文提出的方法可以检测衰退的系统中引起服务器崩溃的异常，如内存泄露。作者对提出的框架进行了实验验证。
	
	 他用机器学习算法根据历史数据离线训练virtual slave是否需要抗衰（抗衰预测和决策）。怎么做的呢？
	
	5、未来工作
	
	 1）Lasso Regularization是线性回归，对于非线性的、更复杂的行为，需要用标准最小二乘法、决策树等机器学习算法，在Lasso
	Regularization之上，进行学习，以降低分类器的FP、FN。
	
	 2）学习多种异常的分类器。机器学习方法依赖于异常数据，异常数据不完备，就不能识别其他的、未知的异常。如：学习到了检测内存泄露、拒绝服务攻击的分类器，可以再学习二者同时出现的分类器},
  url = {http://books.google.com.hk/books?id=AWRvJ0wF0fAC&pg=PA186&lpg=PA186&dq=Software+Aging+cloud&source=bl&ots=e9UoO9vfpR&sig=KOzC5Ayc6UEcNOE7c32GYj3fatc&hl=zh-CN&sa=X&ei=ay5OT7WiCMyeiQfd28Bc&ved=0CFMQ6AEwBg#v=onepage&q&f=false}
}

@INPROCEEDINGS{Wu2010p71-74,
  author = {Qinge Wu and Yong Qi and XiaoNing Du and ZhenYu Han},
  title = {A New Rejuvenation Approach of Software Aging},
  booktitle = {Proc. Int Optoelectronics and Image Processing (ICOIP) Conf},
  year = {2010},
  volume = {1},
  pages = {71--74},
  __markedentry = {[mariayh:]},
  abstract = {In order to effectively use the resources of <span class='snippet'>software</span>
	systems, increase the availability and reliability of system, this
	paper discusses the rational allocation of resources, and studies
	the <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	time. For the reasons that the resources are exhausted to result
	in attenuation of system performance and decline of processing capacity,
	the existing literature only had analyzed the memory resource, but
	they all did not discuss the allocation circs of CPU and memory that
	are the main resources to affect the performance of system, however,
	this paper will study these problems. The simulation gives the optimal
	<span class='snippet'>rejuvenation</span> time intervals and change
	tendency of application server under different allocation of resources
	and CPU resource thresholds, as well as analyses the boundary conditions
	of optimal <span class='snippet'>rejuvenation</span> time.},
  doi = {10.1109/ICOIP.2010.164},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Yang2010p46-53,
  author = {Menghui Yang and Zhituo Li and Weikang Yang and Tonghong Li},
  title = {Analysis of Software Rejuvenation in Clustered Computing System with
	Dependency Relation between Nodes},
  booktitle = {Proc. IEEE 10th Int Computer and Information Technology (CIT) Conf},
  year = {2010},
  pages = {46--53},
  __markedentry = {[mariayh:4]},
  abstract = {This paper investigates <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> policy for the clustered computing
	system with dependency relation between nodes, and reconstructs a
	SRN model for the <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	in clustered computing system which considers both having different
	node types and having dependency relation between nodes. Numerical
	simulations of the new model shows that the <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> strategy can significantly
	decrease failure rate and increase the availability of the system,
	and also shows that dependencies between nodes have impact on <span
	class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	policy.},
  doi = {10.1109/CIT.2010.52},
  file = {（2010） Analysis of Software Rejuvenation in Clustered Computing System with Dependency Relation between Nodes.pdf:01-研究组分类文章\\23- 国内其他团队 - 人大 清华\\（2010） Analysis of Software Rejuvenation in Clustered Computing System with Dependency Relation between Nodes.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Zhang2010p138-140,
  author = {Jing Zhang and Xuejiao Gao and Ying Duan},
  title = {Research and Discussion on Software Safety and Reliability},
  booktitle = {Proc. Second World Congress Software Engineering (WCSE)},
  year = {2010},
  volume = {2},
  pages = {138--140},
  doi = {10.1109/WCSE.2010.35},
  file = {软件安全性与可靠性之间的区别:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\00- 综述性文章\\(2010) Research and Discussion on Software Safety and Reliability .pdf:PDF},
  review = {本文简略地介绍了软件安全和软件可靠性并且分析了它们之间的关系。在这篇文章中，作者首先对软件安全作了回顾，其中包括软件安全的定义、软件安全分析的目的、软件安全分析的特性和软件安全分析的步骤，然后，作者又对软件可靠性作了回顾，其中包括软件可靠性的定义、软件可靠性的主要内容、软件可靠性的保证。最后，作者介绍了软件安全和软件可靠性二者之间的区别。},
  timestamp = {2012.02.22},
  url = {http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=5718364}
}

@INPROCEEDINGS{Zhao2010p1-6,
  author = {Jing Zhao and Trivedi, K. S. and YanBin Wang and XiaoYong Chen},
  title = {Evaluation of software performance affected by aging},
  booktitle = {Proc. IEEE Second Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2010},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {A number of studies have reported the phenomenon of &#x201C;<span
	class='snippet'>Software</span> aging&#x201D;, characterized by progressive
	<span class='snippet'>software</span> performance degradation. This
	is mainly caused by the exhaustion of the combination of system resources.
	Traditionally, modeling and analysis of <span class='snippet'>software</span>
	aging has been restricted to a single resource aging. The combined
	effect of <span class='snippet'>software</span> aging due to the
	interaction of several resources remains to be explored. A BP network
	model for the evaluation of <span class='snippet'>software</span>
	performance affected by aging is proposed in this paper, and then
	a robust locally weighted regression algorithm is presented to identify
	the inflexion point. The shape of performance curve changes greatly
	at the inflexion point, which makes it easy to determine when to
	perform <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>.
	Experimental results based on actual data sets verify the proposed
	model effectiveness in evaluation of the <span class='snippet'>software</span>
	performance.},
  doi = {10.1109/WOSAR.2010.5722093},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Zhao2010p1-6a,
  author = {Zhao, J. and Trivedi, K.S. and Wang, Y.B. and Chen, X.Y.},
  title = {Evaluation of software performance affected by aging},
  booktitle = {Software Aging and Rejuvenation (WoSAR), 2010 IEEE Second International
	Workshop on},
  year = {2010},
  pages = {1--6},
  organization = {IEEE},
  file = {2010_Evaluation of Software Performance Affected by Aging.pdf:01-研究组分类文章\\11_Kishor S. Trivedi相关  _杜克大学\\2010_Evaluation of Software Performance Affected by Aging.pdf:PDF},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Alonso2011p163-170,
  author = {Alonso, J. and Belanche, L. and Avresky, D. R.},
  title = {Predicting Software Anomalies Using Machine Learning Techniques},
  booktitle = {Proc. 10th IEEE Int Network Computing and Applications (NCA) Symp},
  year = {2011},
  pages = {163--170},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, we present a detailed evaluation of a set of well-known
	Machine Learning classifiers in front of dynamic and non-deterministic
	<span class='snippet'>software</span> anomalies. The system state
	prediction is based on monitoring system metrics. This allows <span
	class='snippet'>software</span> proactive <span class='snippet'>rejuvenation</span>
	to be triggered automatically. Random Forest approach achieves validation
	errors less than 1% in comparison to the well-known ML algorithms
	under a valuation. In order to reduce automatically the number of
	monitored parameters, needed to predict <span class='snippet'>software</span>
	anomalies, we analyze Lasso Regularization technique jointly with
	the Machine Learning classifiers to evaluate how the prediction accuracy
	could be guaranteed within an acceptable threshold. This allows to
	reduce drastically (around 60% in the best case) the number of monitoring
	parameters. The framework, based on ML and Lasso regularization techniques,
	has been validated using an ecommerce environment with Apache Tomcat
	server, and MySql database server.},
  doi = {10.1109/NCA.2011.29},
  file = {(2011 Javier Alonso) Predicting Software Anomalies Using Machine Learning Techniques.pdf:01-研究组分类文章\\14_Javier Alonso             _西班牙 加泰罗尼亚科技大学\\(2011 Javier Alonso) Predicting Software Anomalies Using Machine Learning Techniques.pdf:PDF},
  pdf = {01-研究组分类文章\14_Javier Alonso _西班牙 加泰罗尼亚科技大学\(2011 Javier Alonso) Predicting Software Anomalies Using Machine Learning Techniques.pdf},
  review = {一、心得
	
	1）研究动机
	
	预测资源耗竭引起的软件异常（如软件衰退）并非易事，因为：
	
	 a.随时间演变的、逐渐的资源消耗可能是非线性的（如周期性）
	
	 b.退化趋势会随时间变化[7].
	
	 c.性能异常还可能与负载甚至负载的类型有关（平均负载、瞬时负载）
	
	 d.使预测资源耗竭更复杂的是：如果我们改变监测资源的角度、粒度/间隔，衰退现象看起来会很不一样。尤其是使用有虚拟资源的情况下。
	
	 e.另一个预测软件异常的困难是服务失效可能同时涉及两个或多个资源[4]
	
	 f.我们不知道这些参数涉及软件衰退的先验知识。
	
	目的：分析机器学习算法预测资源耗竭引起的衰退导致的系统崩溃的能力。
	
	 a.预测剩余寿命（time until crash，非剩余可用寿命，因为没考虑可用性）是为了知道触发抗衰活动前还有多少时间。但预测精确或近似的剩余寿命太难了，为此，作者改变了预测的角度：检测未来的和即将来临的崩溃（warning警告：橙色警报和危险：红色警报），而不是估计精确的剩余寿命（time-to-failure）。把告警检测作为出发自动抗衰的关键因素。
	
	评价6中well-known分类器：R statistical language[9],Rpart（Decision Tree）[10],Naive
	Bayes[11],Support Vector machines Classifiers[12],K-nearest neighbors(knn)[11],Random
	Forest(RF,随机森林)[13]和LDA（线性决策分析）/QDA（二次决策分析）
	
	 b.在使用机器学习算法预测前，使用Lasso正规化技术，自动特征提取，在不影响预测准确度的情况下，减少参数数目[14-16],因为：现有系统的复杂度使得要知道系统的状态，需要监测成百上千个系统参数。参数的数目直接影响了机器学习算法生成的模型的构建成本和复杂度；监测的参数的数目也使得监测任务和the
	overhead introduced复杂化。
	
	 c.需要分析监测参数的数目和预测准确度之间的平衡（trade-off）
	
	
	随机森林方法（高效的分类与特征选取方法）被证实比机器学习错误少1%
	
	1、评价指标选取：用lasso regularization结合机器学习方法，减少监测指标数目。（用于预测软件异常？）
	
	2、预测动态的、不确定的软件异常，以自动触发预防性、积极主动的软件抗衰策略},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Alonso2011p250-259,
  author = {Alonso, J. and Goiri, I. and Guitart, J. and Gavalda, R. and Torres,
	J. },
  title = {Optimal Resource Allocation in a Virtualized Software Aging Platform
	with Software Rejuvenation},
  booktitle = {Proc. IEEE 22nd Int Software Reliability Engineering (ISSRE) Symp},
  year = {2011},
  pages = {250--259},
  __markedentry = {[mariayh:]},
  abstract = {Nowadays, virtualized platforms have become the most popular option
	to deploy complex enough services. The reason is that virtualization
	allows resource providers to increase resource utilization. Deployed
	services are expected to be always available, but these long-running
	services are especially sensitive to suffer from <span class='snippet'>software</span>
	aging phenomenon. This term refers to an accumulation of errors,
	which usually causes resource exhaustion, and eventually makes the
	service hang/crash. To counteract this phenomenon, a preventive approach
	to fault management, called <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> has been proposed. In this
	paper, we propose a framework which provides transparent and predictive
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	to web services that suffer <span class='snippet'>software</span>
	aging on virtualized platforms, achieving high levels of availability.
	To exploit the provider resources, the framework also seeks to maximize
	the number of services running simultaneously on the platform, while
	guaranteeing the resources needed by each service.},
  doi = {10.1109/ISSRE.2011.30},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Alonso2011p26-31,
  author = {Alonso, Javier and Matias, Rivalino and Vicente, Elder and Carvalho,
	Ana M. and Trivedi, Kishor},
  title = {A Comparative Evaluation of Software Rejuvenation Strategies},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {26--31},
  __markedentry = {[mariayh:]},
  abstract = {In this paper we present an experimental comparative study of most
	of the <span class='snippet'>rejuvenation</span> techniques developed
	so far, divided into two groups: i) simple approaches: physical node
	reboot (switch off/on), VM reboot, OS reboot and standalone application
	restart, and ii) sophisticated methods: OS fast reboot, and application
	restart with hot standby mode. In our experiments we evaluate the
	availability and performance overheads incurred by <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span>. We also analyze the selected
	<span class='snippet'>rejuvenation</span> techniques efficiency to
	mitigate the aging effects. We inject memory leaks at application
	level to simulate the aging effects. The results show that the availability
	and performance overheads introduced by the <span class='snippet'>rejuvenation</span>
	strategies are specific to the granularity level.},
  doi = {10.1109/WoSAR.2011.16},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Andrade2011p161-168,
  author = {Andrade, E. C. and Machida, F. and Dong-Seong Kim and Trivedi, K.
	S. },
  title = {Modeling and Analyzing Server System with Rejuvenation through SysML
	and Stochastic Reward Nets},
  booktitle = {Proc. Sixth Int Availability, Reliability and Security (ARES) Conf},
  year = {2011},
  pages = {161--168},
  doi = {10.1109/ARES.2011.28},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Araujo2011p38-43,
  author = {Araujo, Jean and Matos, Rubens and Maciel, Paulo and Vieira, Francisco
	and Matias, Rivalino and Trivedi, Kishor S. },
  title = {Software Rejuvenation in Eucalyptus Cloud Computing Infrastructure:
	A Method Based on Time Series Forecasting and Multiple Thresholds},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {38--43},
  note = {文中第2页提到了几个常见的时序分析方法，有空看一看},
  __markedentry = {[mariayh:2]},
  abstract = {The need for reliability and availability has increased in modern
	applications, in order to handle rapidly growing demands while providing
	uninterrupted service. Cloud computing systems fundamentally provide
	access to large pools of data and computational resources through
	a variety of interfaces similarly to existing grid and HPC resource
	management and programming systems. This work proposes an approach
	that uses time series to schedule <span class='snippet'>rejuvenation</span>,
	so as to reduce the downtime by predicting the proper moment to perform
	the <span class='snippet'>rejuvenation</span>.We show the results
	of our approach through experiments using the Eucalyptus cloud computing
	framework.},
  doi = {10.1109/WoSAR.2011.18},
  file = {(2011) Software Rejuvenation in Eucalyptus Cloud Computing Infrastructure：A Method Based on Time Series Forecasting and Multiple Thresholds (3rd WoSAR).pdf:01-研究组分类文章\\22- 巴西  云计算\\(2011) Software Rejuvenation in Eucalyptus Cloud Computing Infrastructure：A Method Based on Time Series Forecasting and Multiple Thresholds (3rd WoSAR).pdf:PDF},
  review = {1）动机
	
	分析在云计算平台中，不同的抗衰策略的效果。
	
	本文的抗衰决策是在文“R. Matias and P. J. F. Filho. An Experimental Study on
	Software Aging and Rejuvenation in Web Servers, Proc. 30th Annual
	Int. Computer Software and Applications Conf. (COMPSAC '06), 2006,1:
	189-196”的基础上扩展的。
	
	 上文中的抗衰策略是发个信号给Apache主进程，由apache主进程杀掉它管辖的所有空闲进程，再创建新的进程。这对服务的影响很小，因为主线程等待已建立的连接关闭。然而，创建新的进程替代老的进程，会导致5秒钟左右的宕机。
	
	 在生产环境中，进程重启的间隔应该尽可能大，来避免长的运行时期间累计许多小的宕机期。有一种方法是单纯的基于阈值方法决策抗衰策略，即高频率地监测节点控制器（NC）进程的内存使用情况，达到指定的阈值，就触发抗衰策略。因采样间隔太小的话，会影响系统性能；所以这个采样间隔也应该尽可能大，因此把1分钟的间隔作为最小持续时间；但是采样间隔大，又会出现在两个采样时间点之间，内存达到上限、并崩溃，产生额外的宕机的情况（称之为monitor-caused
	downtime）。
	
	
	2）如何找到解决方案的？
	
	 为了解决monitor-caued downtime，该文提出的抗衰决策机制主要使用基于阈值的方法，在它之上增加了预测成分：预测何时会达到内存使用的上限（CMU，critical
	memory utilization）。因此本文的方法具有两类抗衰决策方法的特点：在基于阈值的抗衰决策基础上，增加了预测的成分。
	
	
	3）本文的方法
	
	基于时序分析法的预测 + 多阈值预测衰退、制定抗衰策略。在多个时序分析方法间选择，采用错误测量方法，评估最适合监测环境的方法。（又是拟合啊，为啥不搞个自学习的呢？）
	
	4）评议
	
	 本文提出了一个基于时序趋势分析的方法来减少抗衰活动执行期间的宕机时间。该抗衰安排（schedule）主要采用基于阈值的方法，但在此之上，为了避免monitor-caused
	downtime，增加了预测的成分。论文以一个Eucalyptus云间算框架搭建的私有云为实验对象，该私有云上被施压了一定的负载，会使节点控制器的虚拟内存使用达到阈值（critical
	limits）。抗衰策略用于避免系统不可用，通过在系统因内存使用受限（如耗尽）而结束前的一个合适的时间，安排进程重启。
	
	 为了最小化抗衰活动执行期间的宕机时间，该文用实验初七获取的样本数据构建了时序。然后根据时序分析结果，该文评估衰退活动应该执行的最优时间（考虑到虚拟内存以一定模式增长）。实验结果显示该文策略的准确性，而且减少了Eucalyptus云计算环境80%的宕机时间。
	
	 作者提出未来的工作是将本文的时序分析方法用于最小化不同环境的宕机时间，如数据中心和传统的应用服务器。
	
	5）本文的不足
	
	 虽然构建了时序，但是只有监测到资源使用达到critical limits的80%时，才开始计算时序趋势（达到critical limits阈值的时间）；然后到达critical
	limits的95%时，预测终止，开始准备实施抗衰策略。
	
	 如果，达到80%之前，负载等环境发生突变，服务就垮了呢？阈值是如何定的？
	
	 只针对了内存泄露，预测内存会损耗的时间（失效时间），没有考虑性能和业务遭受的影响。应该在业务受到影响的时候，就执行一定级别的抗衰，恢复业务，或将业务转给其他虚拟机。},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{araujo2011software,
  author = {Araujo, J. and Matos, R. and Maciel, P. and Matias, R.},
  title = {Software aging issues on the eucalyptus cloud computing infrastructure},
  booktitle = {Systems, Man, and Cybernetics (SMC), 2011 IEEE International Conference
	on},
  year = {2011},
  pages = {1411--1416},
  organization = {IEEE},
  __markedentry = {[mariayh:2]},
  abstract = {Demands on software reliability and availability have increased due
	to the nature of present day applications. Cloud computing systems
	fundamentally provide access to large pools of data and computational
	resources through a variety of interfaces similarly to existing grid
	and HPC resource management and programming systems. This work investigates
	the software aging effects on the Eucalyptus cloud computing infrastructure
	considering workloads composed of provisioning different types of
	virtual machines.},
  file = {（2011）Software aging issues on the eucalyptus cloud computing infrastructure.pdf:01-研究组分类文章\\22- 巴西  云计算\\（2011）Software aging issues on the eucalyptus cloud computing infrastructure.pdf:PDF},
  review = {1）本文研究动机
	
	从C/S结构到多层架构、web services，分布式应用原来越多。云计算平台是典型的提供数据、计算资源的分布式架构。文中提到的eucalyptus是一种私有和混合Service-IaaS（基础设施即服务）云，它的架构高度模块化，内部组件都是web
	service，以提供灵活、可扩展性。
	
	 分布式应用（软件）对可靠性、可用性要求很高，因为软件失效（不稳定的软件）经常导致严重的经济和名誉损失。但软件可用性遭到的一个重要的威胁是软件衰退现象，这种现象指在运行过程中，（软件对应的）应用进程会遭遇性能下降。
	
	 有几种主动积极的actions可以采用，来减小软件衰退的影响，但是它们的解决方案都是针对它们分析的每个环境量身定制的（but their
	solutins are very special to each environment under analysis）。云计算平台的衰退现象引起了格外注意，因为这些环境应该提供高可用性、高稳定性、高容错和动态扩展性。
	
	 云计算平台中，互联网应用的用户希望这些应用无论何时、何地、以何方式，都是在线运行的（up and running）。云计算平台的虚拟和物理资源的使用情况都是多样的，因为平台中的多个组件具有多样性。
	
	
	3）有意义的地方
	
	 资源耗竭、数据不一致、数据错误等都是衰退的影响，根源是衰退相关的故障，故障引起错误，错误的累积，引起失效。
	
	 文：云计算平台的本质就是一个资源分布、共享的资源共享池，允许花最小的管理经历，便捷的分配、释放计算资源。如果该平台出现了衰退，那么云计算平台高强度的分配、重配置、释放资源必然会加剧衰退的脚步和影响。
	
	 启示：那么，对资源的操控对于云计算来说非常关键。
	
	 软件衰退的一个本质特性是累积性。（错误的累积）
	
	
	4）描述
	
	 本文分析了一个eucalyptus云计算平台要能快速处理用户的需求变化，同时保持它承载的应用的持续稳定、可靠运行。因此，对云计算平台及其软件的可靠性、可用性、动态扩展性要求很高。而软件衰退对于云计算平台的可用性、可靠性是一个重要的威胁（会造成严重影响）。作者分析了一个运行中的eucalyptus云计算平台中的软件衰退问题，通过观察资源使用的进展情况，发现了软件衰退的出现，主要与虚拟的和驻留的内存使用有关。而重启eucalyptus-nc重启后，就恢复正常了。因此在达到危险情况之前，周期性的重启eucalyptus-nc进程可被视作一种incidental（非主要的、附带的）抗衰。
	
	 5）未来工作
	
	 监测不同的抗衰策略对类似的云环境的影响。},
  timestamp = {2012.02.29}
}

@INPROCEEDINGS{Bovenzi2011p240-249,
  author = {Bovenzi, A. and Cotroneo, D. and Pietrantuono, R. and Russo, S.},
  title = {Workload Characterization for Software Aging Analysis},
  booktitle = {Proc. IEEE 22nd Int Software Reliability Engineering (ISSRE) Symp},
  year = {2011},
  pages = {240--249},
  doi = {10.1109/ISSRE.2011.18},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@INPROCEEDINGS{Cotroneo2011p1-6,
  author = {Cotroneo, Domenico and Natella, Roberto and Pietrantuono, Roberto
	and Russo, Stefano},
  title = {Software Aging and Rejuvenation:Where We Are and Where We Are Going},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {1--6},
  __markedentry = {[mariayh:]},
  abstract = {After 16 years, a significant body of knowledge has been established
	in the area of Software Aging Rejuvenation (SAR). In this paper,
	we survey papers about SAR that appeared in IEEE conferences and
	journals, identify where SAR research has been mostly focused, and
	highlight some aspects deserving more attention, with the aim to
	provoke a constructive discussion among SAR researches about where
	SAR has arrived and where it should be headed in the next future.},
  doi = {10.1109/WoSAR.2011.15},
  file = {(2011) Software Aging and Rejuvenation：Where We Are and Where We Are Going_01.pdf:02-国际会议论文 书籍\\01_2011 IEEE 3rd International Workshop on Software Aging and Rejuvenation (WoSAR)\\(2011) Software Aging and Rejuvenation：Where We Are and Where We Are Going_01.pdf:PDF},
  review = {一、主要内容
	
	本文从四个方面总结目前Software Aging and Rejuvenation（SAR）领域的研究：
	
	（一）、type of analysis
	
	 从这个角度看，目前主要的研究集中在预测衰退失效发生的时间，以及安排最优抗衰策略。
	
	 1）model-based analyses：建立检测系统的数学模型，研究三种状态：健康态、失效易发态、需要实施抗衰的状态。然后定期抗衰。
	
	 2）measure-based analyses
	
	（二）、type of system
	
	 1）安全关键的系统：控制系统（如爱国者导弹系统）
	
	 2）非安全关键的系统：web server，DBMS
	
	 3）不确定：未针对实际系统进行实验，数据集或模拟实验
	
	（三）、type of aging indicators：研究的衰退问题，分析的衰退因素：
	
	 目前考虑的因素分为：
	
	 1）内存耗竭（物理内存、交换空间）
	
	 2）性能退化（吞吐量、latency）
	
	 3）内存耗竭和性能退化
	
	 4）不特别区分哪种资源被衰退影响（研究资源消耗趋势）
	
	（四）、Software Rejuvenation Approaches
	
	 无论是基于模型的方法还是基于度量的方法，目前大多数SAR研究关注的是执行抗衰的最优安排，而不是具体的抗衰实施技术、方法。本文分为三种：
	
	 1）应用无关的actions
	
	 这类actions采用的方法主要是：组件重启、应用重启、VM/VMM（virtual machine，or virtual machine
	monitor）重启、节点重启、集群故障转移等。这类方法将系统或组件恢复到初始状态，基于系统的初始化措施，比较容易实施，应用范围也最广。
	
	 2）应用相关的actions
	
	 这类actions采用的方法主要是基于分析得到衰退的具体的相关因素，然后有针对性的清理这个衰退相关的资源，这类方法的目的是降低实施抗衰需要的成本（因实施抗衰导致的停机和性能损失）。这种actions需要额外机制的支持（一般需要开发期，程序员内置、开发），如垃圾回收、内核表刷新、碎片回收等。
	
	 这类actions的实施，还需要为指定的应用定制断点检查技术，确定恢复点。
	
	 3）unspecified（无实际试验）
	
	二、潜在的研究方向、点
	
	 1）发展混合抗衰方法：模型和度量方法混合，并增加现实世界系统中的应用。
	
	 并探讨抗衰策略如何实施，并鼓励实践者采用。
	
	 因此，需要实现在线监测和衰退评估框架。
	
	 2）在真实系统中做实验
	
	 安全关键的系统中，非常值得进一步调查衰退现象：虽然他们已经经过详尽的测试，但还是遗留有bug；设计和测试时，更多地关注衰退相关的bug，这些bug会影响系统的可靠性需求。
	
	 3）调查更多复杂的软件衰退表现
	
	 目前尚未有研究关注算术问题，如越界错误等，目前基于模型的方法和基于度量的方法都没有合适的aging indicator可以处理；
	
	 综合分析真实的衰退bug
	
	 4）开发更有效的技术来执行抗衰，以减少抗衰执行带来的成本},
  timestamp = {2012.02.20}
}

@ARTICLE{Kourai2011p839-851,
  author = {Kourai, K. and Chiba, S. },
  title = {Fast Software Rejuvenation of Virtual Machine Monitors},
  journal = {IEEE Transaction on Dependable and Secure Computing},
  year = {2011},
  volume = {8},
  pages = {839--851},
  number = {6},
  note = {引用7次},
  __markedentry = {[mariayh:]},
  abstract = {As server consolidation using virtual machines (VMs) is carried out,
	<span class='snippet'>software</span> aging of virtual machine monitors
	(VMMs) is becoming critical. Since a VMM is fundamental <span class='snippet'>software</span>
	for running VMs, its performance degradation or crash failure affects
	all VMs running on top of it. To counteract such <span class='snippet'>software</span>
	aging, a proactive technique called <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> has been proposed. A simple
	example of <span class='snippet'>rejuvenation</span> is to reboot
	a VMM. However, simply rebooting a VMM is undesirable because that
	needs rebooting operating systems on all VMs. In this paper, we propose
	a new technique for fast <span class='snippet'>rejuvenation</span>
	of VMMs called the warm-VM reboot. The warm-VM reboot enables efficiently
	rebooting only a VMM by suspending and resuming VMs without saving
	the memory images to persistent storage. To achieve this, we have
	developed two mechanisms: on-memory suspend/resume of VMs and quick
	reload of a VMM. Compared with a normal reboot, the warm-VM reboot
	reduced the downtime by 74 percent at maximum. It also prevented
	the performance degradation due to cache misses after the reboot,
	which was 52 percent in case of a normal reboot. In a cluster environment,
	the warm-VM reboot achieved higher total throughput than the system
	using VM migration and a normal reboot.},
  doi = {10.1109/TDSC.2010.20},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Koutras2011p20-25,
  author = {Koutras, V. P. and Platis, A. N. },
  title = {Applying Partial and Full Rejuvenation in Different Degradation Levels},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {20--25},
  __markedentry = {[mariayh:]},
  abstract = {In this paper, a two-level <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> model is introduced. The innovative
	aspect consists in combining partial, full and failed <span class='snippet'>rejuvenation</span>
	with the concept of triggering <span class='snippet'>rejuvenation</span>
	even if the <span class='snippet'>software</span> did not reach the
	failure probable state. In the later case, either partial or full
	<span class='snippet'>rejuvenation</span> actions can be performed.
	The aim is to observe the effects of partial and full <span class='snippet'>rejuvenation</span>
	frequencies on system's performance, in order to distinguish optimal
	<span class='snippet'>rejuvenation</span> schedules. System's performance
	is expressed through availability, downtime and <span class='snippet'>rejuvenation</span>
	cost indicators.},
  doi = {10.1109/WoSAR.2011.14},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Machida2011p44-49,
  author = {Machida, Fumio and Nicola, Victor F. and Trivedi, Kishor S. },
  title = {Job Completion Time on a Virtualized Server Subject to Software Aging
	and Rejuvenation},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {44--49},
  __markedentry = {[mariayh:]},
  abstract = {Virtual machine monitor (VMM) <span class='snippet'>rejuvenation</span>
	is a proactive recovery method against failures caused by <span class='snippet'>software</span>
	aging in VMM. Since the job running on a hosted virtual machine (VM)
	is interrupted at VMM <span class='snippet'>rejuvenation</span>,
	the preemption type of VMM <span class='snippet'>rejuvenation</span>
	is important for the performance of job execution. In preemptive
	repeat (prt), the interrupted job needs to restart after recovery.
	In preemptive resume (prs), the job can resume the execution from
	the interrupted point. In this paper, we analyze the completion time
	of a job running on a virtualized server subject to <span class='snippet'>software</span>
	aging and <span class='snippet'>rejuvenation</span> in prt case or
	prs case. The theory developed in [1] is used to obtain the Laplace-Stieltjes
	transform (LST) of job completion time for the server modeled as
	a semi-Markov process. Numerical inversion of the obtained LST shows
	that VMM <span class='snippet'>rejuvenation</span> with prs job interruption
	improves the performance of job execution, while the <span class='snippet'>rejuvenation</span>
	with prt job interruption may degrade or improve its performance
	depending on the severity of performance degradation caused by <span
	class='snippet'>software</span> aging.},
  doi = {10.1109/WoSAR.2011.10},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Ning2011p32-37,
  author = {Ning, Gaorong and Trivedi, Kishor S. and Hu, Hai and Cai, Kai-Yuan},
  title = {Multi-granularity Software Rejuvenation Policy Based on Continuous
	Time Markov Chain},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {32--37},
  __markedentry = {[mariayh:]},
  abstract = {In this paper,&#x0A0;&#x0A0;a multi-granularity <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> policy isstudied. Four
	granularities of <span class='snippet'>rejuvenation</span>&#x0A0;&#x0A0;are
	proposed tomitigate the impact of four levels of <span class='snippet'>software</span>
	aging respectively.Continuous Time Markov Chain (CTMC) model is used
	to obtain&#x0A0;&#x0A0;theavailability and cost from its closed form
	solution. Moreover, therelations between&#x0A0;&#x0A0;availability,&#x0A0;&#x0A0;&#x0A0;cost
	and parameters are studied and the optimal&#x0A0;&#x0A0;&#x0A0;selection
	of parameters is obtained&#x0A0;&#x0A0;&#x0A0;accordingly. Numerical
	examples show that&#x0A0;&#x0A0;&#x0A0;the optimal inspection rates
	for&#x0A0;&#x0A0;maximizing availability and minimizing cost become
	larger if&#x0A0;&#x0A0;inspection delay rate&#x0A0;&#x0A0;&#x0A0;becomes
	lower, and also the optimal inspection rates&#x0A0;&#x0A0;&#x0A0;have
	the property of phase transitions when inspection delay rate changes.},
  doi = {10.1109/WoSAR.2011.9},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2011p14-19,
  author = {Okamura, Hiroyuki and Dohi, Tadashi},
  title = {A POMDP Formulation of Multistep Failure Model with Software Rejuvenation},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {14--19},
  __markedentry = {[mariayh:]},
  abstract = {This paper derives a POMDP (partially observable Markov decision process)
	formulation for a <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	model. The POMDP is a generalized framework of MDP that handles the
	unobserved information. The POMDP gives qualitative insights for
	the effects of unobserved information based on their modeling. The
	main objective of this paper is to reveal the effect of system degradation
	information on <span class='snippet'>rejuvenation</span> strategies
	in a multistep failure model with <span class='snippet'>rejuvenation</span>.
	More specifically, we present a POMDP formulation and the optimality
	equations for the maximization of system availability in the multistep
	failure model. In a numerical example, we compare the maximum system
	availabilities when the system degradation is observable and unobservable
	and reveal the value of information on system degradation.},
  doi = {10.1109/WoSAR.2011.11},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Okamura2011p647-652,
  author = {Okamura, H. and Dohi, T. },
  title = {Application of Reinforcement Learning to Software Rejuvenation},
  booktitle = {Proc. 10th Int Autonomous Decentralized Systems (ISADS) Symp},
  year = {2011},
  pages = {647--652},
  __markedentry = {[mariayh:]},
  abstract = {<span class='snippet'>Software</span> <span class='snippet'>rejuvenation</span>
	is a preventive and proactive maintenance solution that is particularly
	useful for counteracting the phenomenon of <span class='snippet'>software</span>
	aging. Hence, it should be ideally triggered adaptively without the
	complete knowledge on system failure (degradation) time distribution
	in operational phase. In this paper we consider an operational <span
	class='snippet'>software</span> system with multiple degradation
	levels and derive the optimal <span class='snippet'>software</span>
	<span class='snippet'>rejuvenation</span> policy maximizing the steady-state
	system availability, via the semi-Markov decision process. We develop
	a statistically non-parametric algorithm to estimate the optimal
	<span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	schedule. Then, the reinforcement learning algorithm, called Q learning,
	is used for developing an on-line adaptive algorithm. A numerical
	example is presented to investigate asymptotic behavior of the resulting
	on-line adaptive algorithm.},
  doi = {10.1109/ISADS.2011.92},
  timestamp = {2012.02.20}
}

@ARTICLE{pop00525,
  author = {J Araujo and R Matos and P Maciel and R Matias and ...},
  title = {Experimental evaluation of software aging effects on the eucalyptus
	cloud computing infrastructure},
  journal = {（ACM）Proceedings of the Middleware 2011 Industry Track Workshop},
  year = {2011},
  note = {Query date: 2012-02-23},
  __markedentry = {[mariayh:2]},
  abstract = {The need for reliability and availability has increased in modern
	applications, which need to handle rapidly growing demands while
	providing uninterrupted service. This work investigates the memory
	leak and memory fragmentation aging effects on the Eucalyptus cloud-computing
	framework, which considers workloads composed of intensive requests
	addressing different virtual machines. We experimentally show the
	existence of the investigated aging effects in the cloud environment
	under study. Also, a software rejuvenation strategy to mitigate the
	observed aging effects is proposed and its benefits are evaluated.},
  file = {(2011) Experimental evaluation of software aging effects on the eucalyptus cloud computing infrastructure  (ACM).pdf:21_国外其他英文论文\\(2011) Experimental evaluation of software aging effects on the eucalyptus cloud computing infrastructure  (ACM).pdf:PDF},
  publisher = {dl.acm.org},
  review = {1）研究动机
	
	虽然目前已开发有许多技术，为虚拟系统提供高可靠性，如Remus（构建在Xen Hypervisor基础上的，不断从物理主机备份虚拟机到别处。实际上，备份机制也会把虚拟机中的错误状态也copy）。但这些方法只能解决硬件失效和（备份之后发生的）突发的软件bug，却不能避免或解决软件衰退带来的问题。
	
	
	 尤其是“elastic computing”（灵活计算）概念要求的灵活性和必不可少性，在虚拟机分配、重配置、析构时，使用虚拟机和远程存储资源，要求内存、磁盘高强度的运行。这加速了存在软件衰退的情况下，硬件和操作系统资源的耗竭。
	
	但在云计算环境下讨论衰退的影响，基本是个未探讨的话题。
	
	
	本文只测试内存泄露和碎片对云计算平台的影响效果。结论是有影响。作者未来预计通过可靠性度量处理云计算平台上衰退的影响。
	
	
	2）抗衰方法
	
	本文的抗衰策略采用文“R. Matias and P. J. F. Filho. An Experimental Study on
	Software Aging and Rejuvenation in Web Servers, Proc. 30th Annual
	Int. Computer Software and Applications Conf. (COMPSAC '06), 2006,1:
	189-196”的方法：发生衰退的节点控制器的主进程是apache进程。那么，发生衰退后，在其内存使用达到阈值（2G）的时候，发个Linux信号给Apache主进程，由apache主进程杀掉它管辖的所有空闲进程，再创建新的进程。这对服务的影响很小，因为主线程等待已建立的连接关闭。
	
	3）不足
	
	 只针对内存相关的衰退影响，如内存泄露、碎片，预测内存会损耗的时间（失效时间），没有考虑性能和业务遭受的影响。应该在业务受到影响的时候，就执行一定级别的抗衰，恢复业务，或将业务转给其他虚拟机。},
  timestamp = {2012.02.24},
  url = {http://dl.acm.org/citation.cfm?id=2090185}
}

@INPROCEEDINGS{Su2011p329-331,
  author = {Kehua Su and Hongbo Fu and Jie Li and Dengyi Zhang},
  title = {Software rejuvenation in virtualization environment},
  booktitle = {Proc. 6th IEEE Joint Int. Information Technology and Artificial Intelligence
	Conf. (ITAIC)},
  year = {2011},
  volume = {2},
  pages = {329--331},
  __markedentry = {[mariayh:]},
  abstract = {Combining virtualization technology used in current server consolidation
	widely, physical machines are transferred to virtual machines (VMs)
	and the applications running in the physical machines are also transferred
	to VMs. Virtualization technology becomes a trend. In order to improve
	the reliability of virtual machine system, and to deal with the phenomenon
	of &#x201C;<span class='snippet'>software</span> aging&#x201D;, in
	this paper, <span class='snippet'>software</span> <span class='snippet'>rejuvenation</span>
	in virtual environment (SRVE) is proposed to deal with "<span class='snippet'>software</span>
	aging" phenomenon of virtual machine monitor (VMM) and VMs, and to
	make them recover performance.},
  doi = {10.1109/ITAIC.2011.6030342},
  timestamp = {2012.02.20}
}

@ARTICLE{tyagi2011reliability,
  author = {Tyagi, K. and Sharma, A.},
  title = {Reliability of component based systems：a critical survey},
  journal = {ACM SIGSOFT Software Engineering Notes},
  year = {2011},
  volume = {36},
  pages = {1--6},
  number = {6},
  note = {所有的应用程序可靠性计算应该着重考虑两点：一是个体组件的可靠性，二是系统的运作概况},
  file = {基于组件的系统的可靠性:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\00- 综述性文章\\(2011-ACM) Reliability of component based systems：a critical survey.pdf:PDF},
  publisher = {ACM},
  review = {本文对基于组件的软件系统可靠性估算的目前水平作了概述，对各种估算方法的运用范围、模型、研究方法、技术、和确定计划作了讨论。通过对这些方法的对比，提供了作者对决定未来基于组件的软件系统可靠性的研究方向的深刻理解和洞察。
	
	 文章首先对基于组件的软件系统可靠性估算作了介绍，然后提出了软件可靠性相关的难题、基于组件的软件系统可靠性模型以及对这些可靠性模型体系结构的一般要求。接着，作者对不同方法所描述的模型架构作了讨论，对Littlewood’s
	model、Cheung’s model等13种可靠性模型关于运用范围、模型、研究方法、技术、和确定计划做了结构分析。得出了对未来工作的推论，认为所有的应用程序可靠性计算应该着重考虑两点：一是个体组件的可靠性，二是系统的运作概况。},
  url = {http://dl.acm.org/citation.cfm?id=2047434}
}

@INPROCEEDINGS{Yang2011p298-302,
  author = {Huan Yang and Yiwen Liang and Chengyu Tan and Jun Fu},
  title = {Detecting software aging of web servers with real-valued negative
	selection algorithm},
  booktitle = {Proc. IEEE 3rd Int Communication Software and Networks (ICCSN) Conf},
  year = {2011},
  pages = {298--302},
  doi = {10.1109/ICCSN.2011.6014274},
  owner = {mariayh},
  timestamp = {2012.02.19}
}

@UNPUBLISHED{yang2011RejuvnationTerms,
  author = {杨欢},
  title = {抗衰领域关键词汇汇总},
  year = {2011},
  file = {抗衰领域关键词汇汇总:01- 抗衰领域关键词汇汇总.docx:Word},
  timestamp = {2012.02.21}
}

@INPROCEEDINGS{Zhao2011p260-269,
  author = {Jing Zhao and Yuliang Jin and Trivedi, K. S. and Matias, R. },
  title = {Injecting Memory Leaks to Accelerate Software Failures},
  booktitle = {Proc. IEEE 22nd Int Software Reliability Engineering (ISSRE) Symp},
  year = {2011},
  pages = {260--269},
  __markedentry = {[mariayh:]},
  abstract = {A number of studies have reported the phenomenon of "<span class='snippet'>Software</span>
	aging", caused by resource exhaustion and characterized by progressive
	<span class='snippet'>software</span> performance degradation. We
	develop experiments that simulate an on-line bookstore application,
	following the standard configuration of TPC-W benchmark. We study
	the application failures caused by memory leaks, using the accelerated
	life tests method. In our experiments, the memory consumption rate
	is selected as the acceleration factor, and an IPL-lognormal model
	is used to estimate the time to failure at each acceleration level.
	Subsequently, the estimate of the time to failure distribution at
	normal condition is obtained. Our acceleration experimental results
	based on the IPL-lognormal model show that it can be used to greatly
	reduce the cost to obtain the time to failure at normal level, which
	can be used in scheduling <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span>. Finally, we select the Weibull
	time to failure distribution at normal level, to be used in a semi-Markov
	process, to optimize the <span class='snippet'>software</span> <span
	class='snippet'>rejuvenation</span> trigger interval.},
  doi = {10.1109/ISSRE.2011.24},
  timestamp = {2012.02.20}
}

@INPROCEEDINGS{Zhao2011p56-61,
  author = {Zhao, Jing and Trivedi, Kishor S. },
  title = {Performance Modeling of Apache Web Server Affected by Aging},
  booktitle = {Proc. IEEE Third Int Software Aging and Rejuvenation (WoSAR) Workshop},
  year = {2011},
  pages = {56--61},
  __markedentry = {[mariayh:]},
  abstract = {A number of studies have reported the phenomenon of "<span class='snippet'>software</span>
	aging", characterized by progressive <span class='snippet'>software</span>
	performance degradation. Response time (RT) as a customer-affecting
	metric can be used to detect the onset of <span class='snippet'>software</span>
	aging. Alberto Avritzer et al. proposed several <span class='snippet'>software</span>
	aging detection and <span class='snippet'>rejuvenation</span> algorithms
	based on the measured variation of RT. In this paper, we extend the
	result by Ablerto Avritzer et al. by using a validated M/E2/1/K queueing
	model of Apache web server that is used to help detect aging. Simulation
	results show the effectiveness of these algorithms and to help set
	various control parameters.},
  doi = {10.1109/WoSAR.2011.13},
  timestamp = {2012.02.20}
}

@UNPUBLISHED{Duke2012EnvironmentDiversity,
  author = {Duke},
  title = {环境多样性、数据多样性-Environment 、Data Diversity},
  year = {2012},
  review = {1、Environment diversity-环境多样性
	
	Environment diversity is the newest approach to fault tolerance in
	software. Although this technique has been used for long in an ad-hoc
	manner, only recently has it gained recognition and importance. Having
	its basis on the observation that most software failures are transient
	in nature, the environment diversity approach requires reexecuting
	the software in a different environment [17]. Environment diversity
	deals effectively with Heisenbugs by exploiting their definition
	and nature.
	
	
	Adams [1] has proposed restarting the system as the best approach
	to masking software faults. Environment diversity is a generalization
	of restart. This has been proposed in [15,17] as a cheap but effective
	technique for fault tolerance in software. There are three components
	which determine the behavior of a process or executing software [32]:
	
	
	 * The volatile state: This consists of the program stack and static
	and dynamic data segments.
	
	 * The persistent state: This state refers to all the user files related
	to a program's execution.
	
	 * The operating system (OS) environment: This refers to all the resources
	the program accesses through the operating system like swap space,
	file systems, communication channels, keyboard and monitors.
	
	
	
	Transient faults typically occur in computer systems due to design
	faults in software which result in unacceptable and erroneous states
	in the OS environment. Therefore environment diversity attempts to
	provide a new or modified operating environment for the running software.
	Usually, this is done at the instance of a failure in the software.
	When the software fails, it is restarted in a different, error-free
	OS environment state which is achieved by some clean up operations.
	
	
	Examples of environment diversity techniques include retry operation,
	restart application and rebooting the node. The retry and restart
	operations can be done on the same node or on another spare (cold/warm/hot)
	node.
	
	
	Tandem's fault tolerant computer system [22] is based on the process
	pair approach. It was noted that these failures did not recur once
	the application was restarted on the second processor. This was due
	to the fact that the second processor provided a different environment
	which did not trigger the same error conditions which led to the
	failure of the application on the first processor. Hence, in this
	case, hardware redundancy was used to tolerate most of the software
	faults. The basic observation in all these transient failures is
	that the same error condition is unlikely to occur if the software
	is reexecuted in a different environment.
	
	
	A specific form of environment diversity, called software rejuvenation
	[5,10,16,30,31] is the crux of our research..
	
	2、数据多样性- Data diversity
	
	Data diversity, a technique for fault tolerance in software, was introduced
	by Amman and Knight [3]. While the design diversity approaches to
	provide fault tolerance rely on multiple versions of the software
	written to the same specifications, the data diversity approach uses
	only one version of the software. This approach relies on the observation
	that a software sometime fails for certain values in the input space
	and this failure could be averted if there is a minor perturbation
	of input data which is acceptable to the software. N-copy programming,
	based on data diversity, has N copies of a program executing in parallel,
	but each copy running on a different input set produced by a diverse-data
	system. The diverse-data system produces a related set of points
	in the data space. Selection of the system output is done using an
	enhanced voting scheme which may not be a majority voting mechanism.
	This technique might not be acceptable to all programs since equivalent
	input data transformations might not be acceptable by the specification.
	However, in some cases like a real time control program, a minor
	perturbation in sensor values may be able to prevent a failure since
	sensor values are usually noisy and inaccurate.
	
	
	Data diversity can work well with Bohrbugs and is cheaper to implement
	than design diversity techniques. To some extent, data diversity
	can also deal with Heisenbugs since different input data is presented
	and by definition, these bugs are non-deterministic and non-repeatable.
	
	
	3、设计多样性 - Design diversity
	
	Design diversity techniques are specifically developed to tolerate
	design faults in software arising out of wrong specifications and
	incorrect coding. Two or more variants of a software developed by
	different teams but to a common specification are used. These variants
	are then used in a time or space redundant manner to achieve fault
	tolerance. Popular techniques which are based on the design diversity
	concept for fault tolerance in software are:
	
	
	 * N-version programming: First introduced by Avizienis et. al. [2]
	in 1977, this concept is similar to the NMR (N-modular programming)
	approach in hardware fault tolerance. In this technique, N (N>=2)
	independently generated functionally equivalent programs called versions,
	are executed in parallel. A majority voting logic is used to compare
	the results produced by all the versions and report one of the results
	which is presumed correct. The ability to tolerate faults here depends
	on how ``independent'' the different versions of the program are.
	This technique has been applied to a number of real-life systems
	like railroad traffic control and flight control, even though the
	overhead involved in generating different versions and implementing
	the voting logic may be high.
	
	 * Recovery block: Recovery blocks were first introduced by Horning
	et. al. [14]. This scheme is analogous to the cold standby scheme
	for hardware fault tolerance. Basically, in this approach, multiple
	variants of a software which are functionally equivalent are deployed
	in a time redundant fashion. An acceptance test is used to test the
	validity of the result produced by the primary version. If the result
	from the primary version passes the acceptance test, this result
	is reported and execution stops. If, on the other hand, the result
	from the primary version fails the acceptance test, another version
	from among the multiple versions is invoked and the result produced
	is checked by the acceptance test. The execution of the structure
	does not stop until the acceptance test is passed by one of the multiple
	versions or until all the versions have been exhausted. The significant
	differences in the recovery block approach from N-version programming
	are that only one version is executed at a time and the acceptability
	of results is decided by a test rather than by majority voting. The
	recovery block technique has been applied to real life systems and
	has been the basis for the distributed recovery block structure for
	integrating hardware and software fault tolerance and the extended
	distributed recovery block structure for command and control applications.
	Modeling and analysis of recovery blocks are desribed by Tomek et
	al. [28,29].
	
	 * N-self checking programming: In N-self checking programming, multiple
	variants of a software are used in a hot-standby fashion as opposed
	to the recovery block technique in which the variants are used in
	the cold-standby mode. A self-checking software component is a variant
	with an acceptance test or a pair of variants with an associated
	comparison test [19]. Fault tolerance is achieved by executing more
	than one self-checking component in parallel. These components can
	also be used to tolerate one or more hardware faults. 
	
	
	The design diversity approach was developed mainly to deal with Bohrbugs.
	It relies on the assumption of independence of between multiple variants
	of software. However, as some studies have shown, this assumption
	may not always be valid. Design diversity can also be used to treat
	Heisenbugs. Since there are multiple versions of software operating,
	it not likely that all of them will experience the same transient
	failure. On the disadvantages of design diversity is the high cost
	involved in developing multiple variants of software. However, as
	we shall see in Section 3.3, there are another approaches which are
	more efficient and better suited to deal with Heisenbugs.},
  timestamp = {2012.03.01},
  url = {http://srel.ee.duke.edu/sw_ft/node8.html}
}

@UNPUBLISHED{Duke2012Softwarefaulttolerance,
  author = {Duke},
  title = {软件故障容错技术},
  year = {2012},
  file = {软件容错技术:07- 软件容错\\软件容错技术 - Duke大学.html:URL},
  timestamp = {2012.03.01}
}

@ARTICLE{pop00491,
  author = {L Jiang and ...},
  title = {Apply Time and Measurement Based Software Rejuvenation to Improve
	System Availability},
  journal = {Advances in Computer, Communication, Control and …},
  year = {2012},
  note = {Query date: 2012-02-23},
  publisher = {Springer},
  timestamp = {2012.02.25},
  url = {http://www.springerlink.com/index/T53W62K622153657.pdf}
}

@ARTICLE{pop00509,
  author = {W Jiwen},
  title = {Recursive Software Rejuvenation for High Available E-Business Cluster
	Systems},
  journal = {Software Engineering and Knowledge Engineering: …},
  year = {2012},
  note = {Query date: 2012-02-23},
  publisher = {Springer},
  timestamp = {2012.02.25},
  url = {http://www.springerlink.com/index/N7X1H33320T43040.pdf}
}

@ARTICLE{pop00510,
  author = {J Guo and XY Song and YS Wang and ...},
  title = {The Measurement of Software Aging Damage and Rejuvenation Strategy
	for Discrete Web Services},
  journal = {Advanced Materials …},
  year = {2012},
  note = {Query date: 2012-02-23},
  publisher = {Trans Tech Publ},
  timestamp = {2012.02.25},
  url = {http://www.scientific.net/AMR.433-440.432}
}

@ARTICLE{pop00621,
  author = {G Jun and W Bo and W Yunsheng and Z Bin and ...},
  title = {Research of the Software Aging Regeneration Strategy Based on Components},
  journal = {Proceedings of the 2011, …},
  year = {2012},
  note = {Query date: 2012-02-23},
  publisher = {Springer},
  timestamp = {2012.02.25},
  url = {http://www.springerlink.com/index/L652227LJJ55841H.pdf}
}

@UNPUBLISHED{wiki20120229software-aging,
  author = {维基百科},
  title = {Software Aging定义},
  year = {2012},
  review = {Software aging
	
	（From Wikipedia, the free encyclopedia）
	
	In software engineering, software aging (in American English, or software
	ageing in British English) refers to progressive performance degradation
	or a sudden hang/crash of a software system due to exhaustion of
	operating system resources, fragmentation and accumulation of errors.
	A proactive fault management method to deal with the software aging
	phenomenon is software rejuvenation. This method can be classified
	as an environment diversity technique that usually is implemented
	through software rejuvenation agents (SRA). However, the simplest
	way to emulate software rejuvenation is to reboot the system or restart
	the aging application.
	
	
	Memory leaks are a potential cause or contributoring factor in software
	aging, as they can exhaust available system memory.an experimental
	study on software aging
	
	参考文献：
	
	 * R. Matias Jr. and P. J. Freitas Filho, "An experimental study on
	software aging and rejuvenation in web servers," Proceedings of the
	30th Annual International Computer Software and Applications Conference
	(COMPSAC'06), Vol. 01, pp. 189 - 196, 2006.
	
	 * M. Grottke, R. Matias Jr., and K. S. Trivedi, "The Fundamentals
	of Software Aging," Workshop of Software Aging and Rejuvenation (WoSAR/ISSRE),
	2008.
	
	 * R. Matias Jr, P. Barbetta, K. Trivedi, P. Freitas Filho "Accelerated
	Degradation Tests Applied to Software Aging Experiments," IEEE Transactions
	on Reliability 59(1): 102-114,2010.
	
	 * M. Grottke, L. Li, K. Vaidyanathan, and K.S. Trivedi, "Analysis
	of software aging in a web server," IEEE Transactions on Reliability,
	vol. 55, no. 3, pp. 411-420, 2006.
	
	 * M. Grottke, K. Trivedi, "Fighting Bugs: Remove, Retry, Replicate,
	and Rejuvenate," IEEE Computer 40(2): 107-109, 2007.
	
	 * More papers on Proceedings of Workshop of Software Aging and Rejuvenation
	(WoSAR'08,'10, '11) at IEEE Xplore.},
  timestamp = {2012.02.29},
  url = {http://en.wikipedia.org/wiki/Software_aging}
}

@UNPUBLISHED{yang2012definitionOfSoftwareAging,
  author = {杨欢},
  title = {软件衰退定义},
  year = {2012},
  review = {1、K. Vaidyanathan的定义（他的博士论文中）：软件衰退是长期运行的软件出现的状态退化现象。衰退的原因是操作系统和中间件系统的资源耗竭（资源回收bug）、这些资源的碎片（资源回收bug）、数据损坏和数值误差（数据溢出）的积累。最后，会导致性能下降、安全威胁或失效（挂起/崩溃）。},
  timestamp = {2012.02.25}
}

@UNPUBLISHED{yang2012软件危机,
  author = {杨欢},
  title = {软件危机及其原因（软件老化）},
  month = {2},
  year = {2012},
  file = {软件 软件危机  软件工程 （软件危机导致退化）:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\其他参考文献\\00- 软件 软件危机  软件工程 （软件危机导致退化）.doc:Word;软件危机及其原因:E\:\\000_我的研究\\11- 参考文献\\02_软件可靠性相关\\PPT\\02-软件危机及其原因.ppt:PowerPoint},
  review = {软件在使用过程中，没有磨损、老化的问题。
	
	软件在生存周期后期不会因为磨损而老化，但会为了适应硬件、环境以及需求的变化而进行修改，而这些修改又不可避免的引入错误，导致软件失效率升高，从而发生类似的软件退化，软件老化问题不容忽视。
	
	当修改、维护、运营的成本变得难以接受时，软件就被抛弃。这就会导致新的开发、设计成本。},
  timestamp = {2012.02.21},
  url = {http://www.aka.org.cn/Magazine/Aka2/weiji.html}
}

@UNPUBLISHED{yanglu2012noteTmplt,
  author = {杨欢，吕林},
  title = {读书笔记模板},
  year = {2012},
  file = {读书笔记模板:E\:\\000_我的研究\\01_已读论文 & 读书笔记\\10-读书笔记 总结等\\000- 论文读书笔记模板.docx:Word},
  review = {摘要：
	
	
	心得：
	
	1)文章中提出的问题的动机(motivations)是什么？
	
	2)如何找到解决问题的方法的？(如何选择解决方案)
	
	3)解决方案成立的假设是什么？假设是否现实(realistic)？如果去掉假设是否会影响方法的有效性？
	
	4)将来的研究方向是什么？哪些已经完成或实现？理论证明或实验模拟是否完善？算法潜在的扩展或改进方向是什么？还有哪些潜在的应用领域？等等},
  timestamp = {2012.02.22}
}

@ARTICLE{iyer1985effect,
  timestamp = {2012.03.06}
}

@comment{jabref-meta: selector_review:}

@comment{jabref-meta: selector_publisher:}

@comment{jabref-meta: psDirectory:.;}

@comment{jabref-meta: fileDirectory-mariayh@mariayh-PC:.;}

@comment{jabref-meta: fileDirectory:.;}

@comment{jabref-meta: selector_author:}

@comment{jabref-meta: selector_title:读书笔记;}

@comment{jabref-meta: selector_journal:}

@comment{jabref-meta: selector_keywords:}

@comment{jabref-meta: pdfDirectory:.;}

@comment{jabref-meta: groupsversion:3;}

@comment{jabref-meta: groupstree:
0 AllEntriesGroup:;
1 ExplicitGroup:综述性文章\;0\;Cai2003p77-86a\;Cotroneo2011p1-6\;Duke2012En
vironmentDiversity\;Liu2002p159-170\;Trivedi2000p270-279\;avizienis200
1fundamental\;vaidyanathan2001extended\;wiki20120229software-aging\;徐建
2007软件抗衰研究综述\;;
1 ExplicitGroup:博士论文\;0\;bao2004adaptive\;pop00549\;vaidyanathan2002pr
oactive\;徐建2006p-\;游静2006细粒度软件抗衰策略及相关技术研究\;王湛2007智能化细粒度软件抗衰策略及相关技术研究\;
郭成昊2007计算系统的自适应体系结构研究\;;
1 ExplicitGroup:按研究方向分类\;0\;;
2 ExplicitGroup:基于时间模型的方法 (定期抗衰)\;0\;Dohi2000p77-84\;Garg1995p180-187\
;Garg1997p88-96\;Huang1995p381-390\;garg1996minimizing\;garg1996modeli
ng\;garg1998analysis\;pfening1996optimal\;;
2 ExplicitGroup:基于度量的方法（视情抗衰）\;0\;Alonso2011p163-170\;Andrzejak2007p15
9-168\;Bao2005p541-548\;Ghoneim2003p57-75\;garg1998methodology\;sheres
hevsky2003software\;徐建2006基于免疫遗传的软件衰退检测算法\;;
3 ExplicitGroup:衰退检测、评估\;0\;Li2002p91-100\;araujo2011software\;garg199
8methodology\;;
3 ExplicitGroup:基于阈值的抗衰策略\;0\;MouraSilva2007p33-44\;pop00525\;;
3 ExplicitGroup:基于预测的抗衰策略\;0\;Araujo2011p38-43\;;
4 ExplicitGroup:基于时序分析的预测抗衰\;0\;Araujo2011p38-43\;garg1998methodology\
;vaidyanathan1999measurement\;;
4 ExplicitGroup:基于机器学习的预测抗衰\;0\;Alonso2010p507-516\;Alonso2011p163-170
\;Andrzejak2008p25-32\;Magalhães2010p1-7\;andrzejak2008robust\;cassid
y2002advanced\;magalhaes2010detection\;simeonov2010proactive\;;
2 ExplicitGroup:混合方法（模型&度量）\;0\;vaidyanathan2002analysis\;;
2 ExplicitGroup:抗衰实施技术\;0\;MouraSilva2007p33-44\;candea2004microreboot
\;garg1996minimizing\;pop00107\;thein2009availability\;;
1 ExplicitGroup:按研究团队分类\;0\;;
2 ExplicitGroup:Y. Huang -AT&T\;0\;Huang1995p381-390\;Yajnik1997p-\;;
2 ExplicitGroup:K.S. Trivedi -Duke Uni.\;0\;1335467\;Avritzer2006p435-
444\;Bao2003p241-248\;Bao2005p541-548\;Dohi2000p25-34\;Dohi2000p77-84\
;Garg1995p180-187\;Garg1997p88-96\;Grottke2006p411-420\;Li2002p91-100\
;Liu2002p159-170\;Suzuki2003p479-490\;Trivedi2000p270-279\;Vaidyanatha
n2001p62-71\;Vaidyanathan2005p124-137\;Wang2007p247-265\;Xie2004p122-1
29\;bao2004adaptive\;castelli2001proactive\;castelli2001proactiveaging
\;garg1995time\;garg1996minimizing\;garg1996modeling\;garg1998analysis
\;garg1998methodology\;grottke2007fighting\;pfening1996optimal\;vaidya
nathan1999measurement\;vaidyanathan2001extended\;vaidyanathan2002proac
tive\;;
2 ExplicitGroup:J. Alonso   -西班牙 加泰罗尼亚大学\;0\;Alonso2009p264-269\;Alons
o2010p507-516\;Alonso2011p163-170\;Alonso2011p250-259\;Alonso2011p26-3
1\;;
2 ExplicitGroup:Yunfei Jia -北航\;0\;Jia2008p1-6a\;Jia2008p241-246\;Jia2
008p77-84\;;
2 ExplicitGroup:IBM\;0\;El-Shishiny2008p182-187\;el2008mining\;;
2 ExplicitGroup:A.Andrzejak & L.Silva\;0\;Andrzejak2007p159-168\;Andrz
ejak2008p25-32\;Silva2006p56-65a\;andrzejak2008robust\;pop00111\;;
2 ExplicitGroup:刘凤玉   -南京理工大\;0\;Jing2005p34-38\;徐建2006p-\;徐建2006基于免疫遗
传的软件衰退检测算法\;游静2006细粒度软件抗衰策略及相关技术研究\;王湛2007智能化细粒度软件抗衰策略及相关技术研究\;范新媛2003
p1543-1546\;范新媛2004p231-234\;;
2 ExplicitGroup:J. Araujo  -巴西\;0\;araujo2011software\;;
1 ExplicitGroup:已读论文\;0\;;
2 ExplicitGroup:精读的论文\;0\;Cotroneo2011p1-6\;Grottke2006p411-420\;Grott
ke2008p1-6\;Huang1995p381-390\;garg1998analysis\;garg1998methodology\;
parnas1994software\;;
2 ExplicitGroup:泛读的论文\;0\;1335467\;Alonso2011p163-170\;Andrzejak2007p1
59-168\;Andrzejak2008p25-32\;Araujo2011p38-43\;Bao2003p241-248\;Bao200
5p541-548\;Dohi2000p77-84\;Ghoneim2003p57-75\;Jia2008p1-6a\;Jia2008p24
1-246\;Jia2008p77-84\;Li2002p91-100\;Magalhães2010p1-7\;MouraSilva200
7p33-44\;Vaidyanathan2005p124-137\;andrzejak2008robust\;araujo2011soft
ware\;cassidy2002advanced\;castelli2001proactiveaging\;el2008mining\;g
uo2008web\;ma2007web\;pop00525\;simeonov2010proactive\;thein2009availa
bility\;vaidyanathan1999measurement\;vaidyanathan2001extended\;vaidyan
athan2003mset\;徐建2006基于免疫遗传的软件衰退检测算法\;;
1 ExplicitGroup:需阅读\;0\;Alonso2010p507-516\;Anerousis2005p75-88\;El-Sh
ishiny2008p182-187\;Grottke2006p411-420\;Guo2010p80-83\;Jiang2009p435-
439\;Kourai2011p839-851\;Liu2002p159-170\;Matias2006p189-196\;Moorsel2
006p547-558\;Trivedi2000p270-279\;Vaidyanathan2001p62-71\;Vaidyanathan
2005p124-137\;Wang2007p247-265\;Xie2004p122-129\;Yang2010p46-53\;Zhao2
008p327-331\;garg1998analysis\;grottke2007fighting\;immonen2008survey\
;pop00273\;pop00543\;salfner2010survey\;shetty2008analysis\;thein2009a
vailability\;tyagi2011reliability\;;
1 ExplicitGroup:毕业论文要参考的论文\;0\;Alonso2009p264-269\;Alonso2010p507-516\
;Andrzejak2008p25-32\;Araujo2011p38-43\;Barford1998p151-160\;Bobbio199
8p4-12\;Cai2003p77-86a\;Cotroneo2011p1-6\;Dai2007p781-795\;Diao2003p13
6-149\;El-Shishiny2008p182-187\;Garg1995p180-187\;Garg1997p88-96\;Grot
tke2008p1-6\;Huang1995p381-390\;Li2002p91-100\;Magalhães2010p1-7\;Mat
ias2006p189-196\;Matias2010p102-114\;Mosberger1998p31-37\;Vaidyanathan
2001p62-71\;Zhang2010p138-140\;araujo2011software\;aung2004software\;c
andea2004microreboot\;chu2010review\;garg1998analysis\;garg1998methodo
logy\;grottke2007fighting\;immonen2008survey\;lyu2007software\;parnas1
994software\;pfening1996optimal\;pop00525\;simeonov2010proactive\;tyag
i2011reliability\;vaidyanathan2001extended\;徐建2006p-\;范新媛2003p1543-154
6\;;
2 ExplicitGroup:集群环境下的软件抗衰\;0\;Vaidyanathan2001p62-71\;Wang2007p247-26
5\;castelli2001proactiveaging\;;
1 ExplicitGroup:读书笔记\;0\;yang2011RejuvnationTerms\;yang2012definitionO
fSoftwareAging\;yang2012软件危机\;yanglu2012noteTmplt\;;
1 ExplicitGroup:软件容错\;0\;Duke2012EnvironmentDiversity\;Duke2012Softwar
efaulttolerance\;pezze2009handling\;torres2000software\;;
2 ExplicitGroup:AIS与软件容错\;0\;xanthakis1996immune\;;
1 ExplicitGroup:其他论文\;0\;;
2 ExplicitGroup:衰退与入侵的区别\;0\;1335467\;aung2004software\;;
2 ExplicitGroup:实验相关\;0\;Matias2006p189-196\;Matias2010p102-114\;Moura
Silva2007p33-44\;castelli2001proactiveaging\;tixeuil2006overview\;陈锦富2
009软件错误注入测试技术研究\;;
2 ExplicitGroup:软件生命周期\;0\;朱鸿2002web\;钱鸿生2006p-\;钱鸿生2006基于风险管理的软件生命周期模
型研究\;;
2 ExplicitGroup:国内其他中文论文\;0\;linyijie2010Rejuvenation\;;
}

